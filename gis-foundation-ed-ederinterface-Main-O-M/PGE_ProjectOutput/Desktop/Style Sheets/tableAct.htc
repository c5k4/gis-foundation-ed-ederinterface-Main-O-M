// Originally posted on http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndude/html/dude07232001.asp
// Altered to allow selection of text on the web page and removed drag/drop behavior.

<public:event	name="onrowselect" ID=rowSelect />
<public:property name="hlColor" />
<public:property name="slColor" />
<public:property name='dragColor' />

<PUBLIC:ATTACH EVENT="ondetach" ONEVENT="cleanup()" />
<public:attach 	event=oncontentready onevent="init();" />


<script language=jscript>

var currRow = -1;
var selRow = -1;

if (element.tagName == 'TABLE')
{
	element.attachEvent('onmouseover', onMouseOver);
	element.attachEvent('onmouseout', onMouseOut);
	element.attachEvent('onclick', onClick);
}
else
{
	alert("Error: tableAct not attached to a table element");
}

function cleanup()
{
	hilite(-1);

	element.detachEvent('onmouseover', onMouseOver);
	element.detachEvent('onmouseout', onMouseOut);
	element.detachEvent('onclick', onClick);
}

function onClick()
{
	srcElem = window.event.srcElement;

	//crawl up the tree to find the table row
	while (srcElem.tagName != "TR" && srcElem.tagName != "TABLE")
		srcElem = srcElem.parentElement;

	if(srcElem.tagName != "TR") return;

	if(srcElem.parentElement.tagName != "TBODY") return;

	//if(srcElem.rowIndex == 0 ) return;

	if (selRow != -1) selRow.runtimeStyle.backgroundColor = '';

	srcElem.runtimeStyle.backgroundColor = slColor;
	selRow = srcElem;
	
	var oEvent 	= createEventObject();
	oEvent.selected = selRow;
	rowSelect.fire(oEvent);
}

function onMouseOver()
{
	srcElem = window.event.srcElement;
	//crawl up to find the row
	while (srcElem.tagName != "TR" && srcElem.tagName != "TABLE")
		srcElem = srcElem.parentElement;

	if(srcElem.tagName != "TR") return;

	if (srcElem.parentElement.tagName == "TBODY")
		hilite(srcElem);
	else
		hilite(-1);

}

function onMouseOut()
{
	// Make sure we catch exit from the table
	hilite(-1, -1);
}

function hilite(newRow)
{
	if (hlColor != null )
	{
		if (currRow != -1 && currRow!=selRow)
		{
			currRow.runtimeStyle.backgroundColor = '';
		}

		if (newRow != -1 && newRow!=selRow)
		{
			newRow.runtimeStyle.backgroundColor = hlColor;
		}
	}
	currRow = newRow;
} 

/// sort
//
// global variables
//
var tbody=null;					
var theadrow=null;
var colCount = null;


var reverse = false;
var lastclick = -1;					// stores the object of our last used object

var arrHitTest = new Array();
var bDragMode = false;
var objDragItem;
var arrHitTest = new Array();
var iArrayHit = false;

function init() {

	// get TBODY - take the first TBODY for the table to sort
	tbody = element.tBodies(0);
	if (!tbody) return;

	//Get THEAD  
	var thead = element.tHead;
	if (!thead)  return;
	
	theadrow = thead.children[0]; //Assume just one Head row
	if (theadrow.tagName != "TR") return;

	theadrow.runtimeStyle.cursor = "hand";

	colCount = theadrow.children.length;
	var l, clickCell;
  var cx=0;
  var cy=0;
  var c;

	for (var i=0; i<colCount; i++) 
	{
//		// Create our blank gif
//		l=document.createElement("IMG");
//		l.src="blank.gif";
//		l.id="srtImg";
//		l.width=25;
//		l.height=11;
//
		clickCell = theadrow.children[i];
		clickCell.selectIndex = i;
//		clickCell.insertAdjacentElement("beforeEnd", l)
		clickCell.attachEvent("onclick", doClick);

        arrHitTest[i] = new Array();

    	c = clickCell.offsetParent;


	   if(cx == 0 && cy == 0 )
	   {
	    	while (c.offsetParent != null) {
                  cy += c.offsetTop;
                  cx += c.offsetLeft;
                  c = c.offsetParent;
		}
	}

	arrHitTest[i][0] = cx + clickCell.offsetLeft;
	arrHitTest[i][1] = cy + clickCell.offsetTop;
	arrHitTest[i][2] = clickCell;
	arrHitTest[i][3] = cx + clickCell.offsetLeft + eval(clickCell.width);

//	clickCell.attachEvent("onmousedown",onMouseDown);
	}

  defaultTitleColor = theadrow.children[0].currentStyle.backgroundColor;	 

//  element.document.attachEvent("onmousemove",onMouseMove);
//  element.document.attachEvent("onmouseup",onMouseUp);
// element.document.attachEvent("onselectstart",onSelect);
}

//
// doClick handler
// 
//
function doClick(e) 
{
	var clickObject = e.srcElement;

	while (clickObject.tagName != "TD") 
	{
		clickObject = clickObject.parentElement;
	}

	
	// clear the sort images in the head
//	var imgcol= theadrow.all('srtimg');
//	for(var x = 0; x < imgcol.length; x++) 
//		imgcol[x].src = "blank.gif";
//
	if(lastclick == clickObject.selectIndex)
	{
		if(reverse == false)
		{
//			clickObject.children[0].src = "down.gif";
		      reverse = true;
		}
		else 
		{
//			clickObject.children[0].src = "up.gif";
			reverse = false;
		}
	}
	else
	{
		reverse = false;
		lastclick = clickObject.selectIndex;
//		clickObject.children[0].src = "up.gif";
	}

	insertionSort(tbody, tbody.rows.length-1,  reverse, clickObject.selectIndex);
}

function insertionSort(t, iRowEnd, fReverse, iColumn)
{
	var iRowInsertRow, iRowWalkRow, current, insert;
    for ( iRowInsert = 0 + 1 ; iRowInsert <= iRowEnd ; iRowInsert++ )
    {
        if (iColumn) {	
		if( typeof(t.children[iRowInsert].children[iColumn]) != "undefined")
     		      textRowInsert = t.children[iRowInsert].children[iColumn].innerText;
		else
			textRowInsert = "";
        } else {
           textRowInsert = t.children[iRowInsert].innerText;
        }
		
        for ( iRowWalk = 0; iRowWalk <= iRowInsert ; iRowWalk++ )
        {
            if (iColumn) {
			if(typeof(t.children[iRowWalk].children[iColumn]) != "undefined")
				textRowCurrent = t.children[iRowWalk].children[iColumn].innerText;
			else
				textRowCurrent = "";
            } else {
			textRowCurrent = t.children[iRowWalk].innerText;
            }

		//
		// We save our values so we can manipulate the numbers for
		// comparison
		//
		current = textRowCurrent;
		insert  = textRowInsert;


		//  If the value is not a number, we sort normally, else we valuate
		//  the value to get a numeric representation
		//  Altered from original tableAct.htc to address a bug
		//  with sorting with blank values.
		if ( !isNaN(insert)) 
		{
			insert= eval(insert);
		} else {
			insert	= insert.toLowerCase();
		}

		if ( !isNaN(current) ) 
		{
			current= eval(current);
		} else {
			current	= current.toLowerCase();
		}


            if ( (   (!fReverse && insert < current)
                 || ( fReverse && insert > current) )
                 && (iRowInsert != iRowWalk) )
            {
		    eRowInsert = t.children[iRowInsert];
                eRowWalk = t.children[iRowWalk];
                t.insertBefore(eRowInsert, eRowWalk);
                iRowWalk = iRowInsert; // done
            }
        }
    }
}


</script>
