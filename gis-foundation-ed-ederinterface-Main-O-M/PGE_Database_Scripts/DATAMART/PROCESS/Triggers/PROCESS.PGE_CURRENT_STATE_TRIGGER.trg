Prompt drop Trigger PGE_CURRENT_STATE_TRIGGER;
DROP TRIGGER PROCESS.PGE_CURRENT_STATE_TRIGGER
/

Prompt Trigger PGE_CURRENT_STATE_TRIGGER;
--
-- PGE_CURRENT_STATE_TRIGGER  (Trigger) 
--
CREATE OR REPLACE TRIGGER PROCESS.PGE_CURRENT_STATE_TRIGGER
BEFORE UPDATE
OF STATE_ID
ON PROCESS.MM_PX_CURRENT_STATE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
NEW_STATE NUMBER;
CURRENT_STATE NUMBER;
SESSIONID NUMBER;
CURR_STATE_NAME VARCHAR2(30);
NEW_STATE_NAME VARCHAR2(30);
v_stmt VARCHAR2(2000);
v_user VARCHAR2(20);
BEGIN
NEW_STATE := :NEW.STATE_ID;
CURRENT_STATE := :OLD.STATE_ID;
SESSIONID := :NEW.SOID;

IF NEW_STATE != CURRENT_STATE THEN
--((NEW_STATE = 13 OR NEW_STATE = 17) AND CURRENT_STATE = 1)) OR
IF(CURRENT_STATE NOT IN (14, 15, 16, 17, 18) AND NEW_STATE = 13)
THEN
SELECT NAME INTO CURR_STATE_NAME FROM PROCESS.MM_PX_STATE WHERE STATE_ID = CURRENT_STATE;
SELECT NAME INTO NEW_STATE_NAME FROM PROCESS.MM_PX_STATE WHERE STATE_ID = NEW_STATE;
select user into v_user from dual;

INSERT INTO PGEDATA.PGE_SESSION_STATE_TRIGGER
(
session_id,
create_user,
create_date,
current_owner,
current_state,
new_state,
rec_insert_dtm,
rec_update_dtm,
MAIL_SENT,
TERMINAL,
OS_USER
)
SELECT
session_id,
create_user,
create_date,
current_owner,
CURR_STATE_NAME,
NEW_STATE_NAME,
SYSDATE,
'',
'',
SYS_CONTEXT('USERENV','TERMINAL'),
SYS_CONTEXT('USERENV','OS_USER')
FROM PROCESS.MM_SESSION WHERE SESSION_ID = SESSIONID;

:NEW.STATE_ID := :OLD.STATE_ID;

END IF;
END IF;

END;
/
