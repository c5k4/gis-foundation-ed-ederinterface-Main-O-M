--------------------------------------------------------
--  DDL for Procedure CCBTOGIS_SP_ACTION_UPDATES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PGEDATA"."CCBTOGIS_SP_ACTION_UPDATES" AS
sqlstmt varchar2(2000);
rowcnt number;
BEGIN
dbms_output.put_line('Remove values from source SP Action Table');
delete from PGEDATA.TEMP_SP_ACTION_SOURCE /* CCBTOGIS_SP_ACTION_UPDATES_V1_DELTABLE*/;
dbms_output.put_line('Populating the source values into the Action Table for update');
insert into PGEDATA.TEMP_SP_ACTION_SOURCE(
SERVICEPOINTID, ACCOUNTNUM, STREETNUMBER,STREETNAME1,STREETNAME2,
CITY,ZIP,UNIQUESPID,SERVICEAGREEMENTID,INSERVICEDATE,NAICS,CGC12,BILLINGCYCLE,
METERROUTE,REVENUEACCOUNTCODE,RATESCHEDULE,TOWNSHIPTERRITORYCODE,NETENERGYMETERING,
METERNUMBER,CUSTOMERTYPE,ESSENTIALCUSTOMERIDC,LOCALOFFICEID,PREMISETYPE,PREMISEID,PHASE)
 select mv2.SERVICEPOINTID, mv2.ACCOUNTNUM, mv2.STREETNUMBER, mv2.STREETNAME1, mv2.STREETNAME2,
        mv2.CITY,mv2.ZIP,mv2.UNIQUESPID, mv2.SERVICEAGREEMENTID, mv2.INSERVICEDATE, mv2.NAICS, mv2.CGC12, mv2.BILLINGCYCLE,
		mv2.METERROUTE, mv2.REVENUEACCOUNTCODE, mv2.RATESCHEDULE, mv2.TOWNSHIPTERRITORYCODE, mv2.NETENERGYMETERING,
		mv2.METERNUMBER,mv2.CUSTOMERTYPE,mv2.ESSENTIALCUSTOMERIDC, mv2.LOCALOFFICEID, mv2.PREMISETYPE, mv2.PREMISEID, mv2.METER_PHASE
 from EDGIS.ZZ_MV_SERVICEPOINT mv2
 where mv2.SERVICEPOINTID is not null
  and mv2.SERVICEPOINTID in
     (
	  select STAGE.SERVICEPOINTID from PGEDATA.PGE_CCBTOEDGIS_STG STAGE
	  where STAGE.ERROR_DESCRIPTION is null and STAGE.SERVICEPOINTID is not null and STAGE.DATECREATED is not null
	and (STAGE.SERVICEPOINTID, TO_CHAR(STAGE.DATECREATED, 'YYYYMMDDHH24MISS')) in
	( select stg2.servicepointid, max(TO_CHAR(stg2.DATECREATED, 'YYYYMMDDHH24MISS'))
        from PGEDATA.PGE_CCBTOEDGIS_STG stg2 group by stg2.servicepointid )
	) and mv2.SERVICEPOINTID not in ( select spa.SERVICEPOINTID from PGEDATA.PGE_CCB_SP_ACTION spa where SERVICEPOINTID is not null )
  /* CCBTOGIS_SP_ACTION_UPDATES_V1_POPUSRC*/;
sde.version_util.set_current_version('SDE.DEFAULT') /* CCBTOGIS_SP_ACTION_UPDATES_V1_SETVER */ ;
insert into PGEDATA.PGE_CCB_SP_ACTION (ACTION,SERVICEPOINTID, DATEINSERTED) SELECT
'GISU', sp42.SERVICEPOINTID, sp42.DATECREATED /* CCBTOGIS_SP_ACTION_UPDATES_V4_GISU*/
from PGEDATA.PGE_CCBTOEDGIS_STG sp42 where sp42.ERROR_DESCRIPTION is null and  TO_CHAR(sp42.DATECREATED,'YYYYMMDDHH24MISS') =
			(
			select max(TO_CHAR(stg0.DATECREATED, 'YYYYMMDDHH24MISS'))  from PGEDATA.PGE_CCBTOEDGIS_STG stg0
			where stg0.SERVICEPOINTID = sp42.SERVICEPOINTID
			)
and sp42.servicepointid in
  (  select UNIQUE_LIST.servicepointid from
			  (
				select distinct total.SERVICEPOINTID from (
			select
			SP.SERVICEPOINTID, SP.UNIQUESPID, SP.ACCOUNTNUM,
			SP.STREETNUMBER,   SP.STREETNAME1, SP.STREETNAME2,
			SP.CITY,           SP.ZIP,       SP.SERVICEAGREEMENTID,
			SP.INSERVICEDATE,  SP.NAICS,     SP.CGC12,
			SP.BILLINGCYCLE,   SP.METERROUTE,
			SP.REVENUEACCOUNTCODE, SP.RATESCHEDULE,
			SP.TOWNSHIPTERRITORYCODE, SP.NETENERGYMETERING,
			SP.METERNUMBER,    SP.CUSTOMERTYPE,
			SP.ESSENTIALCUSTOMERIDC,   SP.LOCALOFFICEID,
			SP.PREMISETYPE,    SP.PREMISEID,
			1 as src1, to_number(null) as src2, SP.PHASE
			from
			(
				select mv2.SERVICEPOINTID, mv2.ACCOUNTNUM, mv2.STREETNUMBER, mv2.STREETNAME1, mv2.STREETNAME2,
					 mv2.CITY,mv2.ZIP,mv2.UNIQUESPID, mv2.SERVICEAGREEMENTID, mv2.INSERVICEDATE, mv2.NAICS, mv2.CGC12, mv2.BILLINGCYCLE,
					 mv2.METERROUTE, mv2.REVENUEACCOUNTCODE, mv2.RATESCHEDULE, mv2.TOWNSHIPTERRITORYCODE, mv2.NETENERGYMETERING,
					 mv2.METERNUMBER,mv2.CUSTOMERTYPE,mv2.ESSENTIALCUSTOMERIDC, mv2.LOCALOFFICEID,
                     mv2.PREMISETYPE, mv2.PREMISEID, mv2.PHASE
			  from PGEDATA.TEMP_SP_ACTION_SOURCE mv2
			) SP
			union all
			select
			STG.SERVICEPOINTID, STG.UNIQUESPID, STG.ACCOUNTNUM,
			STG.STREETNUMBER,   STG.STREETNAME1, STG.STREETNAME2,
			STG.CITY,           STG.ZIP,        STG.SERVICEAGREEMENTID,
			STG.INSERVICEDATE,  STG.NAICS,      STG.CGC12,
			STG.BILLINGCYCLE,   STG.METERROUTE,
			STG.REVENUEACCOUNTCODE,     STG.RATESCHEDULE,
			STG.TOWNSHIPTERRITORYCODE,  STG.NETENERGYMETERING,
			STG.METERNUMBER,    STG.CUSTOMERTYPE,
			STG.ESSENTIALCUSTOMERIDC, STG.LOCALOFFICEID,
			STG.PREMISETYPE,    STG.PREMISEID,
			to_number(null) as  src1, 2 as src2, STG.PHASE
			from
			(
				select sg.SERVICEPOINTID, sg.ACCOUNTNUM, sg.STREETNUMBER,sg.STREETNAME1,
				sg.STREETNAME2, sg.CITY, sg.ZIP,sg.UNIQUESPID, sg.SERVICEAGREEMENTID,
				sg.INSERVICEDATE, sg.NAICS, sg.CGC12, sg.BILLINGCYCLE, sg.METERROUTE,
				sg.REVENUEACCOUNTCODE, sg.RATESCHEDULE, sg.TOWNSHIPTERRITORYCODE,
				sg.NETENERGYMETERING, sg.METERNUMBER, sg.CUSTOMERTYPE,
				sg.ESSENTIALCUSTOMERIDC, sg.LOCALOFFICEID, sg.PREMISETYPE, sg.PREMISEID, sg.PHASE
			from PGEDATA.PGE_CCBTOEDGIS_STG sg where  NVL(sg.SERVICEPOINTID,' ') in
				(
					select MVV.SERVICEPOINTID from PGEDATA.TEMP_SP_ACTION_SOURCE MVV where MVV.SERVICEPOINTID is not null
					minus
					select spa.SERVICEPOINTID from PGEDATA.PGE_CCB_SP_ACTION spa where spa.SERVICEPOINTID is not null
				) and sg.SERVICEPOINTID is not null
			) STG  ) TOTAL
			group by
			TOTAL.SERVICEPOINTID, TOTAL.UNIQUESPID,  TOTAL.ACCOUNTNUM,
			TOTAL.STREETNUMBER,   TOTAL.STREETNAME1, TOTAL.STREETNAME2,
			TOTAL.CITY,           TOTAL.ZIP,         TOTAL.SERVICEAGREEMENTID,
			TOTAL.INSERVICEDATE,  TOTAL.NAICS,       TOTAL.CGC12,
			TOTAL.BILLINGCYCLE,   TOTAL.METERROUTE,
			TOTAL.REVENUEACCOUNTCODE,    TOTAL.RATESCHEDULE,
			TOTAL.TOWNSHIPTERRITORYCODE, TOTAL.NETENERGYMETERING,
			TOTAL.METERNUMBER,    TOTAL.CUSTOMERTYPE,
			TOTAL.ESSENTIALCUSTOMERIDC, TOTAL.LOCALOFFICEID,
			TOTAL.PREMISETYPE,    TOTAL.PREMISEID, TOTAL.PHASE
			having count(src1) <> count(src2)
			)
			UNIQUE_LIST
    );
 commit;
END CCBTOGIS_SP_ACTION_UPDATES;
