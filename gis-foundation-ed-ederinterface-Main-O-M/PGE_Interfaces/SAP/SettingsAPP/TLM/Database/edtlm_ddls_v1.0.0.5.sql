------------------v1.0.0.5-------------------------------

spool edtlm_ddls_v1.0.0.5.log

--------------------------------------------------------
--  File created - Thursday-July-31-2014   
--------------------------------------------------------
DROP TABLE "EDTLM"."CALC_CUST_TYP_TOTAL_KVA";
DROP TABLE "EDTLM"."CALC_TRF_AB_VALUE";
DROP TABLE "EDTLM"."CALC_TRF_DATA_START_DATE";
DROP TABLE "EDTLM"."CALC_TRF_DOM_COUNT";
DROP TABLE "EDTLM"."CALC_TRF_HIST_CAP";
DROP TABLE "EDTLM"."CALC_TRF_PEAK_HIST";
DROP TABLE "EDTLM"."CALC_TRF_PEAK_SMR";
DROP TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2";
DROP TABLE "EDTLM"."CALC_TRF_PEAK_WNTR";
DROP TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2";
DROP TABLE "EDTLM"."CALC_TRF_SMART_COUNT";
DROP TABLE "EDTLM"."CD_ERRORS";
DROP TABLE "EDTLM"."CD_METER";
DROP TABLE "EDTLM"."CD_MONTHLY_ERRORS";
DROP TABLE "EDTLM"."CD_TRANSFORMER";
DROP TABLE "EDTLM"."CD_TRANSFORMER_BANK";
DROP TABLE "EDTLM"."CODE_LOOKUP";
DROP TABLE "EDTLM"."EXT_CCB_METER_LOAD";
DROP TABLE "EDTLM"."EXT_SM_SP_GEN_LOAD";
DROP TABLE "EDTLM"."EXT_SM_SP_LOAD";
DROP TABLE "EDTLM"."EXT_SM_TRF_GEN_LOAD";
DROP TABLE "EDTLM"."EXT_SM_TRF_LOAD";
DROP TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS";
DROP TABLE "EDTLM"."METER";
DROP TABLE "EDTLM"."MONTHLY_LOAD_LOG";
DROP TABLE "EDTLM"."RATE_SCHEDULE";
DROP TABLE "EDTLM"."REV_ACCT";
DROP TABLE "EDTLM"."SP_PEAK_GEN_HIST";
DROP TABLE "EDTLM"."SP_PEAK_HIST";
DROP TABLE "EDTLM"."STG_CCB_METER_LOAD";
DROP TABLE "EDTLM"."STG_SM_SP_GEN_LOAD";
DROP TABLE "EDTLM"."STG_SM_SP_LOAD";
DROP TABLE "EDTLM"."STG_SM_TRF_GEN_LOAD";
DROP TABLE "EDTLM"."STG_SM_TRF_LOAD";
DROP TABLE "EDTLM"."TLM_APP_ERRORS";
DROP TABLE "EDTLM"."TRANSFORMER";
DROP TABLE "EDTLM"."TRANSFORMER_BANK";
DROP TABLE "EDTLM"."TRF_NP_CAP_MULT";
DROP TABLE "EDTLM"."TRF_PEAK";
DROP TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP";
DROP TABLE "EDTLM"."TRF_PEAK_GEN";
DROP TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP";
DROP TABLE "EDTLM"."TRF_PEAK_GEN_HIST";
DROP TABLE "EDTLM"."TRF_PEAK_HIST";
DROP SEQUENCE "EDTLM"."CD_METER_SEQ";
DROP SEQUENCE "EDTLM"."CD_METER_SEQ1";
DROP SEQUENCE "EDTLM"."CD_TRANSFORMER_BANK_SEQ";
DROP SEQUENCE "EDTLM"."CD_TRANSFORMER_SEQ";
DROP SEQUENCE "EDTLM"."CODE_LOOKUP_SEQ";
DROP SEQUENCE "EDTLM"."KVA_CONV_COEF_SEQ";
DROP SEQUENCE "EDTLM"."METER_SEQ";
DROP SEQUENCE "EDTLM"."MONTHLY_LOAD_LOG_SEQ";
DROP SEQUENCE "EDTLM"."SP_PEAK_GEN_HIST_SEQ";
DROP SEQUENCE "EDTLM"."SP_PEAK_HIST_SEQ";
DROP SEQUENCE "EDTLM"."TLM_APP_ERRORS_SEQ";
DROP SEQUENCE "EDTLM"."TRANSFORMER_BANK_SEQ";
DROP SEQUENCE "EDTLM"."TRANSFORMER_SEQ";
DROP SEQUENCE "EDTLM"."TRF_NP_CAP_MULT_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_BY_CUST_TYP_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_GEN_HIST_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_GEN_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_HIST_SEQ";
DROP SEQUENCE "EDTLM"."TRF_PEAK_SEQ";
DROP VIEW "EDTLM"."TRF_PEAK_GIS_V";
DROP VIEW "EDTLM"."TRF_PEAK_V";
DROP FUNCTION "EDTLM"."INSERT_MONTHLY_LOAD_LOG";
DROP FUNCTION "EDTLM"."LOAD_SP_PEAK_HIST_LEGACY";
DROP FUNCTION "EDTLM"."LOAD_SP_PEAK_HIST_SMART";
DROP FUNCTION "EDTLM"."LOAD_TRF_PEAK_HIST_LEGACY";
DROP FUNCTION "EDTLM"."LOAD_TRF_PEAK_HIST_SMART";
DROP FUNCTION "EDTLM"."LOG_MONTHLY_LOAD_ERROR";
DROP FUNCTION "EDTLM"."LOG_MONTHLY_LOAD_SUCCESS";
DROP FUNCTION "EDTLM"."POPULATE_TRF_PEAK_BY_CUST_TYP";
DROP FUNCTION "EDTLM"."POPULATE_TRF_PEAK_TABLE";
DROP FUNCTION "EDTLM"."UPDATE_TRF_PEAK_HIST";
DROP FUNCTION "EDTLM"."UPDATE_TRF_PEAK_HIST_CAP";
DROP FUNCTION "EDTLM"."UPD_MONTHLY_LOAD_LOG_STARTDATE";
DROP PACKAGE "EDTLM"."TLM_CD_MGMT";
DROP PACKAGE "EDTLM"."TLM_CD_MGMT_MONTHLY";
DROP PACKAGE BODY "EDTLM"."TLM_CD_MGMT";
DROP PACKAGE BODY "EDTLM"."TLM_CD_MGMT_MONTHLY";
DROP PROCEDURE "EDTLM"."DATA_LOAD_VALIDATION";
DROP PROCEDURE "EDTLM"."DATA_LOAD_VALIDATION_FINAL";
DROP PROCEDURE "EDTLM"."RUN_MONTHLY_LOAD";
DROP PROCEDURE "EDTLM"."SP_DELETE_JUNK";
--------------------------------------------------------
--  DDL for Sequence CD_METER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."CD_METER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CD_METER_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."CD_METER_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1081 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CD_TRANSFORMER_BANK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."CD_TRANSFORMER_BANK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CD_TRANSFORMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."CD_TRANSFORMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CODE_LOOKUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."CODE_LOOKUP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1981 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence KVA_CONV_COEF_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."KVA_CONV_COEF_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence METER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."METER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MONTHLY_LOAD_LOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."MONTHLY_LOAD_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 281 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SP_PEAK_GEN_HIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."SP_PEAK_GEN_HIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 80261 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SP_PEAK_HIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."SP_PEAK_HIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 132110161 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TLM_APP_ERRORS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TLM_APP_ERRORS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRANSFORMER_BANK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRANSFORMER_BANK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRANSFORMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRANSFORMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_NP_CAP_MULT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_NP_CAP_MULT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_BY_CUST_TYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_BY_CUST_TYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8532581 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_GEN_BY_CUST_TYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 78601 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_GEN_HIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_GEN_HIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 60781 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_GEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_GEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1709761 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_HIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_HIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31270281 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TRF_PEAK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EDTLM"."TRF_PEAK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4271581 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table CALC_CUST_TYP_TOTAL_KVA
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_CUST_TYP_TOTAL_KVA" 
   (	"TRF_PEAK_HIST_ID" NUMBER(*,0), 
	"CUST_TYP" VARCHAR2(12 BYTE), 
	"TOTAL_KVA" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_AB_VALUE
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_AB_VALUE" 
   (	"DEVICE_ID" NUMBER(*,0), 
	"SUMMER_A_VALUE" NUMBER(5,3), 
	"SUMMER_B_VALUE" NUMBER(5,3), 
	"WINTER_A_VALUE" NUMBER(5,3), 
	"WINTER_B_VALUE" NUMBER(5,3)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_DATA_START_DATE
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_DATA_START_DATE" 
   (	"TRF_ID" NUMBER(*,0), 
	"DATA_START_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_DOM_COUNT
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_DOM_COUNT" 
   (	"DEVICE_ID" NUMBER(*,0), 
	"DOM_COUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_HIST_CAP
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_HIST_CAP" 
   (	"TRF_PEAK_HIST_ID" NUMBER(*,0), 
	"DOM_TOTAL_KVA" NUMBER, 
	"NON_DOM_TOTAL_KVA" NUMBER, 
	"TRF_NP_TOTAL_KVA" NUMBER, 
	"CUST_TYP_WITH_GREATER_LOAD" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_PEAK_HIST
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_PEAK_HIST" 
   (	"TRF_PEAK_HIST_ID" NUMBER(*,0), 
	"TOTAL_TRF_PEAK_KVA" NUMBER, 
	"ALL_COUNT" NUMBER, 
	"SM_COUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_PEAK_SMR
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_PEAK_SMR" 
   (	"TRF_ID" NUMBER(*,0), 
	"SMR_PEAK_DATE" DATE, 
	"SMR_KVA" NUMBER, 
	"SMR_CAP" NUMBER, 
	"SMR_PCT" NUMBER, 
	"SMR_PEAK_SM_CUST_CNT" NUMBER, 
	"SMR_PEAK_TOTAL_CUST_CNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_PEAK_SMR_2
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" 
   (	"TRF_ID" NUMBER(*,0), 
	"SMR_CAP" NUMBER, 
	"SMR_KVA" NUMBER, 
	"SMR_PCT" NUMBER, 
	"SMR_PEAK_DATE" DATE, 
	"SMR_PEAK_SM_CUST_CNT" NUMBER, 
	"SMR_PEAK_TOTAL_CUST_CNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_PEAK_WNTR
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" 
   (	"TRF_ID" NUMBER(*,0), 
	"WNTR_PEAK_DATE" DATE, 
	"WNTR_KVA" NUMBER, 
	"WNTR_CAP" NUMBER, 
	"WNTR_PCT" NUMBER, 
	"WNTR_PEAK_SM_CUST_CNT" NUMBER, 
	"WNTR_PEAK_TOTAL_CUST_CNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_PEAK_WNTR_2
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" 
   (	"TRF_ID" NUMBER(*,0), 
	"WNTR_CAP" NUMBER, 
	"WNTR_KVA" NUMBER, 
	"WNTR_PCT" NUMBER, 
	"WNTR_PEAK_DATE" DATE, 
	"WNTR_PEAK_SM_CUST_CNT" NUMBER, 
	"WNTR_PEAK_TOTAL_CUST_CNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CALC_TRF_SMART_COUNT
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CALC_TRF_SMART_COUNT" 
   (	"TRF_PEAK_HIST_ID" NUMBER(*,0), 
	"SM_FLG" CHAR(1 BYTE), 
	"SM_COUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CD_ERRORS
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CD_ERRORS" 
   (	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"ERROR_CODE" VARCHAR2(20 BYTE), 
	"ERROR_MSG" VARCHAR2(200 BYTE), 
	"TRANS_DATE" TIMESTAMP (6), 
	"TRANS_TYPE" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"APP_TYPE" CHAR(1 BYTE), 
	"PROC_FOR" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."CD_ERRORS"."APP_TYPE" IS 'D-> DAILY BATCH PROCESS, M->MONTHLY PROCESS';
  GRANT SELECT ON "EDTLM"."CD_ERRORS" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."CD_ERRORS" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table CD_METER
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CD_METER" 
   (	"ID" NUMBER(10,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"UNQSPID" VARCHAR2(10 BYTE), 
	"REV_ACCT_CD" VARCHAR2(8 BYTE), 
	"SVC_ST_NUM" VARCHAR2(12 BYTE), 
	"SVC_ST_NAME" VARCHAR2(64 BYTE), 
	"SVC_ST_NAME2" VARCHAR2(64 BYTE), 
	"SVC_CITY" VARCHAR2(30 BYTE), 
	"SVC_STATE" VARCHAR2(2 BYTE), 
	"SVC_ZIP" VARCHAR2(10 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"RATE_SCHED" VARCHAR2(8 BYTE), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"SM_FLG" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"METER_NUMBER" VARCHAR2(18 BYTE), 
	"TRANS_TYPE" CHAR(1 BYTE), 
	"TRANS_DATE" TIMESTAMP (6), 
	"OLD_GLOBAL_ID" VARCHAR2(38 BYTE), 
	"TRF_GLOBAL_ID" VARCHAR2(38 BYTE), 
	"PROC_FLG" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."CD_METER"."PROC_FLG" IS 'FLAG TO DEFINE IF ROW IS PROCESSED BY MONTHLY CHANGE DETECTION PROCESS - P MEANS PROCESSED OTHERWISE NULL
';
  GRANT SELECT ON "EDTLM"."CD_METER" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."CD_METER" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table CD_MONTHLY_ERRORS
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CD_MONTHLY_ERRORS" 
   (	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"ERROR_CODE" VARCHAR2(20 BYTE), 
	"ERROR_MSG" VARCHAR2(200 BYTE), 
	"TRANS_DATE" TIMESTAMP (6), 
	"TRANS_TYPE" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"APP_TYPE" CHAR(1 BYTE), 
	"PROC_FOR" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table CD_TRANSFORMER
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CD_TRANSFORMER" 
   (	"ID" NUMBER(*,0), 
	"CGC_ID" NUMBER(12,0), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"COAST_INTERIOR_FLG" NUMBER(1,0), 
	"CLIMATE_ZONE_CD" VARCHAR2(1 BYTE), 
	"PHASE_CD" NUMBER(1,0), 
	"INSTALLATION_TYP" VARCHAR2(10 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"REGION" NUMBER, 
	"TRANS_TYPE" CHAR(1 BYTE), 
	"TRANS_DATE" TIMESTAMP (6), 
	"OLD_GLOBAL_ID" VARCHAR2(38 BYTE), 
	"PROC_FLG" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."CD_TRANSFORMER"."PROC_FLG" IS 'FLAG TO DEFINE IF ROW IS PROCESSED BY MONTHLY CHANGE DETECTION PROCESS - P MEANS PROCESSED OTHERWISE NULL
';
  GRANT SELECT ON "EDTLM"."CD_TRANSFORMER" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."CD_TRANSFORMER" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table CD_TRANSFORMER_BANK
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CD_TRANSFORMER_BANK" 
   (	"ID" NUMBER(*,0), 
	"TRF_GLOBAL_ID" VARCHAR2(38 BYTE), 
	"BANK_CD" NUMBER(1,0), 
	"NP_KVA" NUMBER(7,1), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"PHASE_CD" NUMBER(1,0), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"TRANS_TYPE" CHAR(1 BYTE), 
	"TRANS_DATE" TIMESTAMP (6), 
	"OLD_GLOBAL_ID" VARCHAR2(38 BYTE), 
	"PROC_FLG" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."CD_TRANSFORMER_BANK"."PROC_FLG" IS 'FLAG TO DEFINE IF ROW IS PROCESSED BY MONTHLY CHANGE DETECTION PROCESS - P MEANS PROCESSED OTHERWISE NULL
';
  GRANT SELECT ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."CD_TRANSFORMER_BANK" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table CODE_LOOKUP
--------------------------------------------------------

  CREATE TABLE "EDTLM"."CODE_LOOKUP" 
   (	"ID" NUMBER(*,0), 
	"CODE_TYP" VARCHAR2(15 BYTE), 
	"CODE" VARCHAR2(10 BYTE), 
	"DESC_LONG" VARCHAR2(120 BYTE), 
	"DESC_SHORT" VARCHAR2(64 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."CODE_LOOKUP"."DESC_SHORT" IS 'Desc that can be used for UI';
  GRANT ALTER ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."CODE_LOOKUP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."CODE_LOOKUP" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table EXT_CCB_METER_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."EXT_CCB_METER_LOAD" 
   (	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"UNQSPID" VARCHAR2(10 BYTE), 
	"ACCT_ID" VARCHAR2(10 BYTE), 
	"SERVICE_AGREEMENT_ID" VARCHAR2(10 BYTE), 
	"METER_NUMBER" VARCHAR2(30 BYTE), 
	"CGC#12" VARCHAR2(20 BYTE), 
	"SVC_ST_#" VARCHAR2(12 BYTE), 
	"SVC_ST_NAME" VARCHAR2(64 BYTE), 
	"SVC_ST_NAME2" VARCHAR2(64 BYTE), 
	"SVC_CITY" VARCHAR2(30 BYTE), 
	"SVC_STATE" VARCHAR2(6 BYTE), 
	"SVC_ZIP" VARCHAR2(12 BYTE), 
	"SVC_DATE" VARCHAR2(8 BYTE), 
	"NAICS" VARCHAR2(6 BYTE), 
	"BILLING_CYCLE" VARCHAR2(4 BYTE), 
	"ROUTE" VARCHAR2(10 BYTE), 
	"LOCAL_OFFICE" VARCHAR2(8 BYTE), 
	"REV_ACCT_CD" VARCHAR2(8 BYTE), 
	"ESSENTIAL" VARCHAR2(3 BYTE), 
	"SENSITIVE" VARCHAR2(2 BYTE), 
	"LIFE_SUPPORT" VARCHAR2(2 BYTE), 
	"RATE_SCHED" VARCHAR2(8 BYTE), 
	"MAIL_NAME" VARCHAR2(50 BYTE), 
	"MAIL_NAME2" VARCHAR2(50 BYTE), 
	"AREA_CODE" NUMBER(3,0), 
	"PHONE_NUMBER" NUMBER(7,0), 
	"MAIL_ST_#" VARCHAR2(12 BYTE), 
	"MAIL_ST_NAME" VARCHAR2(64 BYTE), 
	"MAIL_ST_NAME2" VARCHAR2(64 BYTE), 
	"MAIL_CITY" VARCHAR2(30 BYTE), 
	"MAIL_STATE" VARCHAR2(6 BYTE), 
	"MAIL_ZIP" VARCHAR2(12 BYTE), 
	"ROBC" VARCHAR2(8 BYTE), 
	"FDR_#" VARCHAR2(20 BYTE), 
	"SSD_OPER" VARCHAR2(20 BYTE), 
	"PREMISE_TYPE" VARCHAR2(8 BYTE), 
	"REV_MONTH" VARCHAR2(2 BYTE), 
	"REV_KWHR" VARCHAR2(8 BYTE), 
	"REV_KW" VARCHAR2(8 BYTE), 
	"PFACTOR" VARCHAR2(3 BYTE), 
	"TOWNSHIP_TERRITORY_CD" VARCHAR2(10 BYTE), 
	"NEM" VARCHAR2(1 BYTE), 
	"SM_SP_STATUS" VARCHAR2(10 BYTE), 
	"MEDICAL_BASELINE" VARCHAR2(2 BYTE), 
	"COMMUNICATION_PREFERENCE" VARCHAR2(4 BYTE), 
	"ERROR_FLG" VARCHAR2(1 BYTE), 
	"ERROR_TXT" VARCHAR2(100 BYTE), 
	"CREATE_DATE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table EXT_SM_SP_GEN_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."EXT_SM_SP_GEN_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"SP_PEAK_KW" NUMBER, 
	"VEE_SP_KW_FLAG" CHAR(1 BYTE), 
	"SP_PEAK_TIME" VARCHAR2(20 BYTE), 
	"SP_KW_TRF_PEAK" NUMBER, 
	"VEE_TRF_KW_FLAG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"SP_PEAK_KVAR" NUMBER, 
	"TRF_PEAK_KVAR" NUMBER, 
	"ERROR_FLG" VARCHAR2(1 BYTE), 
	"ERROR_TXT" VARCHAR2(100 BYTE), 
	"CREATE_DATE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table EXT_SM_SP_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."EXT_SM_SP_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"SP_PEAK_KW" NUMBER, 
	"VEE_SP_KW_FLAG" CHAR(1 BYTE), 
	"SP_PEAK_TIME" VARCHAR2(20 BYTE), 
	"SP_KW_TRF_PEAK" NUMBER, 
	"VEE_TRF_KW_FLAG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"SP_PEAK_KVAR" NUMBER, 
	"TRF_PEAK_KVAR" NUMBER, 
	"ERROR_FLG" VARCHAR2(1 BYTE), 
	"ERROR_TXT" VARCHAR2(20 BYTE), 
	"CREATE_DATE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table EXT_SM_TRF_GEN_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."EXT_SM_TRF_GEN_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"TRF_PEAK_KW" NUMBER, 
	"TRF_PEAK_TIME" VARCHAR2(20 BYTE), 
	"TRF_AVG_KW" NUMBER, 
	"ERROR_FLG" VARCHAR2(1 BYTE), 
	"ERROR_TXT" VARCHAR2(100 BYTE), 
	"CREATE_DATE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table EXT_SM_TRF_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."EXT_SM_TRF_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"TRF_PEAK_KW" NUMBER, 
	"TRF_PEAK_TIME" VARCHAR2(20 BYTE), 
	"TRF_AVG_KW" NUMBER, 
	"ERROR_FLG" VARCHAR2(1 BYTE), 
	"ERROR_TXT" VARCHAR2(100 BYTE), 
	"CREATE_DATE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table KVA_CONVERSION_COEFFICIENTS
--------------------------------------------------------

  CREATE TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" 
   (	"ID" NUMBER(*,0), 
	"CUSTOMER_COUNT_GT" NUMBER(2,0), 
	"CLIMATE_ZONE" CHAR(1 BYTE), 
	"A_VALUE" NUMBER(5,3), 
	"B_VALUE" NUMBER(5,3), 
	"SEASON" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT ALTER ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table METER
--------------------------------------------------------

  CREATE TABLE "EDTLM"."METER" 
   (	"ID" NUMBER(10,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"UNQSPID" VARCHAR2(10 BYTE), 
	"TRF_ID" NUMBER(*,0), 
	"REV_ACCT_CD" VARCHAR2(8 BYTE), 
	"SVC_ST_NUM" VARCHAR2(12 BYTE), 
	"SVC_ST_NAME" VARCHAR2(64 BYTE), 
	"SVC_ST_NAME2" VARCHAR2(64 BYTE), 
	"SVC_CITY" VARCHAR2(30 BYTE), 
	"SVC_STATE" VARCHAR2(2 BYTE), 
	"SVC_ZIP" VARCHAR2(10 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"RATE_SCHED" VARCHAR2(8 BYTE), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"SM_FLG" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"METER_NUMBER" VARCHAR2(18 BYTE), 
	"REC_STATUS" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT ALTER ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."METER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."METER" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table MONTHLY_LOAD_LOG
--------------------------------------------------------

  CREATE TABLE "EDTLM"."MONTHLY_LOAD_LOG" 
   (	"ID" NUMBER, 
	"TABLE_NAME" VARCHAR2(50 BYTE), 
	"LOAD_START_TS" TIMESTAMP (6) DEFAULT sysdate, 
	"LOAD_END_TS" TIMESTAMP (6), 
	"NUM_RECORDS_PROCESSED" NUMBER, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"ERROR_TEXT" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."MONTHLY_LOAD_LOG"."ERROR_TEXT" IS 'If error occured';
  GRANT SELECT ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."MONTHLY_LOAD_LOG" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table RATE_SCHEDULE
--------------------------------------------------------

  CREATE TABLE "EDTLM"."RATE_SCHEDULE" 
   (	"RATE_SCHEDULE" VARCHAR2(8 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT ALTER ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."RATE_SCHEDULE" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."RATE_SCHEDULE" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table REV_ACCT
--------------------------------------------------------

  CREATE TABLE "EDTLM"."REV_ACCT" 
   (	"REV_ACCT_CD" VARCHAR2(8 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT ALTER ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."REV_ACCT" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."REV_ACCT" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table SP_PEAK_GEN_HIST
--------------------------------------------------------

  CREATE TABLE "EDTLM"."SP_PEAK_GEN_HIST" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"TRF_PEAK_GEN_HIST_ID" NUMBER(*,0), 
	"SP_PEAK_TIME" DATE, 
	"SP_PEAK_KVA" NUMBER, 
	"SP_KVA_TRF_PEAK" NUMBER, 
	"VEE_SP_KW_FLG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"VEE_TRF_KW_FLG" CHAR(1 BYTE), 
	"SM_FLG" CHAR(1 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"METER_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."TRF_PEAK_GEN_HIST_ID" IS 'Foreign key to TRF_PEAK_GEN_HIST';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."SP_PEAK_TIME" IS 'Timestamp of the service point peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."SP_PEAK_KVA" IS 'KVA for service point at the time of the peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."SP_KVA_TRF_PEAK" IS 'KVA for service point at the time of the transformer peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."VEE_SP_KW_FLG" IS 'True if the SP KVA is an estimated value during SP  Peak';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."INT_LEN" IS 'Interval length-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."CUST_TYP" IS 'Customer type from the METER table at the time data was loaded';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."VEE_TRF_KW_FLG" IS 'True if the SP KVA is an estimated value during TRF  Peak';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."SM_FLG" IS 'True if the meter is smart during the month -  if CCB monthly SP record has SM_SP_STATUS of 30 r 40.';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_GEN_HIST"."METER_ID" IS 'Foreign key to METER';
   COMMENT ON TABLE "EDTLM"."SP_PEAK_GEN_HIST"  IS 'SmartMeter Service Point detail data';
  GRANT ALTER ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."SP_PEAK_GEN_HIST" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table SP_PEAK_HIST
--------------------------------------------------------

  CREATE TABLE "EDTLM"."SP_PEAK_HIST" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"TRF_PEAK_HIST_ID" NUMBER(*,0), 
	"SP_PEAK_TIME" DATE, 
	"SP_PEAK_KVA" NUMBER, 
	"SP_KVA_TRF_PEAK" NUMBER, 
	"VEE_SP_KW_FLG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"VEE_TRF_KW_FLG" CHAR(1 BYTE), 
	"SM_FLG" CHAR(1 BYTE) DEFAULT NULL, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"METER_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."TRF_PEAK_HIST_ID" IS 'Foreign key to TRF_PEAK_HIST';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."SP_PEAK_TIME" IS 'Timestamp of the service point peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."SP_PEAK_KVA" IS 'KVA for service point at the time of the peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."SP_KVA_TRF_PEAK" IS 'KVA for service point at the time of the transformer peak-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."VEE_SP_KW_FLG" IS 'True if the SP KVA is an estimated value during SP Peak';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."INT_LEN" IS 'Interval length-loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."CUST_TYP" IS 'Customer type from the METER table at the time data was loaded';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."VEE_TRF_KW_FLG" IS 'True if the SP KVA is an estimated value during TRF  Peak';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."SM_FLG" IS 'True if the meter is smart during the month -  if CCB monthly SP record has SM_SP_STATUS of 30 r 40.';
   COMMENT ON COLUMN "EDTLM"."SP_PEAK_HIST"."METER_ID" IS 'Foreign key to METER';
   COMMENT ON TABLE "EDTLM"."SP_PEAK_HIST"  IS 'SmartMeter Service Point detail data';
  GRANT ALTER ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."SP_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."SP_PEAK_HIST" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table STG_CCB_METER_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."STG_CCB_METER_LOAD" 
   (	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"UNQSPID" VARCHAR2(10 BYTE), 
	"ACCT_ID" VARCHAR2(10 BYTE), 
	"REV_MONTH" VARCHAR2(2 BYTE), 
	"REV_KWHR" VARCHAR2(8 BYTE), 
	"REV_KW" VARCHAR2(8 BYTE), 
	"PFACTOR" VARCHAR2(3 BYTE), 
	"SM_SP_STATUS" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table STG_SM_SP_GEN_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."STG_SM_SP_GEN_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"SP_PEAK_KW" NUMBER, 
	"VEE_SP_KW_FLAG" CHAR(1 BYTE), 
	"SP_PEAK_TIME" DATE, 
	"SP_KW_TRF_PEAK" NUMBER, 
	"VEE_TRF_KW_FLAG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"SP_PEAK_KVAR" NUMBER, 
	"TRF_PEAK_KVAR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table STG_SM_SP_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."STG_SM_SP_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"SERVICE_POINT_ID" VARCHAR2(10 BYTE), 
	"SP_PEAK_KW" NUMBER, 
	"VEE_SP_KW_FLAG" CHAR(1 BYTE), 
	"SP_PEAK_TIME" DATE, 
	"SP_KW_TRF_PEAK" NUMBER, 
	"VEE_TRF_KW_FLAG" CHAR(1 BYTE), 
	"INT_LEN" NUMBER, 
	"SP_PEAK_KVAR" NUMBER, 
	"TRF_PEAK_KVAR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT SELECT ON "EDTLM"."STG_SM_SP_LOAD" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."STG_SM_SP_LOAD" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table STG_SM_TRF_GEN_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."STG_SM_TRF_GEN_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"TRF_PEAK_KW" NUMBER, 
	"TRF_PEAK_TIME" DATE, 
	"TRF_AVG_KW" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table STG_SM_TRF_LOAD
--------------------------------------------------------

  CREATE TABLE "EDTLM"."STG_SM_TRF_LOAD" 
   (	"CGC" NUMBER(12,0), 
	"TRF_PEAK_KW" NUMBER, 
	"TRF_PEAK_TIME" DATE, 
	"TRF_AVG_KW" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT SELECT ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDGISBO";
  GRANT ALTER ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."STG_SM_TRF_LOAD" TO "EDTLMMIGRATION";
--------------------------------------------------------
--  DDL for Table TLM_APP_ERRORS
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TLM_APP_ERRORS" 
   (	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"ERROR_STACK" VARCHAR2(300 BYTE), 
	"ERROR_MSG" VARCHAR2(200 BYTE), 
	"ERROR_INNER" VARCHAR2(300 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CLASS" VARCHAR2(50 BYTE), 
	"METHOD" VARCHAR2(50 BYTE), 
	"ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
--------------------------------------------------------
--  DDL for Table TRANSFORMER
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRANSFORMER" 
   (	"ID" NUMBER(*,0), 
	"CGC_ID" NUMBER(12,0), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"COAST_INTERIOR_FLG" NUMBER(1,0) DEFAULT 0, 
	"CLIMATE_ZONE_CD" VARCHAR2(5 BYTE), 
	"PHASE_CD" NUMBER(1,0), 
	"INSTALLATION_TYP" VARCHAR2(10 BYTE), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"REGION" NUMBER, 
	"REC_STATUS" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."CGC_ID" IS 'User entered transformer identifier used by cdx and OIS interfaces';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."GLOBAL_ID" IS '';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."COAST_INTERIOR_FLG" IS '1 indicates coastal 0 not coastal';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."CLIMATE_ZONE_CD" IS 'R,S,T, or X; appears in KVA_conversion_coefficients table...';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER"."REGION" IS 'Used to verify migration and determine migration waves.  Could be dropped after final miration.';
  GRANT ALTER ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRANSFORMER" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRANSFORMER" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRANSFORMER_BANK
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRANSFORMER_BANK" 
   (	"ID" NUMBER(*,0), 
	"TRF_ID" NUMBER(*,0), 
	"BANK_CD" NUMBER(1,0), 
	"NP_KVA" NUMBER(7,1), 
	"GLOBAL_ID" VARCHAR2(38 BYTE), 
	"PHASE_CD" NUMBER(1,0), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"REC_STATUS" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRANSFORMER_BANK"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER_BANK"."TRF_ID" IS 'Device ID in CEDSA';
   COMMENT ON COLUMN "EDTLM"."TRANSFORMER_BANK"."NP_KVA" IS 'Nameplate Kva';
  GRANT ALTER ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRANSFORMER_BANK" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRANSFORMER_BANK" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_NP_CAP_MULT
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_NP_CAP_MULT" 
   (	"ID" NUMBER(*,0), 
	"INSTALLATION_TYP" VARCHAR2(10 BYTE), 
	"PHASE_CD" VARCHAR2(10 BYTE), 
	"KVA_LOW" NUMBER, 
	"KVA_HIGH" NUMBER, 
	"COAST_INTERIOR_FLG" NUMBER(1,0), 
	"CAP_MULTIPLIER_A" NUMBER(2,1), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE), 
	"SEASON" CHAR(1 BYTE), 
	"CAP_MULTIPLIER_B" NUMBER(2,1), 
	"CAP_MULTIPLIER_C" NUMBER(2,1)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;
  GRANT ALTER ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_NP_CAP_MULT" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"SMR_PEAK_DATE" DATE, 
	"WNTR_PEAK_DATE" DATE, 
	"SMR_KVA" NUMBER, 
	"WNTR_KVA" NUMBER, 
	"SMR_CAP" NUMBER, 
	"WNTR_CAP" NUMBER, 
	"SMR_PCT" NUMBER, 
	"WNTR_PCT" NUMBER, 
	"SMR_PEAK_SM_CUST_CNT" NUMBER, 
	"SMR_PEAK_TOTAL_CUST_CNT" NUMBER, 
	"WNTR_PEAK_SM_CUST_CNT" NUMBER, 
	"WNTR_PEAK_TOTAL_CUST_CNT" NUMBER, 
	"DATA_START_DATE" DATE, 
	"TRF_ID" NUMBER(*,0), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRF_PEAK"."ID" IS 'System generated ID';
   COMMENT ON TABLE "EDTLM"."TRF_PEAK"  IS 'Transformer seasonal peak loading data';
  GRANT ALTER ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK_BY_CUST_TYP
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"TRF_PEAK_ID" NUMBER(*,0), 
	"SEASON" CHAR(1 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"SEASON_CUST_CNT" NUMBER, 
	"SEASON_TOTAL_KVA" NUMBER, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_BY_CUST_TYP"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_BY_CUST_TYP"."TRF_PEAK_ID" IS 'Foreign key to TRF_PEAK';
  GRANT ALTER ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK_GEN
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK_GEN" 
   (	"TRF_ID" NUMBER(*,0), 
	"SMR_PEAK_DATE" DATE, 
	"WNTR_PEAK_DATE" DATE, 
	"SMR_KVA" NUMBER, 
	"WNTR_KVA" NUMBER, 
	"SMR_CAP" NUMBER, 
	"WNTR_CAP" NUMBER, 
	"SMR_PCT" NUMBER, 
	"WNTR_PCT" NUMBER, 
	"SMR_PEAK_SM_CUST_CNT" NUMBER, 
	"SMR_PEAK_TOTAL_CUST_CNT" NUMBER, 
	"WNTR_PEAK_SM_CUST_CNT" NUMBER, 
	"WNTR_PEAK_TOTAL_CUST_CNT" NUMBER, 
	"DATA_START_DATE" DATE, 
	"ID" NUMBER(*,0), 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON TABLE "EDTLM"."TRF_PEAK_GEN"  IS 'Transformer seasonal peak customer generated data';
  GRANT ALTER ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_GEN" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK_GEN_BY_CUST_TYP
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"TRF_PEAK_GEN_ID" NUMBER(*,0), 
	"SEASON" CHAR(1 BYTE), 
	"CUST_TYP" VARCHAR2(3 BYTE), 
	"SEASON_CUST_CNT" NUMBER, 
	"SEASON_TOTAL_KVA" NUMBER, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP"."TRF_PEAK_GEN_ID" IS 'Foreign key to TRF_PEAK_GEN';
  GRANT ALTER ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK_GEN_HIST
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK_GEN_HIST" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"TRF_ID" NUMBER(*,0), 
	"BATCH_DATE" DATE, 
	"TRF_PEAK_TIME" TIMESTAMP (6), 
	"TRF_PEAK_KVA" NUMBER, 
	"SM_CUST_TOTAL" NUMBER, 
	"CCB_CUST_TOTAL" NUMBER, 
	"TRF_CAP" NUMBER, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."TRF_PEAK_TIME" IS 'Timestamp at the time of the transformer peak.  Loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."TRF_PEAK_KVA" IS 'Computed during data load using sum of associated SP kW (and correct formula)';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."SM_CUST_TOTAL" IS 'Number of SmartMeter service points associated to transformer at time of load';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."CCB_CUST_TOTAL" IS 'Number of customers in METER table associated with the transformer at the time of the load';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_GEN_HIST"."TRF_CAP" IS 'Transformer capability computed using CEDSA formula';
   COMMENT ON TABLE "EDTLM"."TRF_PEAK_GEN_HIST"  IS 'SmartMeter transformer detail data. ??? SmartMeter?';
  GRANT ALTER ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GEN_HIST" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Table TRF_PEAK_HIST
--------------------------------------------------------

  CREATE TABLE "EDTLM"."TRF_PEAK_HIST" 
   (	"ID" NUMBER(*,0) DEFAULT NULL, 
	"TRF_ID" NUMBER(*,0), 
	"BATCH_DATE" DATE, 
	"TRF_PEAK_TIME" TIMESTAMP (6), 
	"TRF_PEAK_KVA" NUMBER, 
	"SM_CUST_TOTAL" NUMBER, 
	"CCB_CUST_TOTAL" NUMBER, 
	"TRF_CAP" NUMBER, 
	"CREATE_DTM" TIMESTAMP (6), 
	"CREATE_USERID" VARCHAR2(30 BYTE), 
	"UPDATE_DTM" TIMESTAMP (6), 
	"UPDATE_USERID" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLM" ;

   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."ID" IS 'System generated ID';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."TRF_PEAK_TIME" IS 'Timestamp at the time of the transformer peak.  Loaded from monthly file';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."TRF_PEAK_KVA" IS 'Computed during data load using sum of associated SP kW (and correct formula)';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."SM_CUST_TOTAL" IS 'Number of SmartMeter service points associated to transformer at time of load';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."CCB_CUST_TOTAL" IS 'Number of customers in METER table associated with the transformer at the time of the load';
   COMMENT ON COLUMN "EDTLM"."TRF_PEAK_HIST"."TRF_CAP" IS 'Transformer capability computed using CEDSA formula';
   COMMENT ON TABLE "EDTLM"."TRF_PEAK_HIST"  IS 'SmartMeter transformer detail data. ??? SmartMeter?';
  GRANT ALTER ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT INDEX ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_HIST" TO "EDTLMMIGRATION";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_HIST" TO "EDGISBO";
--------------------------------------------------------
--  DDL for View TRF_PEAK_GIS_V
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "EDTLM"."TRF_PEAK_GIS_V" ("GLOBALID", "SUMMERKVA", "WINTERKVA", "SUMMERPCT", "WINTERPCT") AS 
  SELECT 
    B.global_id, CAST(a.smr_kva AS NUMBER(7,1)), CAST(a.wntr_kva AS NUMBER(7,1)), CAST(A.SMR_PCT AS NUMBER(6,0)), CAST(A.WNTR_PCT AS NUMBER(6,0))
FROM 
     TRF_PEAK A,
     TRANSFORMER B
WHERE
     A.TRF_ID = B.id;
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GIS_V" TO "EDGISBO";
  GRANT DELETE ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT INSERT ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT SELECT ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT UPDATE ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT REFERENCES ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT ON COMMIT REFRESH ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT QUERY REWRITE ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT DEBUG ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT FLASHBACK ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
  GRANT MERGE VIEW ON "EDTLM"."TRF_PEAK_GIS_V" TO "GIS_I";
--------------------------------------------------------
--  DDL for View TRF_PEAK_V
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "EDTLM"."TRF_PEAK_V" ("GLOBAL_ID", "CGC_NUM", "TRF_ID", "SMR_CAP", "SMR_KVA", "SMR_PCT", "SMR_PEAK_DATE", "SMR_PEAK_SM_CUST_CNT", "SMR_PEAK_TOTAL_CUST_CNT", "WNTR_CAP", "WNTR_KVA", "WNTR_PCT", "WNTR_PEAK_DATE", "WNTR_PEAK_SM_CUST_CNT", "WNTR_PEAK_TOTAL_CUST_CNT") AS 
  SELECT 
    B.global_id, B.cgc_id CGC_NUM, a.trf_id, a.smr_cap, a.smr_kva, a.smr_pct, a.smr_peak_date, a.smr_peak_sm_cust_cnt, a.smr_peak_total_cust_cnt, a.wntr_cap, a.wntr_kva, a.wntr_pct, a.wntr_peak_date, a.wntr_peak_sm_cust_cnt, a.wntr_peak_total_cust_cnt
FROM 
     TRF_PEAK A,
     TRANSFORMER B
WHERE
     A.TRF_ID = B.id;
  GRANT SELECT ON "EDTLM"."TRF_PEAK_V" TO "EDGISBO";
--------------------------------------------------------
--  DDL for Index TLM_APP_ERRORS_INDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TLM_APP_ERRORS_INDEX1" ON "EDTLM"."TLM_APP_ERRORS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index KVA_CONVERSION_COEFFICIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."KVA_CONVERSION_COEFFICIENT_PK" ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index SP_PEAK_HIST_UK2
--------------------------------------------------------

  CREATE INDEX "EDTLM"."SP_PEAK_HIST_UK2" ON "EDTLM"."SP_PEAK_HIST" ("TRF_PEAK_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index KVA_CONVERSION_COEFFICIEN_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."KVA_CONVERSION_COEFFICIEN_UK1" ON "EDTLM"."KVA_CONVERSION_COEFFICIENTS" ("CUSTOMER_COUNT_GT", "CLIMATE_ZONE", "SEASON") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_SMART_COUNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_SMART_COUNT_PK" ON "EDTLM"."CALC_TRF_SMART_COUNT" ("TRF_PEAK_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_BY_CUST_TYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_PK" ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index METER_UNIQ_SPID
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."METER_UNIQ_SPID" ON "EDTLM"."METER" ("SERVICE_POINT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index SP_PEAK_GEN_HIST_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."SP_PEAK_GEN_HIST_UK1" ON "EDTLM"."SP_PEAK_GEN_HIST" ("SERVICE_POINT_ID", "TRF_PEAK_GEN_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_CGC_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_CGC_IDX" ON "EDTLM"."TRANSFORMER" ("CGC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_UNIQ_DEVID
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_UNIQ_DEVID" ON "EDTLM"."TRF_PEAK_GEN" ("TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_PEAK_SMR_2_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_PEAK_SMR_2_PK" ON "EDTLM"."CALC_TRF_PEAK_SMR_2" ("TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index MONTHLY_LOAD_LOG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."MONTHLY_LOAD_LOG_PK" ON "EDTLM"."MONTHLY_LOAD_LOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_HIST_CAP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_HIST_CAP_PK" ON "EDTLM"."CALC_TRF_HIST_CAP" ("TRF_PEAK_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_INDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_INDEX1" ON "EDTLM"."TRF_PEAK" ("TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_PEAK_WNTR_2_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_PEAK_WNTR_2_PK" ON "EDTLM"."CALC_TRF_PEAK_WNTR_2" ("TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRANSFORMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRANSFORMER_PK" ON "EDTLM"."TRANSFORMER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index REV_ACCT_INDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."REV_ACCT_INDEX1" ON "EDTLM"."REV_ACCT" ("CUST_TYP", "REV_ACCT_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_BK_DEV_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_BK_DEV_IDX" ON "EDTLM"."TRANSFORMER_BANK" ("TRF_ID", "BANK_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CD_TRANSFORMER_BANK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CD_TRANSFORMER_BANK_PK" ON "EDTLM"."CD_TRANSFORMER_BANK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_PEAK_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_PEAK_HIST_PK" ON "EDTLM"."CALC_TRF_PEAK_HIST" ("TRF_PEAK_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRANSFORMER_GUI_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRANSFORMER_GUI_IDX" ON "EDTLM"."TRANSFORMER" ("GLOBAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index STG_SM_SP_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."STG_SM_SP_LOAD_PK" ON "EDTLM"."STG_SM_SP_LOAD" ("CGC", "SERVICE_POINT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_PK" ON "EDTLM"."TRF_PEAK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index SP_PEAK_HIST_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."SP_PEAK_HIST_UK1" ON "EDTLM"."SP_PEAK_HIST" ("SERVICE_POINT_ID", "TRF_PEAK_HIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index SP_PEAK_GEN_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."SP_PEAK_GEN_HIST_PK" ON "EDTLM"."SP_PEAK_GEN_HIST" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index STG_SM_TRF_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."STG_SM_TRF_LOAD_PK" ON "EDTLM"."STG_SM_TRF_LOAD" ("CGC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index RATE_SCHEDULE_INDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."RATE_SCHEDULE_INDEX1" ON "EDTLM"."RATE_SCHEDULE" ("RATE_SCHEDULE", "CUST_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index METER_GUID_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."METER_GUID_IDX" ON "EDTLM"."METER" ("GLOBAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_PEAK_SMR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_PEAK_SMR_PK" ON "EDTLM"."CALC_TRF_PEAK_SMR" ("TRF_ID", "SMR_PEAK_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index REV_ACCT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."REV_ACCT_PK" ON "EDTLM"."REV_ACCT" ("REV_ACCT_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_NP_CAP_MULT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_NP_CAP_MULT_PK" ON "EDTLM"."TRF_NP_CAP_MULT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CODE_LOOKUP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CODE_LOOKUP_PK" ON "EDTLM"."CODE_LOOKUP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_HIST_BATCH_DEVICE
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_HIST_BATCH_DEVICE" ON "EDTLM"."TRF_PEAK_GEN_HIST" ("BATCH_DATE", "TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index RATE_SCHEDULE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."RATE_SCHEDULE_PK" ON "EDTLM"."RATE_SCHEDULE" ("RATE_SCHEDULE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_PK" ON "EDTLM"."TRF_PEAK_GEN" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CODE_LOOKUP_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CODE_LOOKUP_UK1" ON "EDTLM"."CODE_LOOKUP" ("CODE_TYP", "CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRANSFORMER_GUID_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRANSFORMER_GUID_IDX" ON "EDTLM"."TRANSFORMER_BANK" ("GLOBAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index STG_SM_SP_GEN_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."STG_SM_SP_GEN_LOAD_PK" ON "EDTLM"."STG_SM_SP_GEN_LOAD" ("CGC", "SERVICE_POINT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_BY_CUST_TYP_IDX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_IDX1" ON "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" ("TRF_PEAK_GEN_ID", "SEASON", "CUST_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index MONTHLY_LOAD_LOG_TABLE_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."MONTHLY_LOAD_LOG_TABLE_NAME" ON "EDTLM"."MONTHLY_LOAD_LOG" ("TABLE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_BY_CUST_TYP_INDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_BY_CUST_TYP_INDEX1" ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" ("TRF_PEAK_ID", "SEASON", "CUST_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRANSFORMER_BANK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRANSFORMER_BANK_PK" ON "EDTLM"."TRANSFORMER_BANK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_HIST_PK" ON "EDTLM"."TRF_PEAK_HIST" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index STG_CCB_METER_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."STG_CCB_METER_LOAD_PK" ON "EDTLM"."STG_CCB_METER_LOAD" ("SERVICE_POINT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_GEN_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_GEN_HIST_PK" ON "EDTLM"."TRF_PEAK_GEN_HIST" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_CUST_TYP_TOTAL_KVA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_CUST_TYP_TOTAL_KVA_PK" ON "EDTLM"."CALC_CUST_TYP_TOTAL_KVA" ("TRF_PEAK_HIST_ID", "CUST_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CD_TRANSFORMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CD_TRANSFORMER_PK" ON "EDTLM"."CD_TRANSFORMER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_BY_CUST_TYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_BY_CUST_TYP_PK" ON "EDTLM"."TRF_PEAK_BY_CUST_TYP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index SP_PEAK_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."SP_PEAK_HIST_PK" ON "EDTLM"."SP_PEAK_HIST" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CD_METER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CD_METER_PK" ON "EDTLM"."CD_METER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_PEAK_WNTR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_PEAK_WNTR_PK" ON "EDTLM"."CALC_TRF_PEAK_WNTR" ("TRF_ID", "WNTR_PEAK_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index METER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."METER_PK" ON "EDTLM"."METER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index STG_SM_TRF_GEN_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."STG_SM_TRF_GEN_LOAD_PK" ON "EDTLM"."STG_SM_TRF_GEN_LOAD" ("CGC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index TRF_PEAK_HIST_BATCH_DEVICE
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."TRF_PEAK_HIST_BATCH_DEVICE" ON "EDTLM"."TRF_PEAK_HIST" ("BATCH_DATE", "TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  DDL for Index CALC_TRF_DATA_START_DATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "EDTLM"."CALC_TRF_DATA_START_DATE_PK" ON "EDTLM"."CALC_TRF_DATA_START_DATE" ("TRF_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX" ;
--------------------------------------------------------
--  Constraints for Table CD_METER
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_METER" ADD CONSTRAINT "CD_METER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CD_METER" ADD CONSTRAINT "CD_METER_UNIQ_SPID" UNIQUE ("SERVICE_POINT_ID") DISABLE;
--------------------------------------------------------
--  Constraints for Table CALC_TRF_PEAK_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_HIST" ADD CONSTRAINT "CALC_TRF_PEAK_HIST_PK" PRIMARY KEY ("TRF_PEAK_HIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_HIST" MODIFY ("TRF_PEAK_HIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_TRF_PEAK_WNTR_2
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" ADD CONSTRAINT "CALC_TRF_PEAK_WNTR_2_PK" PRIMARY KEY ("TRF_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" MODIFY ("WNTR_PEAK_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" MODIFY ("WNTR_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" MODIFY ("WNTR_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR_2" MODIFY ("TRF_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_TRF_DATA_START_DATE
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_DATA_START_DATE" ADD CONSTRAINT "CALC_TRF_DATA_START_DATE_PK" PRIMARY KEY ("TRF_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_DATA_START_DATE" MODIFY ("TRF_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TLM_APP_ERRORS
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TLM_APP_ERRORS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TLM_APP_ERRORS" ADD CONSTRAINT "TLM_APP_ERRORS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CALC_TRF_PEAK_WNTR
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" ADD CONSTRAINT "CALC_TRF_PEAK_WNTR_PK" PRIMARY KEY ("TRF_ID", "WNTR_PEAK_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" MODIFY ("WNTR_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" MODIFY ("WNTR_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" MODIFY ("WNTR_PEAK_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_WNTR" MODIFY ("TRF_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRF_PEAK_BY_CUST_TYP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" ADD CONSTRAINT "TRF_PEAK_BY_CUST_TYP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("SEASON" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("TRF_PEAK_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("SEASON_CUST_CNT" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("SEASON_TOTAL_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" ADD CONSTRAINT "TRF_PEAK_BY_CUST_TYP_UK1" UNIQUE ("TRF_PEAK_ID", "SEASON", "CUST_TYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TRF_NP_CAP_MULT
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("CAP_MULTIPLIER_C" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("SEASON" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("CAP_MULTIPLIER_B" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("INSTALLATION_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("PHASE_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("KVA_LOW" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("KVA_HIGH" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("COAST_INTERIOR_FLG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("CAP_MULTIPLIER_A" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_NP_CAP_MULT" ADD CONSTRAINT "TRF_NP_CAP_MULT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXT_SM_SP_GEN_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."EXT_SM_SP_GEN_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."EXT_SM_SP_GEN_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_TRF_AB_VALUE
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_AB_VALUE" MODIFY ("DEVICE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXT_SM_TRF_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."EXT_SM_TRF_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table METER
--------------------------------------------------------

  ALTER TABLE "EDTLM"."METER" ADD CONSTRAINT "METER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."METER" ADD CONSTRAINT "METER_UNIQ_SPID" UNIQUE ("SERVICE_POINT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."METER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."METER" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STG_SM_TRF_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_TRF_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_TRF_LOAD" ADD CONSTRAINT "STG_SM_TRF_LOAD_PK" PRIMARY KEY ("CGC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TRF_PEAK_GEN
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" ADD CONSTRAINT "TRF_PEAK_GEN_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TRF_PEAK_GEN_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("BATCH_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("TRF_PEAK_TIME" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("TRF_PEAK_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("TRF_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" ADD CONSTRAINT "TRF_PEAK_GEN_HIST_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;

--------------------------------------------------------
--  Constraints for Table REV_ACCT
--------------------------------------------------------

  ALTER TABLE "EDTLM"."REV_ACCT" ADD CONSTRAINT "REV_ACCT_PK" PRIMARY KEY ("REV_ACCT_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("REV_ACCT_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."REV_ACCT" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRANSFORMER
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("CGC_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("INSTALLATION_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER" ADD CONSTRAINT "TRANSFORMER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STG_CCB_METER_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_CCB_METER_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_CCB_METER_LOAD" ADD CONSTRAINT "STG_CCB_METER_LOAD_PK" PRIMARY KEY ("SERVICE_POINT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXT_CCB_METER_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."EXT_CCB_METER_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXT_SM_SP_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."EXT_SM_SP_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."EXT_SM_SP_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_CUST_TYP_TOTAL_KVA
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_CUST_TYP_TOTAL_KVA" ADD CONSTRAINT "CALC_CUST_TYP_TOTAL_KVA_PK" PRIMARY KEY ("TRF_PEAK_HIST_ID", "CUST_TYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_CUST_TYP_TOTAL_KVA" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_CUST_TYP_TOTAL_KVA" MODIFY ("TRF_PEAK_HIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRF_PEAK
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK" ADD CONSTRAINT "TRF_PEAK_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table RATE_SCHEDULE
--------------------------------------------------------

  ALTER TABLE "EDTLM"."RATE_SCHEDULE" ADD CONSTRAINT "RATE_SCHEDULE_PK" PRIMARY KEY ("RATE_SCHEDULE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("RATE_SCHEDULE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."RATE_SCHEDULE" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MONTHLY_LOAD_LOG
--------------------------------------------------------

  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" ADD CONSTRAINT "MIGRATION_LOG_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("LOAD_START_TS" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."MONTHLY_LOAD_LOG" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXT_SM_TRF_GEN_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."EXT_SM_TRF_GEN_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_TRF_SMART_COUNT
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_SMART_COUNT" ADD CONSTRAINT "CALC_TRF_SMART_COUNT_PK" PRIMARY KEY ("TRF_PEAK_HIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_SMART_COUNT" MODIFY ("SM_FLG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_SMART_COUNT" MODIFY ("TRF_PEAK_HIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRF_PEAK_GEN_BY_CUST_TYP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("SEASON" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("TRF_PEAK_GEN_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("SEASON_CUST_CNT" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("SEASON_TOTAL_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" ADD CONSTRAINT "TRF_PEAK_GEN_BY_CUST_TYP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CALC_TRF_HIST_CAP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_HIST_CAP" ADD CONSTRAINT "CALC_TRF_HIST_CAP_PK" PRIMARY KEY ("TRF_PEAK_HIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_HIST_CAP" MODIFY ("TRF_PEAK_HIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SP_PEAK_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."SP_PEAK_HIST" ADD CONSTRAINT "SP_PEAK_HIST_UK1" UNIQUE ("SERVICE_POINT_ID", "TRF_PEAK_HIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" ADD CONSTRAINT "SP_PEAK_HIST_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("TRF_PEAK_HIST_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("SP_PEAK_TIME" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("SP_PEAK_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("SM_FLG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRF_PEAK_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("BATCH_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("TRF_PEAK_TIME" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("TRF_PEAK_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("TRF_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" ADD CONSTRAINT "TRF_PEAK_HIST_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STG_SM_SP_GEN_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_SP_GEN_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_SP_GEN_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_SP_GEN_LOAD" ADD CONSTRAINT "STG_SM_SP_GEN_LOAD_PK" PRIMARY KEY ("CGC", "SERVICE_POINT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CALC_TRF_PEAK_SMR
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR" ADD CONSTRAINT "CALC_TRF_PEAK_SMR_PK" PRIMARY KEY ("TRF_ID", "SMR_PEAK_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR" MODIFY ("SMR_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR" MODIFY ("SMR_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR" MODIFY ("SMR_PEAK_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR" MODIFY ("TRF_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table KVA_CONVERSION_COEFFICIENTS
--------------------------------------------------------

  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" ADD CONSTRAINT "KVA_CONVERSION_COEFFICIENT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" ADD CONSTRAINT "KVA_CONVERSION_COEFFICIEN_UK1" UNIQUE ("CUSTOMER_COUNT_GT", "CLIMATE_ZONE", "SEASON")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("CUSTOMER_COUNT_GT" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("CLIMATE_ZONE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("SEASON" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."KVA_CONVERSION_COEFFICIENTS" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STG_SM_SP_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_SP_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_SP_LOAD" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_SP_LOAD" ADD CONSTRAINT "STG_SM_SP_LOAD_PK" PRIMARY KEY ("CGC", "SERVICE_POINT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CALC_TRF_DOM_COUNT
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_DOM_COUNT" MODIFY ("DEVICE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CALC_TRF_PEAK_SMR_2
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" ADD CONSTRAINT "CALC_TRF_PEAK_SMR_2_PK" PRIMARY KEY ("TRF_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" MODIFY ("SMR_PEAK_DATE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" MODIFY ("SMR_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" MODIFY ("SMR_CAP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CALC_TRF_PEAK_SMR_2" MODIFY ("TRF_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CODE_LOOKUP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CODE_LOOKUP" ADD CONSTRAINT "CODE_LOOKUP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CODE_LOOKUP" ADD CONSTRAINT "CODE_LOOKUP_UK1" UNIQUE ("CODE_TYP", "CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("DESC_SHORT" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("CODE_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("DESC_LONG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CODE_LOOKUP" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STG_SM_TRF_GEN_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_TRF_GEN_LOAD" MODIFY ("CGC" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."STG_SM_TRF_GEN_LOAD" ADD CONSTRAINT "STG_SM_TRF_GEN_LOAD_PK" PRIMARY KEY ("CGC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CD_TRANSFORMER
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CD_TRANSFORMER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER" MODIFY ("CGC_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER" MODIFY ("INSTALLATION_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER" ADD CONSTRAINT "CD_TRANSFORMER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SP_PEAK_GEN_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" ADD CONSTRAINT "SP_PEAK_GEN_HIST_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("SERVICE_POINT_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("TRF_PEAK_GEN_HIST_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("SP_PEAK_TIME" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("SP_PEAK_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("VEE_SP_KW_FLG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("INT_LEN" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("CUST_TYP" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("SM_FLG" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" ADD CONSTRAINT "SP_PEAK_GEN_HIST_UK1" UNIQUE ("SERVICE_POINT_ID", "TRF_PEAK_GEN_HIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CD_TRANSFORMER_BANK
--------------------------------------------------------

  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("TRF_GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("BANK_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("NP_KVA" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("PHASE_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."CD_TRANSFORMER_BANK" ADD CONSTRAINT "CD_TRANSFORMER_BANK_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TRANSFORMER_BANK
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("GLOBAL_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("CREATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("CREATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("UPDATE_USERID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" ADD CONSTRAINT "TRANSFORMER_BANK_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EDTLMIDX"  ENABLE;
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("PHASE_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("TRF_ID" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("BANK_CD" NOT NULL ENABLE);
  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" MODIFY ("NP_KVA" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table METER
--------------------------------------------------------

  ALTER TABLE "EDTLM"."METER" ADD CONSTRAINT "METER_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SP_PEAK_GEN_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" ADD CONSTRAINT "SP_PEAK_GEN_HIST_FK1" FOREIGN KEY ("TRF_PEAK_GEN_HIST_ID")
	  REFERENCES "EDTLM"."TRF_PEAK_GEN_HIST" ("ID") ENABLE;
  ALTER TABLE "EDTLM"."SP_PEAK_GEN_HIST" ADD CONSTRAINT "SP_PEAK_GEN_HIST_FK2" FOREIGN KEY ("METER_ID")
	  REFERENCES "EDTLM"."METER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SP_PEAK_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."SP_PEAK_HIST" ADD CONSTRAINT "SP_PEAK_HIST_FK1" FOREIGN KEY ("TRF_PEAK_HIST_ID")
	  REFERENCES "EDTLM"."TRF_PEAK_HIST" ("ID") DISABLE;
  ALTER TABLE "EDTLM"."SP_PEAK_HIST" ADD CONSTRAINT "SP_PEAK_HIST_FK2" FOREIGN KEY ("METER_ID")
	  REFERENCES "EDTLM"."METER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STG_SM_SP_GEN_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_SP_GEN_LOAD" ADD CONSTRAINT "STG_SM_SP_GEN_LOAD_FK1" FOREIGN KEY ("CGC")
	  REFERENCES "EDTLM"."STG_SM_TRF_GEN_LOAD" ("CGC") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STG_SM_SP_LOAD
--------------------------------------------------------

  ALTER TABLE "EDTLM"."STG_SM_SP_LOAD" ADD CONSTRAINT "STG_SM_SP_LOAD_FK1" FOREIGN KEY ("CGC")
	  REFERENCES "EDTLM"."STG_SM_TRF_LOAD" ("CGC") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRANSFORMER_BANK
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRANSFORMER_BANK" ADD CONSTRAINT "TRANSFORMER_BANK_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK" ADD CONSTRAINT "TRF_PEAK_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK_BY_CUST_TYP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_BY_CUST_TYP" ADD CONSTRAINT "TRF_PEAK_BY_CUST_TYP_FK1" FOREIGN KEY ("TRF_PEAK_ID")
	  REFERENCES "EDTLM"."TRF_PEAK" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK_GEN
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN" ADD CONSTRAINT "TRF_PEAK_GEN_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK_GEN_BY_CUST_TYP
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP" ADD CONSTRAINT "TRF_PEAK_GEN_BY_CUST_TYP_FK1" FOREIGN KEY ("TRF_PEAK_GEN_ID")
	  REFERENCES "EDTLM"."TRF_PEAK_GEN" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK_GEN_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_GEN_HIST" ADD CONSTRAINT "TRF_PEAK_GEN_HIST_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRF_PEAK_HIST
--------------------------------------------------------

  ALTER TABLE "EDTLM"."TRF_PEAK_HIST" ADD CONSTRAINT "TRF_PEAK_HIST_FK1" FOREIGN KEY ("TRF_ID")
	  REFERENCES "EDTLM"."TRANSFORMER" ("ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_METER_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_METER_INS" BEFORE INSERT ON CD_METER 
FOR EACH ROW 
BEGIN
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT CD_METER_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."CD_METER_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_METER_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_METER_UPDT" BEFORE UPDATE
    ON EDTLM.CD_METER

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."CD_METER_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_TRANSFORMER_BANK_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_TRANSFORMER_BANK_INS" BEFORE INSERT ON CD_TRANSFORMER_BANK 
FOR EACH ROW 
BEGIN
  DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT CD_TRANSFORMER_BANK_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
     SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."CD_TRANSFORMER_BANK_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_TRANSFORMER_BANK_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_TRANSFORMER_BANK_UPDT" BEFORE UPDATE
    ON EDTLM.CD_TRANSFORMER_BANK

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."CD_TRANSFORMER_BANK_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_TRANSFORMER_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_TRANSFORMER_INS" BEFORE INSERT ON CD_TRANSFORMER 
FOR EACH ROW 
BEGIN
  DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT CD_TRANSFORMER_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."CD_TRANSFORMER_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CD_TRANSFORMER_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CD_TRANSFORMER_UPDT" BEFORE UPDATE
    ON EDTLM.CD_TRANSFORMER

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."CD_TRANSFORMER_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CODE_LOOKUP_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CODE_LOOKUP_INS" BEFORE
  INSERT ON EDTLM.CODE_LOOKUP FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.CODE_LOOKUP_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."CODE_LOOKUP_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CODE_LOOKUP_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."CODE_LOOKUP_UPDT" 
    BEFORE UPDATE
    ON EDTLM.CODE_LOOKUP

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."CODE_LOOKUP_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger KVA_CONV_COEF_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."KVA_CONV_COEF_INS" BEFORE
  INSERT ON EDTLM.KVA_CONVERSION_COEFFICIENTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.KVA_CONV_COEF_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."KVA_CONV_COEF_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger KVA_CONV_COEF_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."KVA_CONV_COEF_UPDT" BEFORE UPDATE
    ON EDTLM.KVA_CONVERSION_COEFFICIENTS

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."KVA_CONV_COEF_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger METER_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."METER_INS" BEFORE
  INSERT ON EDTLM.METER FOR EACH ROW 
  BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
      IF INSERTING AND :NEW.ID IS NULL THEN
        SELECT METER_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
      END IF;
      SELECT sysdate INTO :new.create_dtm FROM dual;
      SELECT sysdate INTO :new.update_dtm FROM dual;
      SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
      IF clid IS NULL THEN
        SELECT USER INTO :new.update_userid FROM dual;
        SELECT USER INTO :new.create_userid FROM dual;
      ELSE
        SELECT clid INTO :new.update_userid FROM dual;
        SELECT clid INTO :new.create_userid FROM dual;
      END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."METER_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger METER_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."METER_UPDT" 
    BEFORE UPDATE
    ON EDTLM.METER

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."METER_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MONTHLY_LOAD_LOG_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."MONTHLY_LOAD_LOG_INS" 
BEFORE INSERT ON MONTHLY_LOAD_LOG 
FOR EACH ROW 
BEGIN
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT MONTHLY_LOAD_LOG_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    
    SELECT sysdate INTO :new.load_start_ts FROM dual;
    
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
    
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."MONTHLY_LOAD_LOG_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MONTHLY_LOAD_LOG_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."MONTHLY_LOAD_LOG_UPDT" 
    BEFORE UPDATE
    ON EDTLM.MONTHLY_LOAD_LOG

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."MONTHLY_LOAD_LOG_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger RATE_SCHEDULE_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."RATE_SCHEDULE_INS" BEFORE
  INSERT ON EDTLM.RATE_SCHEDULE FOR EACH ROW 
  BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
      SELECT sysdate INTO :new.create_dtm FROM dual;
      SELECT sysdate INTO :new.update_dtm FROM dual;
      SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
      IF clid IS NULL THEN
        SELECT USER INTO :new.update_userid FROM dual;
        SELECT USER INTO :new.create_userid FROM dual;
      ELSE
        SELECT clid INTO :new.update_userid FROM dual;
        SELECT clid INTO :new.create_userid FROM dual;
      END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."RATE_SCHEDULE_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger RATE_SCHEDULE_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."RATE_SCHEDULE_UPDT" 
    BEFORE UPDATE
    ON EDTLM.RATE_SCHEDULE

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."RATE_SCHEDULE_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger REV_ACCT_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."REV_ACCT_INS" BEFORE
  INSERT ON EDTLM.REV_ACCT FOR EACH ROW 
  BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
      SELECT sysdate INTO :new.create_dtm FROM dual;
      SELECT sysdate INTO :new.update_dtm FROM dual;
      SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
      IF clid IS NULL THEN
        SELECT USER INTO :new.update_userid FROM dual;
        SELECT USER INTO :new.create_userid FROM dual;
      ELSE
        SELECT clid INTO :new.update_userid FROM dual;
        SELECT clid INTO :new.create_userid FROM dual;
      END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."REV_ACCT_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger REV_ACCT_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."REV_ACCT_UPDT" 
    BEFORE UPDATE
    ON EDTLM.REV_ACCT

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."REV_ACCT_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SP_PEAK_GEN_HIST_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."SP_PEAK_GEN_HIST_INS" BEFORE
  INSERT ON EDTLM.SP_PEAK_GEN_HIST FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.SP_PEAK_GEN_HIST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."SP_PEAK_GEN_HIST_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SP_PEAK_GEN_HIST_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."SP_PEAK_GEN_HIST_UPDT" 
    BEFORE UPDATE
    ON EDTLM.SP_PEAK_GEN_HIST

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."SP_PEAK_GEN_HIST_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SP_PEAK_HIST_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."SP_PEAK_HIST_INS" BEFORE
  INSERT ON EDTLM.SP_PEAK_HIST FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.SP_PEAK_HIST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."SP_PEAK_HIST_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SP_PEAK_HIST_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."SP_PEAK_HIST_UPDT" 
    BEFORE UPDATE
    ON EDTLM.SP_PEAK_HIST

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."SP_PEAK_HIST_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_BANK_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_BANK_INS" BEFORE
  INSERT ON EDTLM.TRANSFORMER_BANK FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRANSFORMER_BANK_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_BANK_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_BANK_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_BANK_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRANSFORMER_BANK

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_BANK_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_INS" BEFORE
  INSERT ON EDTLM.TRANSFORMER FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRANSFORMER_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_INS_TEMP_CLNUP
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_INS_TEMP_CLNUP" BEFORE
  INSERT ON EDTLM.TRANSFORMER FOR EACH ROW BEGIN
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF :NEW.PHASE_CD = 2 THEN
      :NEW.PHASE_CD := 3;
    END IF;
  END;
END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_INS_TEMP_CLNUP" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRANSFORMER

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRANSFORMER_UPDT_TEMP_CLNUP
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRANSFORMER_UPDT_TEMP_CLNUP" 
    BEFORE UPDATE
    ON EDTLM.TRANSFORMER

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        IF :NEW.PHASE_CD = 2 THEN
          :NEW.PHASE_CD := 3;
        END IF;
    END;
/
ALTER TRIGGER "EDTLM"."TRANSFORMER_UPDT_TEMP_CLNUP" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_NP_CAP_MULT_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_NP_CAP_MULT_INS" BEFORE
  INSERT ON EDTLM.TRF_NP_CAP_MULT FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_NP_CAP_MULT_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_NP_CAP_MULT_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_NP_CAP_MULT_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_NP_CAP_MULT_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_NP_CAP_MULT

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_NP_CAP_MULT_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_BY_CUST_TYP_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_BY_CUST_TYP_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK_BY_CUST_TYP FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_BY_CUST_TYP_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_BY_CUST_TYP_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_BY_CUST_TYP_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_BY_CUST_TYP_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK_BY_CUST_TYP

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_BY_CUST_TYP_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_BY_CUST_TYP_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK_GEN_BY_CUST_TYP FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_GEN_BY_CUST_TYP_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_BY_CUST_TYP_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK_GEN_BY_CUST_TYP

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_BY_CUST_TYP_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_HIST_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_HIST_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK_GEN_HIST FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_GEN_HIST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_HIST_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_HIST_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_HIST_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK_GEN_HIST

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_HIST_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK_GEN FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_GEN_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_GEN_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_GEN_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK_GEN

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_GEN_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_HIST_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_HIST_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK_HIST FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_HIST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_HIST_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_HIST_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_HIST_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK_HIST

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_HIST_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_INS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_INS" BEFORE
  INSERT ON EDTLM.TRF_PEAK FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>>
    DECLARE clid VARCHAR2(30);
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT EDTLM.TRF_PEAK_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    SELECT sysdate INTO :new.create_dtm FROM dual;
    SELECT sysdate INTO :new.update_dtm FROM dual;
    SELECT sys_context('userenv','client_identifier') INTO clid FROM dual;
    IF clid IS NULL THEN
      SELECT USER INTO :new.update_userid FROM dual;
      SELECT USER INTO :new.create_userid FROM dual;
    ELSE
      SELECT clid INTO :new.update_userid FROM dual;
      SELECT clid INTO :new.create_userid FROM dual;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_INS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRF_PEAK_UPDT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "EDTLM"."TRF_PEAK_UPDT" 
    BEFORE UPDATE
    ON EDTLM.TRF_PEAK

    FOR EACH ROW
    DECLARE
        CLID VARCHAR2(30);
    BEGIN 
        SELECT SYSDATE INTO :NEW.UPDATE_DTM FROM DUAL;
        SELECT SYS_CONTEXT('userenv','client_identifier') INTO CLID FROM DUAL;
        IF CLID IS NULL THEN
            SELECT USER INTO :NEW.UPDATE_USERID FROM DUAL;
        ELSE
            SELECT CLID INTO :NEW.UPDATE_USERID FROM DUAL;
        END IF;

    END;
/
ALTER TRIGGER "EDTLM"."TRF_PEAK_UPDT" ENABLE;
--------------------------------------------------------
--  DDL for Function INSERT_MONTHLY_LOAD_LOG
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."INSERT_MONTHLY_LOAD_LOG" (TABLE_NAME VARCHAR2) RETURN VARCHAR2 AS 
BEGIN 

DBMS_OUTPUT.PUT_LINE('DEBUG - before function INSERT_MONTHLY_LOAD_LOG'); 

INSERT INTO EDTLM.MONTHLY_LOAD_LOG(TABLE_NAME) VALUES (TABLE_NAME); 
COMMIT; 
RETURN 'SUCCESS'; 
END INSERT_MONTHLY_LOAD_LOG; 

/
--------------------------------------------------------
--  DDL for Function LOAD_SP_PEAK_HIST_LEGACY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOAD_SP_PEAK_HIST_LEGACY" (
     p_schema VARCHAR2,
     batchDate DATE)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_batchDateStr VARCHAR2(10);
     v_batchMonth VARCHAR2(10);
     v_rowsProcessed NUMBER := 0;
     v_totalRowsMigrated NUMBER := 0;
     v_s_pf CONSTANT NUMBER := 0.85;
     v_w_pf CONSTANT NUMBER := 0.95;
     v_season VARCHAR2(1);
     v_seasonal_pf NUMBER;
     
BEGIN
     v_batchDateStr := to_char(batchDate, 'dd-mon-yy');
     v_batchMonth := SUBSTR((to_char(batchDate,'MONTH')),1,3);
     if (upper(v_batchMonth) in ('NOV','DEC','JAN','FEB','MAR')) then 
          v_season := 'W';
          v_seasonal_pf := v_w_pf;
     else
          v_season := 'S';
          v_seasonal_pf := v_s_pf;
     end if;

     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('LOAD_SP_PEAK_HIST_LGCY_'||to_char(batchDate,'mmddyyyy')); 
     
     ----------------------------------------------------------------------------------------
     -- Scnenario 1 - Legacy, domestic/non-domestic with KVAR (for legacy, kw and pf are > 0)
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 1 - Legacy, domestic/non-domestic with KVAR (for legacy, kw and pf are > 0)');
     ----------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.SP_PEAK_HIST (
               SERVICE_POINT_ID,
               TRF_PEAK_HIST_ID,
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               cust_typ,
               sm_flg,
               meter_id)
          select 
               a.service_point_id, 
               (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               round(b.REV_KW/(b.PFACTOR/100),1),
               round(b.REV_KW/(b.PFACTOR/100),1),
               a.CUST_TYP,
               ''L'' as sm_flg,
               a.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.STG_CCB_METER_LOAD b, '
               ||p_schema||'.TRANSFORMER c
          WHERE 
               a.trf_id = c.id and
               b.PFACTOR > 0 and 
               b.REV_KW > 0 and
               (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
               a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;     

     ----------------------------------------------------------------------------------------
     -- Scnenario 2 - Legacy, domestic withOUT KVAR (for legacy, pf = 0 or null)
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 2 - Legacy, domestic withOUT KVAR (for legacy, pf = 0 or null)');
     ----------------------------------------------------------------------------------------
     
     -- populate temporary tables used for calculation
     v_stmt := 'truncate table '||p_schema||'.calc_trf_dom_count';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := 
     'insert into '||p_schema||'.calc_trf_dom_count
          select 
               a.id as device_id, 
               count(distinct b.ID) as dom_count 
          from '
               ||p_schema||'.TRANSFORMER a,'
               ||p_schema||'.METER b
          where 
               a.ID = b.TRF_ID and
               b.CUST_TYP = ''DOM'' 
          group by b.TRF_ID';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''calc_trf_dom_count'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;  
      
     -- populate temporary tables used for calculation
     v_stmt := 'truncate table '||p_schema||'.calc_trf_ab_value';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := 
     'insert into '||p_schema||'.calc_trf_ab_value
          select 
               T.ID as device_id,
               KCCS.A_value summer_a_value, 
               KCCS.B_value summer_b_value, 
               KCCW.A_value winter_a_value, 
               KCCW.B_value winter_b_value 
          from '
               ||p_schema||'.TRANSFORMER t,'
               ||p_schema||'.KVA_conversion_coefficients KCCS,'
               ||p_schema||'.KVA_conversion_coefficients KCCW,'
               ||p_schema||'.CALC_TRF_DOM_COUNT TDC
          where 
               T.ID = TDC.DEVICE_ID AND 
               KCCS.Climate_zone = T.CLIMATE_ZONE_CD AND 
               KCCS.Season = ''S'' AND 
               KCCS.customer_count_gt = 
                  DECODE(TDC.DOM_COUNT, 1, 0, 2, 1, 3, 2, 4, 2, 5, 2,
                     DECODE(TRUNC(TDC.DOM_COUNT/13), 0, 5,
                        DECODE(TRUNC(TDC.DOM_COUNT/21), 0, 12,
                                             20))) AND 
               KCCW.Climate_zone = T.CLIMATE_ZONE_CD AND 
               KCCW.Season = ''W'' AND 
               KCCW.customer_count_gt = 
                  DECODE(TDC.DOM_COUNT, 1, 0, 2, 1, 3, 2, 4, 2, 5, 2,
                     DECODE(TRUNC(TDC.DOM_COUNT/13), 0, 5,
                        DECODE(TRUNC(TDC.DOM_COUNT/21), 0, 12, 20)))';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''calc_trf_ab_value'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;    
     
     if (v_season = 'S') THEN     
         v_stmt := '
              insert into '||p_schema||'.SP_PEAK_HIST (
                   SERVICE_POINT_ID,
                   TRF_PEAK_HIST_ID,
                   SP_PEAK_TIME,
                   sp_peak_kva,
                   sp_kva_trf_peak,
                   cust_typ,
                   sm_flg,
                   meter_id)
              select 
                   a.service_point_id, 
                   (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
                   to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
                   round(((b.REV_KWHR * d.summer_a_value) + d.summer_b_value)/'||v_s_pf||',1),
                   round(((b.REV_KWHR * d.summer_a_value) + d.summer_b_value)/'||v_s_pf||',1),
                   a.CUST_TYP,
                   ''L'' as sm_flg,
                   a.ID
              FROM '
                   ||p_schema||'.METER a, '
                   ||p_schema||'.STG_CCB_METER_LOAD b, '
                   ||p_schema||'.calc_trf_ab_value d, '
                   ||p_schema||'.TRANSFORMER c
              WHERE 
                   a.trf_id = c.id and
                   a.cust_typ = ''DOM'' and
                   a.trf_id = d.device_id and not
                   (b.PFACTOR > 0 and 
                   b.REV_KW > 0) and
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
     ELSE
         v_stmt := '
              insert into '||p_schema||'.SP_PEAK_HIST (
                   SERVICE_POINT_ID,
                   TRF_PEAK_HIST_ID,
                   SP_PEAK_TIME,
                   sp_peak_kva,
                   sp_kva_trf_peak,
                   cust_typ,
                   sm_flg,
                   meter_id)
              select 
                   a.service_point_id, 
                   (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
                   to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
                   round(((b.REV_KWHR * d.winter_a_value) + d.winter_b_value)/'||v_w_pf||',1),
                   round(((b.REV_KWHR * d.winter_a_value) + d.winter_b_value)/'||v_w_pf||',1),
                   a.CUST_TYP,
                   ''L'' as sm_flg,
                   a.ID
              FROM '
                   ||p_schema||'.METER a, '
                   ||p_schema||'.STG_CCB_METER_LOAD b, '
                   ||p_schema||'.calc_trf_ab_value d, '
                   ||p_schema||'.TRANSFORMER c
              WHERE 
                   a.trf_id = c.id and
                   a.cust_typ = ''DOM'' and
                   a.trf_id = d.device_id and
                   b.REV_KWHR > 0 and 
                   not (b.PFACTOR > 0 and b.REV_KW > 0) and
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
     END IF;
     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;     

     ----------------------------------------------------------------------------------------
     -- Scnenario 3 - If the SP has a non-zero kW (demand) value and customer type is Commercial
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 3 - If the SP has a non-zero kW (demand) value and customer type is Commercial');
     ----------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.SP_PEAK_HIST (
               SERVICE_POINT_ID,
               TRF_PEAK_HIST_ID,
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               cust_typ,
               sm_flg,
               meter_id)
          select 
               a.service_point_id, 
               (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               round(b.REV_KW/'||v_seasonal_pf||',1),
               round(b.REV_KW/'||v_seasonal_pf||',1),
               a.CUST_TYP,
               ''L'' as sm_flg,
               a.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.STG_CCB_METER_LOAD b, '
               ||p_schema||'.TRANSFORMER c
          WHERE 
                   a.trf_id = c.id and
                   a.cust_typ = ''COM'' and
                   b.REV_KW > 0 and
                   (b.PFACTOR is null or b.PFACTOR = 0) and 
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
                     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;  

     ----------------------------------------------------------------------------------------
     -- Scnenario 4 - If the SP has a non-zero kW (demand) value and customer type is Agriculture, Industrial or Other
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 4 - If the SP has a non-zero kW (demand) value and customer type is Agriculture, Industrial or Other');
     ----------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.SP_PEAK_HIST (
               SERVICE_POINT_ID,
               TRF_PEAK_HIST_ID,
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               cust_typ,
               sm_flg,
               meter_id)
          select 
               a.service_point_id, 
               (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               round(b.REV_KW/.85,1),
               round(b.REV_KW/.85,1),
               a.CUST_TYP,
               ''L'' as sm_flg,
               a.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.STG_CCB_METER_LOAD b, '
               ||p_schema||'.TRANSFORMER c
          WHERE 
                   a.trf_id = c.id and
                   a.cust_typ in (''AGR'',''IND'',''OTH'') and
                   b.REV_KW > 0 and
                   (b.PFACTOR is null or b.PFACTOR = 0) and 
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
                     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;  

     ----------------------------------------------------------------------------------------
     -- Scnenario 5 - If the SP has a zero or null kW (demand) value and customer type is Commercial
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 5 - If the SP has a zero or null kW (demand) value and customer type is Commercial');
     ----------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.SP_PEAK_HIST (
               SERVICE_POINT_ID,
               TRF_PEAK_HIST_ID,
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               cust_typ,
               sm_flg,
               meter_id)
          select 
               a.service_point_id, 
               (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               round(b.REV_KWHR*(1.0 /(24.0 * '||v_seasonal_pf||' * .48)),1),
               round(b.REV_KWHR*(1.0 /(24.0 * '||v_seasonal_pf||' * .48)),1),
               a.CUST_TYP,
               ''L'' as sm_flg,
               a.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.STG_CCB_METER_LOAD b, '
               ||p_schema||'.TRANSFORMER c
          WHERE 
                   a.trf_id = c.id and
                   a.cust_typ in (''COM'') and
                   (b.REV_KW is null or b.REV_KW = 0) and
                   b.REV_KWHR > 0 and 
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
                     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;   

     ----------------------------------------------------------------------------------------
     -- Scnenario 6 - If the SP has a zero or null kW (demand) value and customer type is Agricultural, Industrial or Other
     DBMS_OUTPUT.PUT_LINE('DEBUG - Scnenario 6 - If the SP has a zero or null kW (demand) value and customer type is Agricultural, Industrial or Other');
     ----------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.SP_PEAK_HIST (
               SERVICE_POINT_ID,
               TRF_PEAK_HIST_ID,
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               cust_typ,
               sm_flg,
               meter_id)
          select 
               a.service_point_id, 
               (select id from '||p_schema||'.trf_peak_hist x where x.trf_id=a.trf_id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               round(b.REV_KWHR*(1.0 /(24.0 * .85 * .48)),1),
               round(b.REV_KWHR*(1.0 /(24.0 * .85 * .48)),1),
               a.CUST_TYP,
               ''L'' as sm_flg,
               a.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.STG_CCB_METER_LOAD b, '
               ||p_schema||'.TRANSFORMER c
          WHERE 
                   a.trf_id = c.id and
                   a.cust_typ in (''AGR'',''IND'',''OTH'') and
                   (b.REV_KW is null or b.REV_KW = 0) and
                   b.REV_KWHR > 0 and 
                   (b.sm_sp_status is null or b.sm_sp_status in (''10'',''20'')) and
                   a.SERVICE_POINT_ID = b.SERVICE_POINT_ID
                   ';
                     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_rowsProcessed := SQL%ROWCOUNT;
     DBMS_OUTPUT.PUT_LINE('Records processed - '||v_rowsProcessed);
     v_totalRowsMigrated := v_totalRowsMigrated + v_rowsProcessed;
     commit;  

     DBMS_OUTPUT.PUT_LINE('Total rows migrated - '||v_totalRowsMigrated);     

     -- clean up.  
     -- convert negative calculated SP_PEAK_KVA to .1
     v_stmt := '
          update '||p_schema||'.SP_PEAK_HIST set SP_PEAK_KVA = .1
          where
               SP_PEAK_KVA < 0 and 
               TRF_PEAK_HIST_ID in
               (select ID from '||p_schema||'.trf_peak_hist where batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy''))
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- convert negative calculated SP_KVA_TRF_PEAK to .1
     v_stmt := '
          update '||p_schema||'.SP_PEAK_HIST set SP_KVA_TRF_PEAK = .1
          where
               SP_KVA_TRF_PEAK < 0 and 
               TRF_PEAK_HIST_ID in
               (select ID from '||p_schema||'.trf_peak_hist where batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy''))
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- update migration log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('LOAD_SP_PEAK_HIST_LGCY_'||to_char(batchDate,'mmddyyyy'),v_totalRowsMigrated);

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''SP_PEAK_HIST'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;  
     
     RETURN ('TRUE');
EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('LOAD_SP_PEAK_HIST_LGCY_'||to_char(batchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'migration failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=LOAD_SP_PEAK_HIST_LGCY_'||to_char(batchDate,'mmddyyyy'));
        
END LOAD_SP_PEAK_HIST_LEGACY;

/
--------------------------------------------------------
--  DDL for Function LOAD_SP_PEAK_HIST_SMART
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOAD_SP_PEAK_HIST_SMART" (
     p_schema VARCHAR2,
     batchDate DATE,
     p_generated VARCHAR2)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_batchDateStr VARCHAR2(10);
     v_totalRowsMigrated NUMBER := 0;
     v_seasonal_pf NUMBER;
     v_sourceTable VARCHAR2(50) := 'STG_SM_SP_LOAD';
     v_targetTable VARCHAR2(50) := 'SP_PEAK_HIST';
     v_targetTrfTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_targetTableFkColumn VARCHAR2(50) := 'TRF_PEAK_HIST_ID';
BEGIN
     if p_generated = 'GEN' then
          v_sourceTable := 'STG_SM_SP_GEN_LOAD';
          v_targetTable := 'SP_PEAK_GEN_HIST';
          v_targetTrfTable := 'TRF_PEAK_GEN_HIST';
          v_targetTableFkColumn := 'TRF_PEAK_GEN_HIST_ID';
     end if;

     v_batchDateStr := to_char(batchDate, 'dd-mon-yy');
     if (to_char(batchDate, 'mm') in ('11','12','01','02','03')) then 
          v_seasonal_pf := .95;
     else
          v_seasonal_pf := .85;
     end if;

     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy')); 

     ----------------------------------------------------------------------------------------------
     -- Scnenario 1 - Smart, domestic/non-domestic, with KVAR
     ----------------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' (
               SERVICE_POINT_ID,
               '||v_targetTableFkColumn||',
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               vee_sp_kw_flg,
               int_len,
               cust_typ,
               vee_trf_kw_flg,
               sm_flg,
               meter_id)
          select 
               b.service_point_id, 
               (select id from '||p_schema||'.'||v_targetTrfTable||' x where x.trf_id=c.id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               B.SP_PEAK_TIME, 
               round(SQRT(POWER(B.SP_PEAK_KW,2) + POWER(B.SP_PEAK_KVAR,2)),1),
               round(SQRT(POWER(B.SP_KW_TRF_PEAK,2) + POWER(B.TRF_PEAK_KVAR,2)),1), 
               B.VEE_SP_KW_FLAG as VEE_SP_KW_FLG, 
               B.INT_LEN, 
               A.CUST_TYP,
               B.VEE_TRF_KW_FLAG as VEE_TRF_KW_FLG,
               ''S'' as sm_flg,
               A.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.'||v_sourceTable||' b, '
               ||p_schema||'.TRANSFORMER c, '
               ||p_schema||'.STG_CCB_METER_LOAD d
          WHERE 
               b.CGC = c.CGC_ID and
               d.sm_sp_status in (''30'',''40'') and
               (B.SP_PEAK_KVAR is not null) and
               a.service_point_id = b.service_point_id and
               a.SERVICE_POINT_ID = d.SERVICE_POINT_ID               
               ';
                                         
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;
     
     
     ----------------------------------------------------------------------------------------------
     -- Scnenario 2 - Smart, domestic, no KVAR
     ----------------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' (
               SERVICE_POINT_ID,
               '||v_targetTableFkColumn||',
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               vee_sp_kw_flg,
               int_len,
               cust_typ,
               vee_trf_kw_flg,
               sm_flg,
               meter_id)
          select 
               b.service_point_id, 
               (select id from '||p_schema||'.'||v_targetTrfTable||' x where x.trf_id=c.id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               B.SP_PEAK_TIME, 
               round(B.SP_PEAK_KW/'||v_seasonal_pf||',1) as sp_peak_kva,
               round(B.SP_KW_TRF_PEAK/'||v_seasonal_pf||',1) as sp_kva_trf_peak, 
               B.VEE_SP_KW_FLAG as VEE_SP_KW_FLG, 
               B.INT_LEN, 
               A.CUST_TYP,
               B.VEE_TRF_KW_FLAG as VEE_TRF_KW_FLG,
               ''S'' as sm_flg,
               A.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.'||v_sourceTable||' b, '
               ||p_schema||'.TRANSFORMER c, '
               ||p_schema||'.STG_CCB_METER_LOAD d
          WHERE 
               b.CGC = c.CGC_ID and
               d.sm_sp_status in (''30'',''40'') and
               a.cust_typ = ''DOM'' and
               (B.SP_PEAK_KVAR is null) and
               a.service_point_id = b.service_point_id  and
               a.SERVICE_POINT_ID = d.SERVICE_POINT_ID           
               ';               
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;

     ----------------------------------------------------------------------------------------------
     -- Scnenario 3 Smart, non-domestic, no KVAR, cust type COM
     ----------------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' (
               SERVICE_POINT_ID,
               '||v_targetTableFkColumn||',
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               vee_sp_kw_flg,
               int_len,
               cust_typ,
               vee_trf_kw_flg,
               sm_flg,
               meter_id)
          select 
               b.service_point_id, 
               (select id from '||p_schema||'.'||v_targetTrfTable||' x where x.trf_id=c.id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               B.SP_PEAK_TIME, 
               round(B.SP_PEAK_KW/'||v_seasonal_pf||',1) as sp_peak_kva,
               round(B.SP_KW_TRF_PEAK/'||v_seasonal_pf||',1) as sp_kva_trf_peak, 
               B.VEE_SP_KW_FLAG as VEE_SP_KW_FLG, 
               B.INT_LEN, 
               A.CUST_TYP,
               B.VEE_TRF_KW_FLAG as VEE_TRF_KW_FLG,
               ''S'' as sm_flg,
               A.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.'||v_sourceTable||' b, '
               ||p_schema||'.TRANSFORMER c, '
               ||p_schema||'.STG_CCB_METER_LOAD d
          WHERE 
               b.CGC = c.CGC_ID and
               d.sm_sp_status in (''30'',''40'') and
               a.cust_typ = ''COM'' and
               (B.SP_PEAK_KVAR is null) and
               a.service_point_id = b.service_point_id and
               a.SERVICE_POINT_ID = d.SERVICE_POINT_ID           
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;


     ----------------------------------------------------------------------------------------------
     -- Scnenario 4 - Smart, non-domestic, no KVAR, cust type ARG, IND, OTH
     ----------------------------------------------------------------------------------------------
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' (
               SERVICE_POINT_ID,
               '||v_targetTableFkColumn||',
               SP_PEAK_TIME,
               sp_peak_kva,
               sp_kva_trf_peak,
               vee_sp_kw_flg,
               int_len,
               cust_typ,
               vee_trf_kw_flg,
               sm_flg,
               meter_id)
          select 
               b.service_point_id, 
               (select id from '||p_schema||'.'||v_targetTrfTable||' x where x.trf_id=c.id and x.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')),
               B.SP_PEAK_TIME, 
               round(B.SP_PEAK_KW/.85,1) as sp_peak_kva,
               round(B.SP_KW_TRF_PEAK/.85,1) as sp_kva_trf_peak, 
               B.VEE_SP_KW_FLAG as VEE_SP_KW_FLG, 
               B.INT_LEN, 
               A.CUST_TYP,
               B.VEE_TRF_KW_FLAG as VEE_TRF_KW_FLG,
               ''S'' as sm_flg,
               A.ID
          FROM '
               ||p_schema||'.METER a, '
               ||p_schema||'.'||v_sourceTable||' b, '
               ||p_schema||'.TRANSFORMER c, '
               ||p_schema||'.STG_CCB_METER_LOAD d
          WHERE 
               b.CGC = c.CGC_ID and
               d.sm_sp_status in (''30'',''40'') and
               a.cust_typ in (''AGR'',''IND'',''OTH'') and
               (B.SP_PEAK_KVAR is null) and
               a.service_point_id = b.service_point_id and
               a.SERVICE_POINT_ID = d.SERVICE_POINT_ID            
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;     

     -- clean up.  
     -- convert negative calculated SP_PEAK_KVA to .1
     v_stmt := '
          update '||p_schema||'.'||v_targetTable||' set SP_PEAK_KVA = .1
          where
               SP_PEAK_KVA < 0 and 
               '||v_targetTableFkColumn||' in
               (select ID from '||p_schema||'.'||v_targetTrfTable||' where batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy''))
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- convert negative calculated SP_KVA_TRF_PEAK to .1
     v_stmt := '
          update '||p_schema||'.'||v_targetTable||' set SP_KVA_TRF_PEAK = .1
          where
               SP_KVA_TRF_PEAK < 0 and 
               '||v_targetTableFkColumn||' in
               (select ID from '||p_schema||'.'||v_targetTrfTable||' where batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy''))
               ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- update migration log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy'),v_totalRowsMigrated);

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''SP_PEAK_HIST'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;  
     
     RETURN ('TRUE');
     
EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'Load failed.  Please check entry in MONTHLY_LOAD_LOG for tablename='||v_targetTable||'_SMART'||to_char(batchDate,'mmddyyyy')); 
        
END LOAD_SP_PEAK_HIST_SMART;

/
--------------------------------------------------------
--  DDL for Function LOAD_TRF_PEAK_HIST_LEGACY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOAD_TRF_PEAK_HIST_LEGACY" (
     p_schema VARCHAR2,
     batchDate DATE)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_totalRowsMigrated NUMBER := 0;
     v_batchDateStr VARCHAR2(10) := to_char(batchDate, 'dd-mon-yy');
BEGIN
     -- create migration log record
     v_log_status := INSERT_MONTHLY_LOAD_LOG('LOAD_TRF_PEAK_HIST_LEGACY_'||to_char(batchDate,'mmddyyyy')); 

           v_stmt := '
                insert into '||p_schema||'.TRF_PEAK_HIST (
                     trf_id, 
                     batch_date,
                     trf_peak_time,
                     trf_peak_kva,
                     sm_cust_total, 
                     ccb_cust_total, 
                     trf_cap)
                select distinct
                     a.TRF_ID,
                     to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
                     to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
                     0,
                     NULL,
                     NULL,
                     0          
                FROM '
                     ||p_schema||'.METER a, '
                     ||p_schema||'.TRANSFORMER b, '
                     ||p_schema||'.STG_CCB_METER_LOAD c
                WHERE 
                     a.SERVICE_POINT_ID    = c.SERVICE_POINT_ID  AND 
                     a.TRF_ID      = b.ID        AND
                     not exists (select 1 from '||p_schema||'.trf_peak_hist x where a.trf_id = x.trf_id and x.batch_date = to_date('''||v_batchDateStr||''',''dd-mon-yy''))
                     ';
           DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;

     -- update migration log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('LOAD_TRF_PEAK_HIST_LEGACY_'||to_char(batchDate,'mmddyyyy'),v_totalRowsMigrated);
       
     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''TRF_PEAK_HIST'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;       
  
     RETURN ('TRUE');
     
EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('LOAD_TRF_PEAK_HIST_LEGACY_'||to_char(batchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'Load failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=LOAD_TRF_PEAK_HIST_LEGACY_'||to_char(batchDate,'mmddyyyy')); 
        
END LOAD_TRF_PEAK_HIST_LEGACY;

/
--------------------------------------------------------
--  DDL for Function LOAD_TRF_PEAK_HIST_SMART
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOAD_TRF_PEAK_HIST_SMART" ( 
     p_schema VARCHAR2,
     batchDate DATE,
     p_generated VARCHAR2
) 
RETURN VARCHAR2 
IS 
     v_returVal VARCHAR2(10); 
     v_stmt VARCHAR2(2000); 
     v_log_status VARCHAR2(10); 
     v_batchDateStr VARCHAR2(10) := to_char(batchDate, 'dd-mon-yy');
     v_sourceTable VARCHAR2(50) := 'STG_SM_TRF_LOAD';
     v_targetTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_totalRowsMigrated NUMBER := 0;
BEGIN 
     if p_generated = 'GEN' then
          v_sourceTable := 'STG_SM_TRF_GEN_LOAD';
          v_targetTable := 'TRF_PEAK_GEN_HIST';
     end if;
     
     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy')); 
     v_stmt := ' 
               insert into '||p_schema||'.'||v_targetTable||' ( 
               trf_id, 
               batch_date, 
               trf_peak_time, 
               trf_peak_kva, 
               sm_cust_total, 
               ccb_cust_total, 
               trf_cap) 
          select 
               b.ID,               
               to_date('''||v_batchDateStr||''',''dd-mon-yy''), 
               a.TRF_PEAK_TIME, 
               0, 
               NULL, 
               NULL, 
               0           
         FROM 
               '||p_schema||'.'||v_sourceTable||' a, 
               '||p_schema||'.TRANSFORMER b 
                
          WHERE 
               a.CGC = b.CGC_ID
          '; 
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt); 
     execute immediate v_stmt; 
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;
     commit;
     
     -- update monthly load log record 
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy'),v_totalRowsMigrated); 
     
     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => '''||v_targetTable||''',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;    
     
     RETURN ('TRUE'); 
EXCEPTION 
     WHEN OTHERS THEN 
          v_log_status := LOG_MONTHLY_LOAD_ERROR('LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy'), sqlerrm); 
          raise_application_error (-20001, 'Load failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=LOAD_'||v_targetTable||'_SMART_'||to_char(batchDate,'mmddyyyy')); 
END LOAD_TRF_PEAK_HIST_SMART;

/
--------------------------------------------------------
--  DDL for Function LOG_MONTHLY_LOAD_ERROR
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOG_MONTHLY_LOAD_ERROR" (TABLE_NAME_param VARCHAR2, ERROR_TEXT_param VARCHAR2) RETURN VARCHAR2 AS 
BEGIN 
  update EDTLM.MONTHLY_LOAD_LOG set ERROR_TEXT = ERROR_TEXT_param 
  where 
     TABLE_NAME = TABLE_NAME_param; 
  commit; 
  return 'SUCCESS'; 
END LOG_MONTHLY_LOAD_ERROR;

/
--------------------------------------------------------
--  DDL for Function LOG_MONTHLY_LOAD_SUCCESS
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."LOG_MONTHLY_LOAD_SUCCESS" (TABLE_NAME_param VARCHAR2, NUM_RECORDS_PROCESSED_param NUMBER) RETURN VARCHAR2 AS 
BEGIN 
  update EDTLM.MONTHLY_LOAD_LOG set NUM_RECORDS_PROCESSED = NUM_RECORDS_PROCESSED_param, LOAD_END_TS = sysdate where 
     TABLE_NAME = TABLE_NAME_param; 
  commit; 
  return 'SUCCESS'; 
END LOG_MONTHLY_LOAD_SUCCESS;

/
--------------------------------------------------------
--  DDL for Function POPULATE_TRF_PEAK_BY_CUST_TYP
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."POPULATE_TRF_PEAK_BY_CUST_TYP" (
     p_schema VARCHAR2,
     endBatchDate DATE,
     p_generated VARCHAR2)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_totalRowsMigrated NUMBER := 0;
     v_trfPeakTable VARCHAR2(50) := 'TRF_PEAK';
     v_trfPeakHistTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_spPeakHistTable VARCHAR2(50) := 'SP_PEAK_HIST';
     v_trfPeakFkColumn VARCHAR2(50) := 'TRF_PEAK_ID';
     v_trfPeakHistFkColumn VARCHAR2(50) := 'TRF_PEAK_HIST_ID';
     v_targetTable VARCHAR2(50) := 'TRF_PEAK_BY_CUST_TYP';
BEGIN
     if p_generated = 'GEN' then
          v_trfPeakTable := 'TRF_PEAK_GEN';
          v_trfPeakHistTable := 'TRF_PEAK_GEN_HIST';
          v_spPeakHistTable := 'SP_PEAK_GEN_HIST';
          v_trfPeakFkColumn := 'TRF_PEAK_GEN_ID';
          v_trfPeakHistFkColumn := 'TRF_PEAK_GEN_HIST_ID';
          v_targetTable := 'TRF_PEAK_GEN_BY_CUST_TYP';
     end if;
     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy')); 

     -- delete old records
     v_stmt := '
          delete from '||p_schema||'.'||v_targetTable||'';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- insert summer peak records
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' 
               ('||v_trfPeakFkColumn||',SEASON,CUST_TYP, season_cust_cnt, season_total_kva)
          select c.ID, ''S'', b.CUST_TYP, count(*), NVL(sum(b.SP_KVA_TRF_PEAK),0) 
          from 
               '||p_schema||'.'||v_trfPeakHistTable||' a, 
               '||p_schema||'.'||v_spPeakHistTable||' b,
               '||p_schema||'.'||v_trfPeakTable||' c
          where 
               a.ID = b.'||v_trfPeakHistFkColumn||' and
               c.TRF_ID = a.TRF_ID and
               a.BATCH_DATE = c.SMR_PEAK_DATE 
          group by c.ID, ''S'', b.CUST_TYP';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;

     -- insert winter peak records
     v_stmt := '
          insert into '||p_schema||'.'||v_targetTable||' 
               ('||v_trfPeakFkColumn||',SEASON,CUST_TYP, season_cust_cnt, season_total_kva)
          select c.ID, ''W'', b.CUST_TYP, count(*), NVL(sum(b.SP_KVA_TRF_PEAK),0) 
          from 
               '||p_schema||'.'||v_trfPeakHistTable||' a, 
               '||p_schema||'.'||v_spPeakHistTable||' b,
               '||p_schema||'.'||v_trfPeakTable||' c
          where 
               a.ID = b.'||v_trfPeakHistFkColumn||' and
               c.TRF_ID = a.TRF_ID and
               a.BATCH_DATE = c.WNTR_PEAK_DATE
          group by c.ID, ''W'', b.CUST_TYP';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;

     -- update monthly load log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'),SQL%ROWCOUNT);
  
     RETURN ('TRUE');

EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'migration failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'));
        
END POPULATE_TRF_PEAK_BY_CUST_TYP;

/
--------------------------------------------------------
--  DDL for Function POPULATE_TRF_PEAK_TABLE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."POPULATE_TRF_PEAK_TABLE" (
     p_schema VARCHAR2,
     endBatchDate DATE,
     p_generated VARCHAR2)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_dateStr VARCHAR(10) := to_char(endBatchDate, 'dd-mon-yy');
     v_sourceTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_targetTable VARCHAR2(50) := 'TRF_PEAK';
     v_targetTable2 VARCHAR2(50) := 'TRF_PEAK_BY_CUST_TYP';
     v_totalRowsMigrated NUMBER := 0;
BEGIN
     if p_generated = 'GEN' then
          v_sourceTable := 'TRF_PEAK_GEN_HIST';
          v_targetTable := 'TRF_PEAK_GEN';
          v_targetTable2 := 'TRF_PEAK_GEN_BY_CUST_TYP';
     end if;
     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy')); 

     -- create shell TRF_PEAK records
     v_stmt := '
          delete from '||p_schema||'.'||v_targetTable2||'';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_stmt := '
          delete from '||p_schema||'.'||v_targetTable||'';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     v_stmt := '
          insert into 
               '||p_schema||'.'||v_targetTable||' (TRF_ID) 
          select ID 
          from '||p_schema||'.TRANSFORMER a';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_totalRowsMigrated := v_totalRowsMigrated + SQL%ROWCOUNT;

     -- Determine the summer peaks.  Note that this could produce duplicate records
     -- if the peak loads are the same for two or more months
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_PEAK_SMR';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_PEAK_SMR
          select 
               a.TRF_ID, a.BATCH_DATE smr_peak_date, a.TRF_PEAK_KVA smr_kva, a.TRF_CAP smr_cap, 
               round((a.TRF_PEAK_KVA/a.TRF_CAP)*100,0) smr_pct,
               a.SM_CUST_TOTAL smr_peak_sm_cust_cnt, a.CCB_CUST_TOTAL smr_peak_total_cust_cnt
          from 
               '||p_schema||'.'||v_sourceTable||' a, 
               (
               select 
                    b.trf_id, max(b.TRF_PEAK_KVA) smr_kva from '||p_schema||'.'||v_sourceTable||' b 
               where 
                    b.BATCH_DATE > add_months(to_date('''||v_dateStr||''',''dd-mon-yy''),-12) and
                    SUBSTR((to_char(b.BATCH_DATE,''MONTH'')),1,3) in (''APR'',''MAY'',''JUN'',''JUL'',''AUG'',''SEP'',''OCT'')
               group by b.TRF_ID
               ) Y
          where 
               a.BATCH_DATE > add_months(to_date('''||v_dateStr||''',''dd-mon-yy''),-12) and
               a.TRF_ID = y.trf_id and 
               a.TRF_PEAK_KVA=y.smr_kva and
               SUBSTR((to_char(a.BATCH_DATE,''MONTH'')),1,3) in (''APR'',''MAY'',''JUN'',''JUL'',''AUG'',''SEP'',''OCT'') and
               a.trf_cap > 0 --- will this ever happen?
     '; 
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- If there are duplicate records, find the record with latest batch date
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_PEAK_SMR_2';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_PEAK_SMR_2
               select
                    a.TRF_ID, a.SMR_CAP,a.SMR_KVA,a.SMR_PCT,a.SMR_PEAK_DATE,a.SMR_PEAK_SM_CUST_CNT,a.SMR_PEAK_TOTAL_CUST_CNT 
               from 
                    CALC_TRF_PEAK_SMR a
               join
                    (
                    select 
                         c.TRF_ID, 
                         max(c.smr_peak_date) smr_peak_date 
                    from '||p_schema||'.CALC_TRF_PEAK_SMR c 
                    group by c.trf_id
                    ) b
                on 
                    a.TRF_ID=b.TRF_ID and 
                    a.SMR_PEAK_DATE=b.smr_peak_date';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
  
     -- update TRF_PEAK summer peak values
     v_stmt := '
          update 
          (
               select 
                    c.smr_peak_date old_smr_peak_date, c.smr_kva old_smr_kva, c.smr_cap old_smr_cap, c.smr_pct old_smr_pct, c.smr_peak_sm_cust_cnt old_smr_peak_sm_cust_cnt, c.smr_peak_total_cust_cnt old_smr_peak_total_cust_cnt,
                    b.smr_peak_date new_smr_peak_date, b.smr_kva new_smr_kva, b.smr_cap new_smr_cap, b.smr_pct new_smr_pct, b.smr_peak_sm_cust_cnt new_smr_peak_sm_cust_cnt, b.smr_peak_total_cust_cnt new_smr_peak_total_cust_cnt 
               from
                    '||p_schema||'.'||v_targetTable||' C,
                    '||p_schema||'.CALC_TRF_PEAK_SMR_2 B
               where 
                    C.TRF_ID = B.TRF_ID
          )
          set 
               old_smr_peak_date=new_smr_peak_date, 
               old_smr_kva=new_smr_kva, 
               old_smr_cap=new_smr_cap, 
               old_smr_pct=new_smr_pct, 
               old_smr_peak_sm_cust_cnt=new_smr_peak_sm_cust_cnt, 
               old_smr_peak_total_cust_cnt=new_smr_peak_total_cust_cnt';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;


     -- Determine the winter peaks.  Note that this could produce duplicate records
     -- if the peak loads are the same for two or more months
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_PEAK_WNTR';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_PEAK_WNTR
          select 
               a.TRF_ID, a.BATCH_DATE wntr_peak_date, a.TRF_PEAK_KVA wntr_kva, a.TRF_CAP wntr_cap, 
               round((a.TRF_PEAK_KVA/a.TRF_CAP)*100,0) wntr_pct,
               a.SM_CUST_TOTAL wntr_peak_sm_cust_cnt, a.CCB_CUST_TOTAL wntr_peak_total_cust_cnt
          from 
               '||p_schema||'.'||v_sourceTable||' a, 
               (
               select 
                    b.trf_id, max(b.TRF_PEAK_KVA) wntr_kva from '||p_schema||'.'||v_sourceTable||' b 
               where 
                    b.BATCH_DATE > add_months(to_date('''||v_dateStr||''',''dd-mon-yy''),-12) and
                    SUBSTR((to_char(b.BATCH_DATE,''MONTH'')),1,3) in (''NOV'',''DEC'',''JAN'',''FEB'',''MAR'')
               group by b.TRF_ID
               ) Y
          where 
               a.BATCH_DATE > add_months(to_date('''||v_dateStr||''',''dd-mon-yy''),-12) and
               a.TRF_ID = y.trf_id and 
               a.TRF_PEAK_KVA=y.wntr_kva and
               SUBSTR((to_char(a.BATCH_DATE,''MONTH'')),1,3) in (''NOV'',''DEC'',''JAN'',''FEB'',''MAR'') and
               a.trf_cap > 0 --- will this ever happen?
     '; 
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- If there are duplicate records, find the record with latest batch date
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_PEAK_WNTR_2';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_PEAK_WNTR_2
               select
                    a.TRF_ID, a.WNTR_CAP,a.WNTR_KVA,a.WNTR_PCT,a.WNTR_PEAK_DATE,a.WNTR_PEAK_SM_CUST_CNT,a.WNTR_PEAK_TOTAL_CUST_CNT 
               from 
                    CALC_TRF_PEAK_WNTR a
               join
                    (
                    select 
                         c.TRF_ID, 
                         max(c.wntr_peak_date) wntr_peak_date 
                    from '||p_schema||'.CALC_TRF_PEAK_WNTR c 
                    group by c.trf_id
                    ) b
                on 
                    a.TRF_ID=b.TRF_ID and 
                    a.WNTR_PEAK_DATE=b.wntr_peak_date';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
  
     -- update TRF_PEAK winter peak values
     v_stmt := '
          update 
          (
               select 
                    c.wntr_peak_date old_wntr_peak_date, c.wntr_kva old_wntr_kva, c.wntr_cap old_wntr_cap, c.wntr_pct old_wntr_pct, c.wntr_peak_sm_cust_cnt old_wntr_peak_sm_cust_cnt, c.wntr_peak_total_cust_cnt old_wntr_peak_total_cust_cnt,
                    b.wntr_peak_date new_wntr_peak_date, b.wntr_kva new_wntr_kva, b.wntr_cap new_wntr_cap, b.wntr_pct new_wntr_pct, b.wntr_peak_sm_cust_cnt new_wntr_peak_sm_cust_cnt, b.wntr_peak_total_cust_cnt new_wntr_peak_total_cust_cnt 
               from
                    '||p_schema||'.'||v_targetTable||' C,
                    '||p_schema||'.CALC_TRF_PEAK_WNTR_2 B
               where 
                    C.TRF_ID = B.TRF_ID
          )
          set 
               old_wntr_peak_date=new_wntr_peak_date, 
               old_wntr_kva=new_wntr_kva, 
               old_wntr_cap=new_wntr_cap, 
               old_wntr_pct=new_wntr_pct, 
               old_wntr_peak_sm_cust_cnt=new_wntr_peak_sm_cust_cnt, 
               old_wntr_peak_total_cust_cnt=new_wntr_peak_total_cust_cnt';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- update Data Start Date
     v_stmt := '
          truncate table '||p_schema||'.calc_trf_data_start_date';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := '
          insert into '||p_schema||'.calc_trf_data_start_date
          select 
               trf_id, 
               min(BATCH_DATE) data_start_date 
          from '||p_schema||'.'||v_sourceTable||' 
          group by trf_id';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := '
          update
          (
               select a.data_start_date old_data_start_date, b.data_start_date new_data_start_date
               from
                    '||p_schema||'.'||v_targetTable||' a,
                    '||p_schema||'.CALC_TRF_DATA_START_DATE b
               where
                    a.trf_id = b.trf_id
          )
          set
               old_data_start_date = new_data_start_date';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- delete TRFs with null winter and summer timestamp
     v_stmt := '
          delete from 
               '||p_schema||'.'||v_targetTable||'
          where 
               SMR_PEAK_DATE is null and WNTR_PEAK_DATE is null';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     -- deduct rows deleted from total count
     v_totalRowsMigrated := v_totalRowsMigrated - SQL%ROWCOUNT;
     
     -- update monthly load log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'),v_totalRowsMigrated);

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => '''||v_targetTable||''',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;  
     
     RETURN ('TRUE');

EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'migration failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=POPULATE_'||v_targetTable||'_'||to_char(endBatchDate,'mmddyyyy'));
        
END POPULATE_TRF_PEAK_TABLE;

/
--------------------------------------------------------
--  DDL for Function UPDATE_TRF_PEAK_HIST
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."UPDATE_TRF_PEAK_HIST" (
     p_schema VARCHAR2,
     batchDate DATE,
     p_generated VARCHAR2)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_batchDateStr VARCHAR2(10) := to_char(batchDate, 'dd-mon-yy');
     v_sourceTable VARCHAR2(50) := 'SP_PEAK_HIST';
     v_targetTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_targetTableFkColumn VARCHAR2(50) := 'TRF_PEAK_HIST_ID';
BEGIN 
     if p_generated = 'GEN' then
          v_sourceTable := 'SP_PEAK_GEN_HIST';
          v_targetTable := 'TRF_PEAK_GEN_HIST';
          v_targetTableFkColumn := 'TRF_PEAK_GEN_HIST_ID';
     end if;
     
     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('UPDATE_'||v_targetTable||'_'||to_char(batchDate,'mmddyyyy')); 

     -- truncate work tables
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_SMART_COUNT';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_PEAK_HIST';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => '''||v_sourceTable||''',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;     
          
     -- insert into work tables
     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_SMART_COUNT
          SELECT 
               b.'||v_targetTableFkColumn||',  b.SM_FLG,  COUNT(*) sm_count
          FROM 
               '||p_schema||'.'||v_sourceTable||' b
          WHERE 
               b.SM_FLG = ''S''
          GROUP BY b.'||v_targetTableFkColumn||', b.SM_FLG';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- gather stats
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''CALC_TRF_SMART_COUNT'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_PEAK_HIST
               select a.'||v_targetTableFkColumn||', 
               sum(a.SP_KVA_TRF_PEAK) total_trf_peak_kva, 
               count(*) all_count, 
               c.sm_count 
          from
               '||p_schema||'.'||v_targetTable||' d, 
               '||p_schema||'.TRANSFORMER e,
               '||p_schema||'.'||v_sourceTable||' a
                    left outer join
                         '||p_schema||'.CALC_TRF_SMART_COUNT c
                    on c.TRF_PEAK_HIST_ID = a.'||v_targetTableFkColumn||'
          where 
               a.'||v_targetTableFkColumn||'=d.ID  and
               d.TRF_ID=e.ID and
               d.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')
          group by a.'||v_targetTableFkColumn||', c.sm_count          
          ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- gather stats 
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => '''||v_targetTable||''',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     v_stmt := '
          call DBMS_STATS.GATHER_TABLE_STATS (
  	  	       ownname => '''||p_schema||''',
               tabname => ''CALC_TRF_PEAK_HIST'',
               estimate_percent => 1
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- update TRF_PEAK_HIST
     v_stmt := '
          update '||p_schema||'.'||v_targetTable||' a set
               a.TRF_PEAK_KVA = NVL((select b.TOTAL_TRF_PEAK_KVA from CALC_TRF_PEAK_HIST b where a.ID = b.TRF_PEAK_HIST_ID),0),
               a.CCB_CUST_TOTAL = NVL((select b.ALL_COUNT from CALC_TRF_PEAK_HIST b where a.ID = b.TRF_PEAK_HIST_ID),0),
               a.SM_CUST_TOTAL = NVL((select b.sm_count from CALC_TRF_PEAK_HIST b where a.ID = b.TRF_PEAK_HIST_ID),0)
          where 
               a.batch_date=to_date('''||v_batchDateStr||''',''dd-mon-yy'')
          ';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- update migration log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('UPDATE_'||v_targetTable||'_'||to_char(batchDate,'mmddyyyy'),SQL%ROWCOUNT);
  
     RETURN ('TRUE');
EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('UPDATE_'||v_targetTable||'_'||to_char(batchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'migration failed.  Please check entry in MONTHLY_LOAD_LOG for tablename=UPDATE_'||v_targetTable||'_'||to_char(batchDate,'mmddyyyy'));
        
END UPDATE_TRF_PEAK_HIST;

/
--------------------------------------------------------
--  DDL for Function UPDATE_TRF_PEAK_HIST_CAP
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."UPDATE_TRF_PEAK_HIST_CAP" (
     p_schema VARCHAR2,
     batchDate Date,
     p_generated VARCHAR2)
RETURN VARCHAR2
IS
     v_returVal VARCHAR2(10);
     v_stmt VARCHAR2(2000);
     v_log_status VARCHAR2(10);
     v_batchMonth VARCHAR2(10);
     v_season VARCHAR2(1);
     v_batchDateStr VARCHAR2(10) := to_char(batchDate, 'dd-mon-yy');
     v_sourceTable VARCHAR2(50) := 'SP_PEAK_HIST';
     v_targetTable VARCHAR2(50) := 'TRF_PEAK_HIST';
     v_targetTableFkColumn VARCHAR2(50) := 'TRF_PEAK_HIST_ID';
BEGIN
     if p_generated = 'GEN' then
          v_sourceTable := 'SP_PEAK_GEN_HIST';
          v_targetTable := 'TRF_PEAK_GEN_HIST';
          v_targetTableFkColumn := 'TRF_PEAK_GEN_HIST_ID';
     end if;

     --determine season
     v_batchMonth := SUBSTR((to_char(batchDate,'MONTH')),1,3);
     if (upper(v_batchMonth) in ('NOV','DEC','JAN','FEB','MAR')) then 
          v_season := 'W';
     else
          v_season := 'S';
     end if;
     DBMS_OUTPUT.PUT_LINE('SEASON - '||v_season);

     -- create monthly load log record 
     v_log_status := INSERT_MONTHLY_LOAD_LOG('UPDATE_'||v_targetTable||'_CAP_'||to_char(batchDate,'mmddyyyy')); 

     -- truncate work tables
     v_stmt := '
          truncate table '||p_schema||'.CALC_TRF_HIST_CAP';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     v_stmt := '
          truncate table '||p_schema||'.CALC_CUST_TYP_TOTAL_KVA';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
          
     -- insert into work tables
     v_stmt := '
          insert into '||p_schema||'.CALC_TRF_HIST_CAP (TRF_PEAK_HIST_ID)
               select a.ID 
               from 
                    '||p_schema||'.'||v_targetTable||' a
               where 
                    a.BATCH_DATE = to_date('''||v_batchDateStr||''',''dd-mon-yy'')';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     v_stmt := '
          insert into '||p_schema||'.CALC_CUST_TYP_TOTAL_KVA
               select 
                    a.'||v_targetTableFkColumn||', 
                    ''DOMESTIC'' cust_typ, 
                    sum(a.SP_KVA_TRF_PEAK) total_kva
               from 
                    '||p_schema||'.'||v_sourceTable||' a, 
                    '||p_schema||'.'||v_targetTable||' b 
               where 
                    a.'||v_targetTableFkColumn||' = b.ID and
                    b.BATCH_DATE =  to_date('''||v_batchDateStr||''',''dd-mon-yy'') and
                    a.CUST_TYP = ''DOM'' 
               group by a.'||v_targetTableFkColumn||'
               union all
               select 
                    a.'||v_targetTableFkColumn||', 
                    ''NON_DOMESTIC'' cust_typ, 
                    sum(a.SP_KVA_TRF_PEAK) total_kva
               from 
                    '||p_schema||'.'||v_sourceTable||' a, 
                    '||p_schema||'.'||v_targetTable||' b 
               where 
                    a.'||v_targetTableFkColumn||' = b.ID and
                    b.BATCH_DATE =  to_date('''||v_batchDateStr||''',''dd-mon-yy'') and
                    a.CUST_TYP <> ''DOM'' 
               group by a.'||v_targetTableFkColumn||'';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
                  
     -- update TRF_PEAK_HIST
     -- set residential total KVA
     v_stmt := '
          update '||p_schema||'.CALC_TRF_HIST_CAP a set 
               DOM_TOTAL_KVA = 
                    NVL
                    (
                          (
                          select 
                               b.total_kva 
                          from 
                               '||p_schema||'.CALC_CUST_TYP_TOTAL_KVA b
                          where 
                               a.TRF_PEAK_HIST_ID = b.TRF_PEAK_HIST_ID and
                               b.CUST_TYP=''DOMESTIC''
                          ),
                          0
                     )';     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- set non-residential total KVA
     v_stmt := '
          update '||p_schema||'.CALC_TRF_HIST_CAP a set 
               NON_DOM_TOTAL_KVA = 
                    NVL
                    (
                          (
                          select 
                               b.total_kva 
                          from 
                               '||p_schema||'.CALC_CUST_TYP_TOTAL_KVA b
                          where 
                               a.TRF_PEAK_HIST_ID = b.TRF_PEAK_HIST_ID and
                               b.CUST_TYP=''NON_DOMESTIC''
                          ),
                          0
                     )';     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     --if residential has more load overall than non-residential, set CUST_TYP_WITH_GREATER_LOAD to 'DOMESTIC'
     v_stmt := '
          update '||p_schema||'.CALC_TRF_HIST_CAP a set 
               a.CUST_TYP_WITH_GREATER_LOAD = ''DOMESTIC''
          where 
               a.DOM_TOTAL_KVA > a.NON_DOM_TOTAL_KVA';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- calculate name plate total kva
     v_stmt := '    
          update '||p_schema||'.CALC_TRF_HIST_CAP a set 
          a.TRF_NP_TOTAL_KVA = 
          NVL
          (
               (
               select b.TOTAL_NP_CAP 
               from (
                    select 
                         a.ID '||v_targetTableFkColumn||', 
                         sum(c.NP_KVA) TOTAL_NP_CAP 
                    from 
                         '||p_schema||'.'||v_targetTable||' a,
                         '||p_schema||'.TRANSFORMER b,
                         '||p_schema||'.TRANSFORMER_BANK c
                    where 
                         a.TRF_ID = b.ID and
                         c.TRF_ID = b.ID
                    group by a.ID
                    ) b
               where 
                    a.TRF_PEAK_HIST_ID = b.'||v_targetTableFkColumn||'
               ),
               0
          )';
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;

     -- finally, update TRF_PEAK_HIST.TRF_CAP
     v_stmt := '    
          update '||p_schema||'.'||v_targetTable||' x set
          TRF_CAP = 
          NVL
          (
               (
               select y.trf_cap 
               from (
                    select 
                         b.ID, 
                         a.TRF_NP_TOTAL_KVA*decode(a.CUST_TYP_WITH_GREATER_LOAD,''DOMESTIC'', d.CAP_MULTIPLIER_A, d.CAP_MULTIPLIER_B) trf_cap
                    from 
                         '||p_schema||'.CALC_TRF_HIST_CAP a,
                         '||p_schema||'.'||v_targetTable||' b,
                         '||p_schema||'.TRANSFORMER c,
                         '||p_schema||'.TRF_NP_CAP_MULT d
                    where
                         a.TRF_PEAK_HIST_ID = b.id and
                         b.TRF_ID = c.ID and
                         d.SEASON = '''||v_season||''' and
                         a.TRF_NP_TOTAL_KVA >= d.KVA_LOW and
                         a.TRF_NP_TOTAL_KVA <= d.KVA_HIGH and
                         d.PHASE_CD = c.PHASE_CD and
                         d.INSTALLATION_TYP = c.INSTALLATION_TYP and
                         d.COAST_INTERIOR_FLG = c.COAST_INTERIOR_FLG
                    ) Y
               where 
                    x.id = y.id
               ),
               0
          )
          where x.BATCH_DATE = to_date('''||v_batchDateStr||''',''dd-mon-yy'')';     
     DBMS_OUTPUT.PUT_LINE('DEBUG - '||v_stmt);
     execute immediate v_stmt;
     
     -- update migration log record
     v_log_status := LOG_MONTHLY_LOAD_SUCCESS('UPDATE_'||v_targetTable||'_CAP_'||to_char(batchDate,'mmddyyyy'),SQL%ROWCOUNT);
  
     RETURN ('TRUE');
EXCEPTION
     WHEN OTHERS THEN
          v_log_status := LOG_MONTHLY_LOAD_ERROR('UPDATE_'||v_targetTable||'_CAP_'||to_char(batchDate,'mmddyyyy'), sqlerrm);
          raise_application_error (-20001, 'migration failed.  Please check entry in MIGRATION_LOG for tablename=UPDATE_'||v_targetTable||'_CAP_'||to_char(batchDate, 'mmddyyyy'));
        
END UPDATE_TRF_PEAK_HIST_CAP;

/
--------------------------------------------------------
--  DDL for Function UPD_MONTHLY_LOAD_LOG_STARTDATE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "EDTLM"."UPD_MONTHLY_LOAD_LOG_STARTDATE" (TABLE_NAME VARCHAR2) RETURN VARCHAR2 
AS 
BEGIN 
DBMS_OUTPUT.PUT_LINE('DEBUG - TABLE NAME: '||TABLE_NAME); 
UPDATE EDTLM.MONTHLY_LOAD_LOG 
    SET 
    LOAD_START_TS             = sysdate 
    WHERE TABLE_NAME          = TABLE_NAME; 
COMMIT; 
RETURN 'SUCCESS'; 
END UPD_MONTHLY_LOAD_LOG_STARTDATE;

/
--------------------------------------------------------
--  DDL for Package TLM_CD_MGMT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "EDTLM"."TLM_CD_MGMT" AS 
procedure ProcessXML(XmlContent varchar2
--,ErrorMessage OUT VARCHAR2,IsSuccess OUT CHAR
);
procedure LogErrors(GLOBALID varchar2,
          ERRORCODE varchar2,
          ERRORMSG varchar2,
          TRANSDATE timestamp,
          TRANSTYPE char,
          APPTYPE char,PROCFOR varchar2);
END TLM_CD_MGMT;

/

  GRANT EXECUTE ON "EDTLM"."TLM_CD_MGMT" TO "GIS_I";
--------------------------------------------------------
--  DDL for Package TLM_CD_MGMT_MONTHLY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "EDTLM"."TLM_CD_MGMT_MONTHLY" 
AS
  /* TODO enter package declarations (types, exceptions, methods etc) here */
  PROCEDURE TRANSFORMER_MGMT(
      FromDate DATE,
      ToDate   DATE,
      ErrorMsg OUT VARCHAR2,
      ErrorCode OUT VARCHAR2 );
  PROCEDURE TRANSFORMER_BANK_MGMT(
      FromDate DATE,
      ToDate   DATE,
      ErrorMsg OUT VARCHAR2,
      ErrorCode OUT VARCHAR2 );
  PROCEDURE METER_MGMT(
      FromDate DATE,
      ToDate   DATE,
      ErrorMsg OUT VARCHAR2,
      ErrorCode OUT VARCHAR2 );
  PROCEDURE LOG_ERRORS(
      GLOBALID  VARCHAR2,
      ERRORCODE VARCHAR2,
      ERRORMSG  VARCHAR2,
      TRANSDATE TIMESTAMP,
      TRANSTYPE CHAR,
      APPTYPE   CHAR,
      PROCEDUREFOR VARCHAR2);
END TLM_CD_MGMT_MONTHLY;

/
--------------------------------------------------------
--  DDL for Package Body TLM_CD_MGMT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "EDTLM"."TLM_CD_MGMT" 
AS
PROCEDURE ProcessXML(
    XmlContent varchar2
    --,ErrorMessage OUT VARCHAR2,
    --IsSuccess OUT CHAR
    )
AS
  DB_ERROR_CODE VARCHAR2(20);
  DB_ERROR_MSG  VARCHAR2(200);
  AppType       CHAR(1);
  ProcessFor    VARCHAR2(20);
  XmlFile XmlType;

BEGIN
 -- ErrorMessage:='';
 -- IsSuccess   :='S';
  AppType     :='D';
  ProcessFor  := 'Transformer';
   XmlFile := XMLType(XmlContent);
  -----------Transformer-------------------------
  FOR r IN
  (SELECT ExtractValue(Value(p),'/ROW/CGC12/text()')       AS CGC_ID,
    ExtractValue(Value(p),'/ROW/GLOBALID/text()')          AS GLOBAL_ID,
    ExtractValue(Value(p),'/ROW/COASTALIDC/text()') AS COAST_INTERIOR_FLG,
    ExtractValue(Value(p),'/ROW/CLIMATEZONE/text()')     AS CLIMATE_ZONE_CD,
    ExtractValue(Value(p),'/ROW/NUMBEROFPHASES/text()')           AS PHASE_CD,
    ExtractValue(Value(p),'/ROW/INSTALLATIONTYPE/text()')  AS INSTALLATION_TYP,
    ExtractValue(Value(p),'/ROW/@TRANSACTIONTYPE')                  AS TRANS_TYPE,
    ExtractValue(Value(p),'/ROW/DATEMODIFIED/text()')   AS TRANS_DATE,
    ExtractValue(Value(p),'/ROW/GLOBALIDPREVIOUS/text()')  AS OLD_GLOBAL_ID
  FROM TABLE(XMLSequence(Extract(XmlFile,'/ENTITIES/ENTITY[@TYPE=''TRANSFORMER'']/ROW'))) p
  )
  LOOP

    BEGIN

      INSERT
      INTO cd_transformer
        (
          cgc_id,
          global_id,
          coast_interior_flg,
          climate_zone_cd,
          phase_cd,
          installation_typ,
          --region,
          trans_type,
          trans_date,
          old_global_id
        )
        VALUES
        (
          to_number(r.cgc_id),
          r.global_id,
          case r.coast_interior_flg when 'Y' then 1 when 'N' then 0  else null end,
          r.climate_zone_cd,
          to_number(r.phase_cd),
          r.installation_typ,
          --to_number(r.region),
          r.trans_type,
          to_timestamp(r.trans_date,'MM/DD/YYYY HH:MI:SS AM'),
          --CURRENT_TIMESTAMP,
          r.old_global_id
        );
      --IsSuccess:='S';
    EXCEPTION
    WHEN OTHERS THEN
  --    IsSuccess    := 'N';
  --    ErrorMessage :='ERROR CODE: ' || SQLCODE || ' ERROR MESSAGE: ' || SQLERRM;
      DB_ERROR_CODE:=SUBSTR(SQLCODE,1,20);
      DB_ERROR_MSG :=SUBSTR(SQLERRM,1,200);
      LogErrors(r.global_id, DB_ERROR_CODE, DB_ERROR_MSG, to_timestamp(r.trans_date,'MM/DD/YYYY HH:MI:SS AM'), r.trans_type, AppType,ProcessFor);
      CONTINUE;
    END;
  END LOOP;
  ---------------Transformer bank-----------------------------
  ProcessFor:='Transformer Bank';
  FOR r IN
  (SELECT ExtractValue(Value(p),'/ROW/TRANSFORMERGUID/text()')  AS TRF_GLOBAL_ID,
      ExtractValue(Value(p),'/ROW/BANKCODE/text()')           AS BANK_CD,
      ExtractValue(Value(p),'/ROW/RATEDKVA/text()')            AS NP_KVA,
      ExtractValue(Value(p),'/ROW/GLOBALID/text()')         AS GLOBAL_ID,
      ExtractValue(Value(p),'/ROW/NUMBEROFPHASES/text()')          AS PHASE_CD,
      ExtractValue(Value(p),'/ROW/@TRANSACTIONTYPE')  AS TRANS_TYPE,
      ExtractValue(Value(p),'/ROW/DATEMODIFIED/text()')  AS TRANS_DATE,
      ExtractValue(Value(p),'/ROW/GLOBALIDPREVIOUS/text()') AS OLD_GLOBAL_ID
    FROM TABLE(XMLSequence(Extract(XmlFile,'/ENTITIES/ENTITY[@TYPE=''TRANSFORMERUNIT'']/ROW'))) p
  )
  LOOP
    BEGIN
      INSERT
      INTO CD_TRANSFORMER_BANK
        (
          TRF_GLOBAL_ID,
          BANK_CD,
          NP_KVA,
          GLOBAL_ID,
          PHASE_CD,
          TRANS_TYPE,
          TRANS_DATE,
          OLD_GLOBAL_ID
        )
        VALUES
        (
          r.TRF_GLOBAL_ID,
          to_number(r.BANK_CD),
          to_number(r.NP_KVA),
          r.GLOBAL_ID,
          to_number(r.PHASE_CD),
          r.TRANS_TYPE,
          to_timestamp(r.TRANS_DATE,'MM/DD/YYYY HH:MI:SS AM'),
          r.OLD_GLOBAL_ID
        );
      --IsSuccess:='S';
    EXCEPTION
    WHEN OTHERS THEN
    --  IsSuccess    := 'N';
    --  ErrorMessage :='ERROR CODE: ' || SQLCODE || ' ERROR MESSAGE: ' || SQLERRM;
      DB_ERROR_CODE:=SUBSTR(SQLCODE,1,20);
      DB_ERROR_MSG :=SUBSTR(SQLERRM,1,200);
      LogErrors(r.global_id, DB_ERROR_CODE, DB_ERROR_MSG, to_timestamp(r.trans_date,'MM/DD/YYYY HH:MI:SS AM'), r.trans_type, AppType,ProcessFor);
      CONTINUE;
    END;
  END LOOP;
  --------------Meter -----------------------------
  ProcessFor:='Meter';
  FOR r IN
  (SELECT ExtractValue(Value(p),'/ROW/TRANSFORMERGUID/text()')  AS TRF_GLOBAL_ID,
      ExtractValue(Value(p),'/ROW/GLOBALID/text()')         AS GLOBAL_ID,
      ExtractValue(Value(p),'/ROW/SERVICEPOINTID/text()')   AS SERVICE_POINT_ID,
      ExtractValue(Value(p),'/ROW/UNIQUESPID/text()')          AS UNQSPID,
      ExtractValue(Value(p),'/ROW/REVENUEACCOUNTCODE/text()')        AS REV_ACCT_CD,
      ExtractValue(Value(p),'/ROW/STREETNUMBER/text()')         AS SVC_ST_NUM,
      ExtractValue(Value(p),'/ROW/STREETNAME1/text()')        AS SVC_ST_NAME,
      ExtractValue(Value(p),'/ROW/STREETNAME2/text()')       AS SVC_ST_NAME2,
      ExtractValue(Value(p),'/ROW/CITY/text()')          AS SVC_CITY,
      ExtractValue(Value(p),'/ROW/STATE/text()')         AS SVC_STATE,
      ExtractValue(Value(p),'/ROW/ZIP/text()')           AS SVC_ZIP,
      ExtractValue(Value(p),'/ROW/CUSTOMERTYPE/text()')         AS CUST_TYP,
      ExtractValue(Value(p),'/ROW/RATESCHEDULE/text()')        AS RATE_SCHED,
      ExtractValue(Value(p),'/ROW/SMFLAG/text()')           AS SM_FLG,
      ExtractValue(Value(p),'/ROW/METERNUMBER/text()')      AS METER_NUMBER,
      ExtractValue(Value(p),'/ROW/@TRANSACTIONTYPE')  AS TRANS_TYPE,
      ExtractValue(Value(p),'/ROW/DATEMODIFIED/text()')  AS TRANS_DATE,
      ExtractValue(Value(p),'/ROW/GLOBALIDPREVIOUS/text()') AS OLD_GLOBAL_ID
    FROM TABLE(XMLSequence(Extract(XmlFile,'/ENTITIES/ENTITY[@TYPE=''SERVICEPOINT'']/ROW'))) p
  )
  LOOP
    BEGIN
      INSERT
      INTO CD_METER
        (
          SERVICE_POINT_ID,
          UNQSPID,
          TRF_GLOBAL_ID,
          REV_ACCT_CD,
          SVC_ST_NUM,
          SVC_ST_NAME,
          SVC_ST_NAME2,
          SVC_CITY,
          SVC_STATE,
          SVC_ZIP,
          CUST_TYP,
          RATE_SCHED,
          GLOBAL_ID,
          SM_FLG,
          METER_NUMBER,
          TRANS_TYPE,
          TRANS_DATE,
          OLD_GLOBAL_ID
        )
        VALUES
        (
          r.SERVICE_POINT_ID,
          r.UNQSPID,
          r.TRF_GLOBAL_ID,
          r.REV_ACCT_CD,
          r.SVC_ST_NUM,
          r.SVC_ST_NAME,
          r.SVC_ST_NAME2,
          r.SVC_CITY,
          r.SVC_STATE,
          r.SVC_ZIP,
          r.CUST_TYP,
          r.RATE_SCHED,
          r.GLOBAL_ID,
          TRIM(r.SM_FLG),
          r.METER_NUMBER,
          r.TRANS_TYPE,
          to_timestamp(r.TRANS_DATE,'MM/DD/YYYY HH:MI:SS AM'),
          r.OLD_GLOBAL_ID
        );
      --IsSuccess:='S';
    EXCEPTION
    WHEN OTHERS THEN
      --IsSuccess    := 'N';
      --ErrorMessage :='ERROR CODE: ' || SQLCODE || ' ERROR MESSAGE: ' || SQLERRM;
      DB_ERROR_CODE:=SUBSTR(SQLCODE,1,20);
      DB_ERROR_MSG :=SUBSTR(SQLERRM,1,200);
      LogErrors(r.global_id, DB_ERROR_CODE, DB_ERROR_MSG, to_timestamp(r.trans_date,'MM/DD/YYYY HH:MI:SS AM'), r.trans_type, AppType,ProcessFor);
      CONTINUE;
    END;
  END LOOP;
END ProcessXML;
PROCEDURE LogErrors
  (
    GLOBALID  VARCHAR2,
    ERRORCODE VARCHAR2,
    ERRORMSG  VARCHAR2,
    TRANSDATE TIMESTAMP,
    TRANSTYPE CHAR,
    APPTYPE   CHAR,
    PROCFOR   VARCHAR2
  )
AS
BEGIN
  INSERT
  INTO CD_ERRORS
    (
      GLOBAL_ID,
      ERROR_CODE,
      ERROR_MSG,
      TRANS_DATE,
      TRANS_TYPE,
      CREATE_DTM,
      APP_TYPE,
      PROC_FOR
    )
    VALUES
    (
      GLOBALID,
      ERRORCODE,
      ERRORMSG,
      transdate,
      TRANSTYPE,
      CURRENT_TIMESTAMP,
      APPTYPE,
      PROCFOR
    );
END;
END TLM_CD_MGMT;

/

  GRANT EXECUTE ON "EDTLM"."TLM_CD_MGMT" TO "GIS_I";
--------------------------------------------------------
--  DDL for Package Body TLM_CD_MGMT_MONTHLY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "EDTLM"."TLM_CD_MGMT_MONTHLY" 
AS
  AppType CHAR(1);
  ProcedureFor varchar2(20);
  NoOfRows number;
  Old_Service_Point_Id VARCHAR2(10);
PROCEDURE TRANSFORMER_MGMT(
    FromDate DATE,
    ToDate   DATE,
    ErrorMsg OUT VARCHAR2,
    ErrorCode OUT VARCHAR2 )
AS
BEGIN
  ErrorMsg  := '';
  ErrorCode :='';
  AppType   :='M';
  /* get all rows from change detection stage table where transaction types are update,replace or delete */
  DECLARE
    CURSOR c_cd_transformer
    IS
      SELECT *
      FROM cd_transformer
      WHERE TRANS_TYPE IN ('I','D','U','R') AND PROC_FLG IS NULL
        --AND (TRANS_DATE BETWEEN FromDate AND ToDate)
      ORDER BY Id;
  BEGIN
    FOR cd_trf_rec IN c_cd_transformer
    LOOP
      BEGIN
        IF cd_trf_rec.trans_type='I' THEN
          INSERT
          INTO TRANSFORMER
            (
              CGC_ID,
              GLOBAL_ID,
              COAST_INTERIOR_FLG,
              CLIMATE_ZONE_CD,
              PHASE_CD,
              INSTALLATION_TYP,
              REGION
            )
            VALUES
            (
              cd_trf_rec.CGC_ID,
              cd_trf_rec.GLOBAL_ID,
              cd_trf_rec.COAST_INTERIOR_FLG,
              cd_trf_rec.CLIMATE_ZONE_CD,
              cd_trf_rec.PHASE_CD,
              cd_trf_rec.INSTALLATION_TYP,
              NULL
            );
        END IF;
        IF cd_trf_rec.trans_type='U' THEN
          UPDATE TRANSFORMER
          SET CGC_ID               = cd_trf_rec.CGC_ID,
            COAST_INTERIOR_FLG     = cd_trf_rec.COAST_INTERIOR_FLG,
            CLIMATE_ZONE_CD        = cd_trf_rec.CLIMATE_ZONE_CD,
            PHASE_CD               = cd_trf_rec.PHASE_CD,
            INSTALLATION_TYP       = cd_trf_rec.INSTALLATION_TYP
          WHERE GLOBAL_ID          = cd_trf_rec.GLOBAL_ID;
        elsif cd_trf_rec.trans_type='R' THEN
          UPDATE TRANSFORMER
          SET CGC_ID               = cd_trf_rec.CGC_ID,
            GLOBAL_ID              = cd_trf_rec.GLOBAL_ID,
            COAST_INTERIOR_FLG     = cd_trf_rec.COAST_INTERIOR_FLG,
            CLIMATE_ZONE_CD        = cd_trf_rec.CLIMATE_ZONE_CD,
            PHASE_CD               = cd_trf_rec.PHASE_CD,
            INSTALLATION_TYP       = cd_trf_rec.INSTALLATION_TYP
          WHERE GLOBAL_ID          = cd_trf_rec.OLD_GLOBAL_ID;
        elsif cd_trf_rec.trans_type='D' THEN
          UPDATE TRANSFORMER SET REC_STATUS = 'D' WHERE GLOBAL_ID=cd_trf_rec.GLOBAL_ID;
        ELSE
          NULL;
        END IF;
        COMMIT;
        SELECT COUNT(*) into NoOfRows FROM TRANSFORMER T WHERE T.GLOBAL_ID = CD_TRF_REC.GLOBAL_ID;
        IF NoOfRows>0 THEN
          UPDATE CD_TRANSFORMER T SET PROC_FLG='P' WHERE T.ID= cd_trf_rec.ID;
        END IF;
        
        COMMIT;
      EXCEPTION
      WHEN OTHERS THEN
        ErrorCode := SQLCODE;
        ErrorMsg  := SUBSTR(SQLERRM,1,200);
        LOG_ERRORS(cd_trf_rec.global_id,ErrorCode,ErrorMsg,to_timestamp(nvl(cd_trf_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), 
        cd_trf_rec.trans_type,AppType,ProcedureFor);
        continue;
      END;
    END LOOP;
  END;
END TRANSFORMER_MGMT;
PROCEDURE TRANSFORMER_BANK_MGMT(
    FromDate DATE,
    ToDate   DATE,
    ErrorMsg OUT VARCHAR2,
    ErrorCode OUT VARCHAR2 )
AS
  transformer_id NUMBER;
  
BEGIN
  ErrorMsg  := '';
  ErrorCode :='';
  AppType   :='M';
  ProcedureFor:='TRF-BANK';
  /* get all rows from change detection stage table where transaction types are update,replace or delete */
  DECLARE
    CURSOR c_cd_transformer_bank
    IS
      SELECT *
      FROM cd_transformer_bank
      WHERE TRANS_TYPE IN ('I','D','U','R') AND PROC_FLG IS NULL
        --AND (TRANS_DATE BETWEEN FromDate AND ToDate)
      ORDER BY Id;
  BEGIN
    FOR cd_trf_bank_rec IN c_cd_transformer_bank
    LOOP
      BEGIN
        IF cd_trf_bank_rec.TRF_GLOBAL_ID IS NULL THEN
          LOG_ERRORS(cd_trf_bank_rec.global_id,'CD-TRF-BANK-1','Transformer''s Global Id is null!',
          to_timestamp(nvl(cd_trf_bank_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), cd_trf_bank_rec.trans_type,AppType,ProcedureFor);
        ELSE
          begin
            SELECT ID
            INTO transformer_id
            FROM TRANSFORMER
            WHERE GLOBAL_ID    =cd_trf_bank_rec.TRF_GLOBAL_ID;
          exception
            when no_data_found then
              transformer_id:=0;
              LOG_ERRORS(cd_trf_bank_rec.global_id,'CD-TRF-BANK-2','No Transformer Id found in Transformer table for Transformer Global Id:' || cd_trf_bank_rec.TRF_GLOBAL_ID, 
            to_timestamp(nvl(cd_trf_bank_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), cd_trf_bank_rec.trans_type,AppType,ProcedureFor);
            continue;
          end;
        END IF;
        IF cd_trf_bank_rec.trans_type='I' THEN
          INSERT
          INTO TRANSFORMER_BANK
            (
              TRF_ID,
              BANK_CD,
              NP_KVA,
              GLOBAL_ID,
              PHASE_CD
            )
            VALUES
            (
              transformer_id,
              cd_trf_bank_rec.BANK_CD,
              cd_trf_bank_rec.NP_KVA,
              cd_trf_bank_rec.GLOBAL_ID,
              cd_trf_bank_rec.PHASE_CD
            );
        END IF;
        IF cd_trf_bank_rec.trans_type='U' THEN
          UPDATE TRANSFORMER_BANK
          SET TRF_ID                    =transformer_Id,
            BANK_CD                     = cd_trf_bank_rec.BANK_CD,
            NP_KVA                      = cd_trf_bank_rec.NP_KVA,
            PHASE_CD                    = cd_trf_bank_rec.PHASE_CD
          WHERE GLOBAL_ID               = cd_trf_bank_rec.GLOBAL_ID;
        elsif cd_trf_bank_rec.trans_type='R' THEN
          UPDATE TRANSFORMER_BANK
          SET TRF_ID                    = transformer_id,
            BANK_CD                     = cd_trf_bank_rec.BANK_CD,
            NP_KVA                      = cd_trf_bank_rec.NP_KVA,
            PHASE_CD                    = cd_trf_bank_rec.PHASE_CD,
            GLOBAL_ID                   = cd_trf_bank_rec.GLOBAL_ID
          WHERE GLOBAL_ID               = cd_trf_bank_rec.OLD_GLOBAL_ID;
        elsif cd_trf_bank_rec.trans_type='D' THEN
          UPDATE TRANSFORMER_BANK
          SET REC_STATUS = 'D'
          WHERE GLOBAL_ID=cd_trf_bank_rec.GLOBAL_ID;
        ELSE
          NULL;
        END IF;
        COMMIT;
        SELECT COUNT(*) into NoOfRows FROM TRANSFORMER_BANK B WHERE B.GLOBAL_ID = CD_TRF_BANK_REC.GLOBAL_ID;
        IF NoOfRows>0 THEN
          UPDATE CD_TRANSFORMER_BANK B SET B.PROC_FLG='P' WHERE B.ID=cd_trf_bank_rec.ID;
        END IF;
        COMMIT;
      EXCEPTION
      WHEN OTHERS THEN
        ErrorCode := SQLCODE;
        ErrorMsg  := SUBSTR(SQLERRM,1,200);
        LOG_ERRORS(cd_trf_bank_rec.global_id,ErrorCode,ErrorMsg,to_timestamp(nvl(cd_trf_bank_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), 
        cd_trf_bank_rec.trans_type,AppType,ProcedureFor);
        continue;
      END;
    END LOOP;
  END;
END TRANSFORMER_BANK_MGMT;
/* CHANGE DETECTION PROCEDURE FOR METER  */
PROCEDURE METER_MGMT(
    FromDate DATE,
    ToDate   DATE,
    ErrorMsg OUT VARCHAR2,
    ErrorCode OUT VARCHAR2 )
AS
  transformer_id NUMBER;
  
BEGIN
  ErrorMsg  := '';
  ErrorCode :='';
  AppType   :='M';
  ProcedureFor:='METER';
  /* get all rows from change detection stage table where transaction types are update,replace or delete */
  DECLARE
    CURSOR c_cd_meter
    IS
      SELECT *
      FROM cd_meter
      WHERE TRANS_TYPE IN ('I','D','U','R') AND PROC_FLG IS NULL
        --AND (TRANS_DATE BETWEEN FromDate AND ToDate)
      ORDER BY Id;
  BEGIN
    FOR cd_meter_rec IN c_cd_meter
    LOOP
      BEGIN
        IF cd_meter_rec.TRF_GLOBAL_ID IS NULL THEN
          LOG_ERRORS(cd_meter_rec.global_id,'CD-METER-1','Transformer''s Global Id is null!',to_timestamp(nvl(cd_meter_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), 
          cd_meter_rec.trans_type,AppType,ProcedureFor);
        ELSE
          begin
          
            SELECT ID
              INTO transformer_id
              FROM TRANSFORMER
              WHERE GLOBAL_ID =cd_meter_rec.TRF_GLOBAL_ID;
          exception
            when no_data_found then
              transformer_id:=0;
              LOG_ERRORS(cd_meter_rec.global_id,'CD-METER-2','No Transformer Id found in Transformer table for Transformer Global Id:' || cd_meter_rec.TRF_GLOBAL_ID, 
              to_timestamp(nvl(cd_meter_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), cd_meter_rec.trans_type,AppType,ProcedureFor);
              continue;
          end;
        END IF;
        IF cd_meter_rec.trans_type='I' THEN
          INSERT
          INTO METER
            (
              SERVICE_POINT_ID,
              UNQSPID,
              TRF_ID,
              REV_ACCT_CD,
              SVC_ST_NUM,
              SVC_ST_NAME,
              SVC_ST_NAME2,
              SVC_CITY,
              SVC_STATE,
              SVC_ZIP,
              CUST_TYP,
              RATE_SCHED,
              GLOBAL_ID,
              SM_FLG,
              METER_NUMBER
            )
            VALUES
            (
              cd_meter_rec.SERVICE_POINT_ID,
              cd_meter_rec.UNQSPID,
              transformer_id,
              cd_meter_rec.REV_ACCT_CD,
              cd_meter_rec.SVC_ST_NUM,
              cd_meter_rec.SVC_ST_NAME,
              cd_meter_rec.SVC_ST_NAME2,
              cd_meter_rec.SVC_CITY,
              cd_meter_rec.SVC_STATE,
              cd_meter_rec.SVC_ZIP,
              cd_meter_rec.CUST_TYP,
              cd_meter_rec.RATE_SCHED,
              cd_meter_rec.GLOBAL_ID,
              cd_meter_rec.SM_FLG,
              cd_meter_rec.METER_NUMBER
            );
        END IF;
        IF cd_meter_rec.trans_type='U' THEN
         
UPDATE METER
          SET TRF_ID                 = transformer_id,
            SERVICE_POINT_ID         = cd_meter_rec.SERVICE_POINT_ID,
            UNQSPID                  = cd_meter_rec.UNQSPID,
            REV_ACCT_CD              = cd_meter_rec.REV_ACCT_CD,
            SVC_ST_NUM               = cd_meter_rec.SVC_ST_NUM,
            SVC_ST_NAME              = cd_meter_rec.SVC_ST_NAME,
            SVC_ST_NAME2             = cd_meter_rec.SVC_ST_NAME2,
            SVC_CITY                 = cd_meter_rec.SVC_CITY,
            SVC_STATE                = cd_meter_rec.SVC_STATE,
            SVC_ZIP                  = cd_meter_rec.SVC_ZIP,
            CUST_TYP                 = cd_meter_rec.CUST_TYP,
            RATE_SCHED               = cd_meter_rec.RATE_SCHED,
            SM_FLG                   = cd_meter_rec.SM_FLG,
            METER_NUMBER             = cd_meter_rec.METER_NUMBER
          WHERE GLOBAL_ID            = cd_meter_rec.GLOBAL_ID;

        elsif cd_meter_rec.trans_type='R' THEN
               UPDATE METER
                    SET TRF_ID                 = transformer_id,
                      SERVICE_POINT_ID         = cd_meter_rec.SERVICE_POINT_ID,
                      UNQSPID                  = cd_meter_rec.UNQSPID,
                      REV_ACCT_CD              = cd_meter_rec.REV_ACCT_CD,
                      SVC_ST_NUM               = cd_meter_rec.SVC_ST_NUM,
                      SVC_ST_NAME              = cd_meter_rec.SVC_ST_NAME,
                      SVC_ST_NAME2             = cd_meter_rec.SVC_ST_NAME2,
                      SVC_CITY                 = cd_meter_rec.SVC_CITY,
                      SVC_STATE                = cd_meter_rec.SVC_STATE,
                      SVC_ZIP                  = cd_meter_rec.SVC_ZIP,
                      CUST_TYP                 = cd_meter_rec.CUST_TYP,
                      RATE_SCHED               = cd_meter_rec.RATE_SCHED,
                      SM_FLG                   = cd_meter_rec.SM_FLG,
                      METER_NUMBER             = cd_meter_rec.METER_NUMBER,
                      GLOBAL_ID                = cd_meter_rec.GLOBAL_ID
                    WHERE GLOBAL_ID            = cd_meter_rec.OLD_GLOBAL_ID;
                    Old_Service_Point_Id := null;
                    begin
                    
                      select service_point_id into Old_Service_Point_Id  from meter where GLOBAL_ID = cd_meter_rec.old_global_id;
                    exception
                    when no_data_found then
                      Old_Service_Point_Id := null;
                    end;
                    update SP_PEAK_HIST S set S.SERVICE_POINT_ID=cd_meter_rec.Service_Point_Id where S.SERVICE_POINT_ID = Old_Service_Point_Id;

        elsif cd_meter_rec.trans_type='D' THEN
          UPDATE METER SET REC_STATUS = 'D' WHERE GLOBAL_ID=cd_meter_rec.GLOBAL_ID;
        ELSE
          NULL;
        END IF;
        COMMIT;
        SELECT COUNT(*) into NoOfRows FROM METER M WHERE M.GLOBAL_ID = CD_METER_REC.GLOBAL_ID;
        IF NoOfRows>0 THEN
          UPDATE CD_METER M SET M.PROC_FLG = 'P' WHERE M.ID=cd_meter_rec.ID;
        END IF;
        COMMIT;
      EXCEPTION
      WHEN OTHERS THEN
        ErrorCode := SQLCODE;
        ErrorMsg  := SUBSTR(SQLERRM,1,200);
        LOG_ERRORS(cd_meter_rec.global_id,ErrorCode,ErrorMsg,to_timestamp(nvl(cd_meter_rec.trans_date,sysdate),'YYYY/MM/DD HH:MI:SS.FF AM'), cd_meter_rec.trans_type,AppType,ProcedureFor);
        continue;
      END;
    END LOOP;
  END;
END METER_MGMT;
PROCEDURE LOG_ERRORS(
    GLOBALID  VARCHAR2,
    ERRORCODE VARCHAR2,
    ERRORMSG  VARCHAR2,
    TRANSDATE TIMESTAMP,
    TRANSTYPE CHAR,
    APPTYPE   CHAR,
    PROCEDUREFOR VARCHAR2)
AS
BEGIN
  INSERT
  INTO CD_ERRORS
    (
      GLOBAL_ID,
      ERROR_CODE,
      ERROR_MSG,
      TRANS_DATE,
      TRANS_TYPE,
      CREATE_DTM,
      APP_TYPE,
      PROC_FOR
    )
    VALUES
    (
      GLOBALID,
      ErrorCode,
      ErrorMsg,
      TRANSDATE,
      TRANSTYPE,
      CURRENT_TIMESTAMP,
      AppType,
      ProcedureFor
    );
END;
END TLM_CD_MGMT_MONTHLY;

/
--------------------------------------------------------
--  DDL for Procedure DATA_LOAD_VALIDATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDTLM"."DATA_LOAD_VALIDATION" (runDate DATE)
AS
  invalid_cdw_data EXCEPTION;
  invalid_ccb_data EXCEPTION;
  v_cnt            NUMBER;
  v_tab            VARCHAR2(30);
  v_month          NUMBER;
  v_count          NUMBER;

BEGIN

/* 
-- Validate CDW: data for current month and next month should exist in EXT tables  

  -- EXT_SM_SP_GEN_LOAD
  SELECT count(*) into v_count FROM EXT_SM_SP_GEN_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_SP_GEN_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_SP_LOAD
  SELECT count(*) into v_count FROM EXT_SM_SP_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_SP_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_TRF_GEN_LOAD
  SELECT count(*) into v_count FROM EXT_SM_TRF_GEN_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_TRF_GEN_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_TRF_LOAD
  SELECT count(*) into v_count FROM EXT_SM_TRF_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_TRF_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
 
--  Validate if loaded CCB data is latest   
  
  
  SELECT to_number(rev_month)
  INTO v_month
  FROM EXT_CCB_METER_LOAD
  WHERE rownum = 1;
  
  
  -- -4 value is for temporary testing, it needs to be replaced with -2/v_date_val after testing 
  
   IF v_month  <> to_number(TO_CHAR(runDate,'mm')) THEN    
    v_tab := 'EXT_CCB_METER_LOAD' ;
    RAISE invalid_ccb_data;
  END IF;  
  
*/  
 
  --  Copy  EXT_CCB_METER_LOAD data to  STG_CCB_METER_LOAD    
  --- NEED TO TRUCATE THIS BEFORE INSERTING
  DELETE FROM STG_CCB_METER_LOAD;
  DELETE FROM STG_SM_SP_LOAD;
  DELETE FROM STG_SM_TRF_LOAD;
  DELETE FROM STG_SM_SP_GEN_LOAD;
  DELETE FROM STG_SM_TRF_GEN_LOAD;
  
  
  INSERT
  INTO STG_CCB_METER_LOAD
    (
      SERVICE_POINT_ID,
      UNQSPID,
      ACCT_ID,
      REV_MONTH,
      REV_KWHR,
      REV_KW,
      PFACTOR,
      SM_SP_STATUS
    )
  SELECT SERVICE_POINT_ID,
    UNQSPID,
    ACCT_ID,
    REV_MONTH,
    cast(REV_KWHR as number)/10,
    REV_KW,
    PFACTOR,
    SM_SP_STATUS
  FROM EXT_CCB_METER_LOAD;
  
  
  
  --  Copy CDW EXT data from two months ago to STG tables  
  
  
  
  
  INSERT INTO STG_SM_TRF_LOAD
    ( CGC, TRF_PEAK_KW, TRF_PEAK_TIME, TRF_AVG_KW
    )
  SELECT CGC,
    TRF_PEAK_KW,
    to_date(TRF_PEAK_TIME,'yyyymmdd:hh24:mi'),
    TRF_AVG_KW
  FROM EXT_SM_TRF_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
  INSERT
  INTO STG_SM_SP_LOAD
    (
      CGC,
      SERVICE_POINT_ID,
      SP_PEAK_KW,
      VEE_SP_KW_FLAG,
      SP_PEAK_TIME,
      SP_KW_TRF_PEAK,
      VEE_TRF_KW_FLAG,
      INT_LEN,
      SP_PEAK_KVAR,
      TRF_PEAK_KVAR
    )
  SELECT 
    a.CGC,
    a.SERVICE_POINT_ID,
    a.SP_PEAK_KW,
    a.VEE_SP_KW_FLAG,
    to_date(a.SP_PEAK_TIME,'yyyymmdd:hh24:mi'),
    a.SP_KW_TRF_PEAK,
    a.VEE_TRF_KW_FLAG,
    a.INT_LEN,
    a.SP_PEAK_KVAR,
    a.TRF_PEAK_KVAR
  FROM EXT_SM_SP_LOAD a, STG_SM_TRF_LOAD b
  WHERE 
    a.cgc = b.cgc and 
    TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
    INSERT
  INTO STG_SM_TRF_GEN_LOAD
    (
      CGC,
      TRF_PEAK_KW,
      TRF_PEAK_TIME,
      TRF_AVG_KW
    )
  SELECT CGC,
    TRF_PEAK_KW,
    to_date(TRF_PEAK_TIME,'yyyymmdd:hh24:mi'),
    TRF_AVG_KW
  FROM EXT_SM_TRF_GEN_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
  INSERT
  INTO STG_SM_SP_GEN_LOAD
    (
      CGC,
      SERVICE_POINT_ID,
      SP_PEAK_KW,
      VEE_SP_KW_FLAG,
      SP_PEAK_TIME,
      SP_KW_TRF_PEAK,
      VEE_TRF_KW_FLAG,
      INT_LEN,
      SP_PEAK_KVAR,
      TRF_PEAK_KVAR
    )
  SELECT 
    a.CGC,
    a.SERVICE_POINT_ID,
    a.SP_PEAK_KW,
    a.VEE_SP_KW_FLAG,
    to_date(a.SP_PEAK_TIME,'yyyymmdd:hh24:mi'),
    a.SP_KW_TRF_PEAK,
    a.VEE_TRF_KW_FLAG,
    a.INT_LEN,
    a.SP_PEAK_KVAR,
    a.TRF_PEAK_KVAR
  FROM 
    EXT_SM_SP_GEN_LOAD a, STG_SM_TRF_GEN_LOAD b
  WHERE 
    a.cgc = b.cgc and
    TO_CHAR(to_date(a.SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
 

  
  
  DELETE FROM  EXT_CCB_METER_LOAD;
   
  DELETE
  FROM EXT_SM_SP_LOAD
  WHERE TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_TRF_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_SP_GEN_LOAD
  WHERE TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_TRF_GEN_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  COMMIT;
EXCEPTION
WHEN invalid_cdw_data THEN
  RAISE_APPLICATION_ERROR(-20001,' Data loaded into this CDW table is not letest :'||v_tab);
WHEN invalid_ccb_data THEN
  RAISE_APPLICATION_ERROR(-20001,'Data loaded into this CCB table is not letest :'||v_tab);
END DATA_LOAD_VALIDATION;

/
--------------------------------------------------------
--  DDL for Procedure DATA_LOAD_VALIDATION_FINAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDTLM"."DATA_LOAD_VALIDATION_FINAL" (runDate DATE)
AS
  invalid_cdw_data EXCEPTION;
  invalid_ccb_data EXCEPTION;
  v_cnt            NUMBER;
  v_tab            VARCHAR2(30);
  v_month          NUMBER;
  v_count          NUMBER;

BEGIN

 
-- Validate CDW: data for current month and next month should exist in EXT tables  

  -- EXT_SM_SP_GEN_LOAD
  SELECT count(*) into v_count FROM EXT_SM_SP_GEN_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_SP_GEN_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_SP_LOAD
  SELECT count(*) into v_count FROM EXT_SM_SP_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_SP_LOAD where
  to_number(to_char(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_SP_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_TRF_GEN_LOAD
  SELECT count(*) into v_count FROM EXT_SM_TRF_GEN_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_TRF_GEN_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_GEN_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  
  -- EXT_SM_TRF_LOAD
  SELECT count(*) into v_count FROM EXT_SM_TRF_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(runDate,'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
  SELECT count(*) into v_count FROM EXT_SM_TRF_LOAD where
  to_number(to_char(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm')) = to_number(TO_CHAR(add_months(runDate,1),'mm'));
  IF v_count  = 0 THEN
    v_tab     := 'EXT_SM_TRF_LOAD' ;
    RAISE invalid_cdw_data;
  END IF;
 
--  Validate if loaded CCB data is latest   
  
  
  SELECT to_number(rev_month)
  INTO v_month
  FROM EXT_CCB_METER_LOAD
  WHERE rownum = 1;
  
  
  -- -4 value is for temporary testing, it needs to be replaced with -2/v_date_val after testing 
  
   IF v_month  <> to_number(TO_CHAR(runDate,'mm')) THEN    
    v_tab := 'EXT_CCB_METER_LOAD' ;
    RAISE invalid_ccb_data;
  END IF;  
  
  
 
  --  Copy  EXT_CCB_METER_LOAD data to  STG_CCB_METER_LOAD    
  --- NEED TO TRUCATE THIS BEFORE INSERTING
  DELETE FROM STG_CCB_METER_LOAD;
  DELETE FROM STG_SM_SP_LOAD;
  DELETE FROM STG_SM_TRF_LOAD;
  DELETE FROM STG_SM_SP_GEN_LOAD;
  DELETE FROM STG_SM_TRF_GEN_LOAD;
  
  
  INSERT
  INTO STG_CCB_METER_LOAD
    (
      SERVICE_POINT_ID,
      UNQSPID,
      ACCT_ID,
      REV_MONTH,
      REV_KWHR,
      REV_KW,
      PFACTOR,
      SM_SP_STATUS
    )
  SELECT SERVICE_POINT_ID,
    UNQSPID,
    ACCT_ID,
    REV_MONTH,
    cast(REV_KWHR as number)/10,
    REV_KW,
    PFACTOR,
    SM_SP_STATUS
  FROM EXT_CCB_METER_LOAD;
  
  
  
  --  Copy CDW EXT data from two months ago to STG tables  
  
  
  
  
  INSERT INTO STG_SM_TRF_LOAD
    ( CGC, TRF_PEAK_KW, TRF_PEAK_TIME, TRF_AVG_KW
    )
  SELECT CGC,
    TRF_PEAK_KW,
    to_date(TRF_PEAK_TIME,'yyyymmdd:hh24:mi'),
    TRF_AVG_KW
  FROM EXT_SM_TRF_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
  INSERT
  INTO STG_SM_SP_LOAD
    (
      CGC,
      SERVICE_POINT_ID,
      SP_PEAK_KW,
      VEE_SP_KW_FLAG,
      SP_PEAK_TIME,
      SP_KW_TRF_PEAK,
      VEE_TRF_KW_FLAG,
      INT_LEN,
      SP_PEAK_KVAR,
      TRF_PEAK_KVAR
    )
  SELECT 
    a.CGC,
    a.SERVICE_POINT_ID,
    a.SP_PEAK_KW,
    a.VEE_SP_KW_FLAG,
    to_date(a.SP_PEAK_TIME,'yyyymmdd:hh24:mi'),
    a.SP_KW_TRF_PEAK,
    a.VEE_TRF_KW_FLAG,
    a.INT_LEN,
    a.SP_PEAK_KVAR,
    a.TRF_PEAK_KVAR
  FROM EXT_SM_SP_LOAD a, STG_SM_TRF_LOAD b
  WHERE 
    a.cgc = b.cgc and 
    TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
    INSERT
  INTO STG_SM_TRF_GEN_LOAD
    (
      CGC,
      TRF_PEAK_KW,
      TRF_PEAK_TIME,
      TRF_AVG_KW
    )
  SELECT CGC,
    TRF_PEAK_KW,
    to_date(TRF_PEAK_TIME,'yyyymmdd:hh24:mi'),
    TRF_AVG_KW
  FROM EXT_SM_TRF_GEN_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  
  INSERT
  INTO STG_SM_SP_GEN_LOAD
    (
      CGC,
      SERVICE_POINT_ID,
      SP_PEAK_KW,
      VEE_SP_KW_FLAG,
      SP_PEAK_TIME,
      SP_KW_TRF_PEAK,
      VEE_TRF_KW_FLAG,
      INT_LEN,
      SP_PEAK_KVAR,
      TRF_PEAK_KVAR
    )
  SELECT 
    a.CGC,
    a.SERVICE_POINT_ID,
    a.SP_PEAK_KW,
    a.VEE_SP_KW_FLAG,
    to_date(a.SP_PEAK_TIME,'yyyymmdd:hh24:mi'),
    a.SP_KW_TRF_PEAK,
    a.VEE_TRF_KW_FLAG,
    a.INT_LEN,
    a.SP_PEAK_KVAR,
    a.TRF_PEAK_KVAR
  FROM 
    EXT_SM_SP_GEN_LOAD a, STG_SM_TRF_GEN_LOAD b
  WHERE 
    a.cgc = b.cgc and
    TO_CHAR(to_date(a.SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
 

  
  
  DELETE FROM  EXT_CCB_METER_LOAD;
   
  DELETE
  FROM EXT_SM_SP_LOAD
  WHERE TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_TRF_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_SP_GEN_LOAD
  WHERE TO_CHAR(to_date(SP_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  DELETE
  FROM EXT_SM_TRF_GEN_LOAD
  WHERE TO_CHAR(to_date(TRF_PEAK_TIME,'YYYYMMDD:HH24:MI'),'mm') = TO_CHAR((runDate),'mm');
  
  COMMIT;
EXCEPTION
WHEN invalid_cdw_data THEN
  RAISE_APPLICATION_ERROR(-20001,' Data loaded into this CDW table is not letest :'||v_tab);
WHEN invalid_ccb_data THEN
  RAISE_APPLICATION_ERROR(-20001,'Data loaded into this CCB table is not letest :'||v_tab);
END DATA_LOAD_VALIDATION_FINAL;

/
--------------------------------------------------------
--  DDL for Procedure RUN_MONTHLY_LOAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDTLM"."RUN_MONTHLY_LOAD" (
        p_schema VARCHAR2,
        batchDate DATE)
    AS
      -- This procedure accepts three arguments:
      -- 1. p_schema - where the source/target schema
      -- 2. batchDate - the processing month - 2 months prior to current month since CCB data is 2 months behind
      v_log_status VARCHAR2(10);
      v_cnt INTEGER;
      v_date DATE := batchDate;
    BEGIN

      -- Always assume the process is restarted.  Do some cleanup first
      delete from SP_PEAK_GEN_HIST where TRF_PEAK_GEN_HIST_ID in (select id from trf_peak_gen_hist where batch_date = v_date);
      delete from  trf_peak_gen_hist where batch_date = v_date;
      delete from SP_PEAK_HIST where TRF_PEAK_HIST_ID in (select id from trf_peak_hist where batch_date = v_date);
      delete from  trf_peak_hist where batch_date = v_date;
      delete from MONTHLY_LOAD_LOG where to_char(LOAD_START_TS,'mm') =  to_char(SYSDATE,'mm');
      
      IF LOAD_TRF_PEAK_HIST_SMART(p_schema, v_date,'LOAD') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST - SMART successfully loaded');
      END IF;
      IF LOAD_TRF_PEAK_HIST_LEGACY(p_schema, v_date) = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST - SMART successfully loaded');
      END IF;
      IF LOAD_SP_PEAK_HIST_SMART(p_schema, v_date,'LOAD') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table SP_PEAK_HIST - SMART successfully loaded');
      END IF;
      IF LOAD_SP_PEAK_HIST_LEGACY(p_schema, v_date) = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table SP_PEAK_HIST - LEGACY successfully loaded');
      END IF;
      -- update fields (except CAP) in TRF_PEAK_HIST
      IF UPDATE_TRF_PEAK_HIST (p_schema, v_date,'LOAD') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST successfully updated');
      END IF;
      -- update CAP in TRF_PEAK_HIST
      IF UPDATE_TRF_PEAK_HIST_CAP(p_schema, v_date,'LOAD') = 'TRUE' THEN
           DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST (Capacity) successfully updated');
      END IF;    
      -- Populate 12 month peak summary table
      IF POPULATE_TRF_PEAK_TABLE (p_schema, v_date,'LOAD') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK successfully populated');
      END IF;     
      IF POPULATE_TRF_PEAK_BY_CUST_TYP (p_schema, v_date,'LOAD') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_BY_CUST_TYP successfully populated');
      END IF;

--TEMP
--v_date := TO_DATE ('1-MAR-13');


      -- Generated load processing
      IF LOAD_TRF_PEAK_HIST_SMART(p_schema, v_date,'GEN') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_GEN_HIST - SMART successfully loaded');
      END IF;
      IF LOAD_SP_PEAK_HIST_SMART(p_schema, v_date,'GEN') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table SP_PEAK_GEN_HIST - SMART successfully loaded');
      END IF;
      -- update fields (except CAP) in TRF_PEAK_HIST
      IF UPDATE_TRF_PEAK_HIST (p_schema, v_date,'GEN') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST successfully updated');
      END IF;

      -- update CAP in TRF_PEAK_HIST
      IF UPDATE_TRF_PEAK_HIST_CAP(p_schema, v_date,'GEN') = 'TRUE' THEN
           DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_HIST (Capacity) successfully updated');
      END IF;    
      -- Populate 12 month peak summary table
      IF POPULATE_TRF_PEAK_TABLE (p_schema, v_date,'GEN') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK successfully populated');
      END IF;
      
      IF POPULATE_TRF_PEAK_BY_CUST_TYP (p_schema, v_date,'GEN') = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('Table TRF_PEAK_BY_CUST_TYP successfully populated');
      END IF;      
    END RUN_MONTHLY_LOAD;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_JUNK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDTLM"."SP_DELETE_JUNK" 
as
begin

delete from SP_PEAK_GEN_HIST where TRF_PEAK_GEN_HIST_ID = (select id from trf_peak_gen_hist where batch_date = to_date('01-MAR-14'));

delete from  trf_peak_gen_hist where batch_date = to_date('01-MAR-14');
 
delete from SP_PEAK_HIST where TRF_PEAK_HIST_ID in (select id from trf_peak_hist where batch_date = to_date('01-MAR-14'));

delete from  trf_peak_hist where batch_date = to_date('01-MAR-14');

delete from MONTHLY_LOAD_LOG;

commit;

end sp_delete_junk ;

/


spool off