create or replace PROCEDURE  SM_SCADA_FLISR_BOOLEAN_UPD

AS

BEGIN


--- This procedure is updating the missing SCADA,FLISR and converting all boolean values from 0/1 to N/Y

---SM_RECLOSER SCADA and  FLISR UPDATE

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#,CD.FLISR  FROM CEDSA_SCADA CD ,SM_RECLOSER RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
	UPDATE SM_RECLOSER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,
  	RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
 	WHERE DEVICE_ID =I.DEVICE_ID;

	UPDATE SM_RECLOSER  SET  FLISR=I.FLISR
 	WHERE DEVICE_ID =I.DEVICE_ID  AND FLISR IS NULL;

END LOOP;
END;


UPDATE SM_RECLOSER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_RECLOSER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;



--- Below code is updating the missing data for SOFTWARE_VERSION,FIRMWARE_VERSION,OK_TO_BYPASS,PREPARED_BY,PHA_LOCKOUT_OPS ,GRD_LOCKOUT_OPS  in SM_RECLOSER
BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.CURRENT_FUTURE,CD.SOFTWARE_VERSION,CD.FIRMWARE_VERSION,CD.OK_TO_BYPASS,CD.PREPARED_BY, CD.PHA_LOCKOUT_OPS,CD.GRD_LOCKOUT_OPS
FROM
(SELECT  RE.DEVICE_ID,RE.SOFTWARE_VERSION,RE.FIRMWARE_VERSION,RE.OK_TO_BYPASS,RS.PREPARED_BY,RS.CURRENT_FUTURE,RS.PHA_LOCKOUT_OPS ,RS.GRD_LOCKOUT_OPS
FROM CEDSA_RECLOSER  RE ,CEDSA_RECLOSER_SETTINGS  RS,GIS_CEDSADEVICEID  GD   WHERE RE.DEVICE_ID=RS.DEVICE_ID AND RE.DEVICE_ID=GD.DEVICE_ID AND
GD.FEATURE_CLASS_NAME ='Recloser')  CD ,SM_RECLOSER RE
WHERE CD.DEVICE_ID = RE.DEVICE_ID )
LOOP
UPDATE SM_RECLOSER  SET
	SOFTWARE_VERSION=I.SOFTWARE_VERSION
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE AND SOFTWARE_VERSION IS NULL;

UPDATE SM_RECLOSER  SET
	FIRMWARE_VERSION=I.FIRMWARE_VERSION
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE AND FIRMWARE_VERSION  IS NULL;

UPDATE SM_RECLOSER  SET
	OK_TO_BYPASS=I.OK_TO_BYPASS
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE AND OK_TO_BYPASS  IS NULL;

UPDATE SM_RECLOSER  SET
	PREPARED_BY=I.PREPARED_BY
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE AND PREPARED_BY  IS NULL;

-- Added these fields PHA_LOCKOUT_OPS,GRD_LOCKOUT_OPS after produciton release
UPDATE SM_RECLOSER  SET
	PHA_LOCKOUT_OPS=I.PHA_LOCKOUT_OPS,GRD_LOCKOUT_OPS=I.GRD_LOCKOUT_OPS
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE ;


END LOOP;
END;


--- Below code is updating GRD_RESP_TIME,PHA_RESP_TIME,ALT_GRD_RESP_TIME,ALT_PHA_RESP_TIME,
--- GRD_INST_TRIP_CD,PHA_INST_TRIP_CD,ALT_GRD_INST_TRIP_CD,ALT_PHA_INST_TRIP_CD ,SGF_LOCKOUT,ALT_SGF_LOCKOUT in SM_RECLOSER


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.CURRENT_FUTURE,CD.GRD_RESP_TIME,CD.PHA_RESP_TIME,CD.ALT_GRD_RESP_TIME,CD.ALT_PHA_RESP_TIME,
CD.GRD_INST_TRIP_CD,CD.PHA_INST_TRIP_CD,CD.ALT_GRD_INST_TRIP_CD,CD.ALT_PHA_INST_TRIP_CD,CD.SGF_LOCKOUT,CD.ALT_SGF_LOCKOUT
FROM
(SELECT RE.DEVICE_ID,RS.CURRENT_FUTURE,
DECODE(RS.GRD_RESP_TIME,'X',NULL, TO_NUMBER(RS.GRD_RESP_TIME)) GRD_RESP_TIME,DECODE(RS.PHA_RESP_TIME,'X',NULL,TO_NUMBER(RS.PHA_RESP_TIME)) PHA_RESP_TIME,
DECODE(RS.ALT_GRD_RESP_TIME,'X',NULL,TO_NUMBER(RS.ALT_GRD_RESP_TIME)) ALT_GRD_RESP_TIME,DECODE(RS.ALT_PHA_RESP_TIME,'X',NULL,TO_NUMBER(RS.ALT_PHA_RESP_TIME)) 
ALT_PHA_RESP_TIME,RS.GRD_INST_TRIP_CD,RS.PHA_INST_TRIP_CD,RS.ALT_GRD_INST_TRIP_CD,RS.ALT_PHA_INST_TRIP_CD,RS.SGF_LOCKOUT,RS.ALT_SGF_LOCKOUT
FROM CEDSA_RECLOSER  RE ,CEDSA_RECLOSER_SETTINGS  RS,GIS_CEDSADEVICEID  GD   WHERE RE.DEVICE_ID=RS.DEVICE_ID AND RE.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Recloser') CD ,SM_RECLOSER RE
WHERE CD.DEVICE_ID = RE.DEVICE_ID )
LOOP
UPDATE  SM_RECLOSER  SET
	PHA_RESP_TIME=I.PHA_RESP_TIME,
	GRD_RESP_TIME=I.GRD_RESP_TIME,
	ALT_PHA_RESP_TIME=I.ALT_PHA_RESP_TIME,
	ALT_GRD_RESP_TIME=I.ALT_GRD_RESP_TIME,
	GRD_INST_TRIP_CD=I.GRD_INST_TRIP_CD,
	PHA_INST_TRIP_CD=I.PHA_INST_TRIP_CD,
	ALT_GRD_INST_TRIP_CD=I.ALT_GRD_INST_TRIP_CD,
	ALT_PHA_INST_TRIP_CD=I.ALT_PHA_INST_TRIP_CD,
	SGF_LOCKOUT=I.SGF_LOCKOUT,
	ALT_SGF_LOCKOUT=I.ALT_SGF_LOCKOUT
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE ;

END LOOP;
END;



---SM_CAPACITOR SCADA UPDATE

FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_# FROM CEDSA_SCADA CD ,SM_CAPACITOR RE
    WHERE CD.DEVICE_ID = RE.DEVICE_ID)
    LOOP
      UPDATE SM_CAPACITOR
      SET SCADA_TYPE    =I.SCADA_TYPE,
        RADIO_MANF_CD   =I.RADIO_MANF_CD,
        RADIO_MODEL_NUM =I.RADIO_MODEL_#,
        RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
      WHERE DEVICE_ID   =I.DEVICE_ID;
    END LOOP;


UPDATE SM_CAPACITOR
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_CAPACITOR
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;






--- SM_CIRCUIT_BREAKER Pull data for OPS_TO_LOCKOUT columns

BEGIN
FOR I IN (SELECT CD.DEVICE_ID, CD.LOCKOUT_#  FROM CEDSA_CIRCUIT_BREAKER CD,SM_CIRCUIT_BREAKER SM WHERE CD.DEVICE_ID=SM.DEVICE_ID )
LOOP
UPDATE SM_CIRCUIT_BREAKER  SET  OPS_TO_LOCKOUT=I.LOCKOUT_#  WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

---SM_INTERRUPTER SCADA and  FLISR UPDATE

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#,CD.FLISR  FROM CEDSA_SCADA CD ,SM_INTERRUPTER RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_INTERRUPTER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,
RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;

UPDATE SM_INTERRUPTER  SET  FLISR=I.FLISR
 	WHERE DEVICE_ID =I.DEVICE_ID  AND FLISR IS NULL;

END LOOP;
END;

UPDATE  SM_INTERRUPTER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_INTERRUPTER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;





---SM_REGULATOR SCADA UPDATE

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_REGULATOR RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_REGULATOR  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;


UPDATE  SM_REGULATOR
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_REGULATOR
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;


---SM_SECTIONALIZER SCADA UPDATE

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_SECTIONALIZER SE   WHERE CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_SECTIONALIZER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

UPDATE  SM_SECTIONALIZER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_SECTIONALIZER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;



---SM_SWITCH SCADA and  FLISR UPDATE


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#,CD.FLISR  FROM CEDSA_SCADA CD ,SM_SWITCH RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_SWITCH  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,
RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;

UPDATE  SM_SWITCH  SET  FLISR=I.FLISR
 	WHERE DEVICE_ID =I.DEVICE_ID  AND FLISR IS NULL;

END LOOP;
END;


UPDATE  SM_SWITCH
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_SWITCH
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;


--- Updating all boolean columns from 0/1 to N/Y
--- Updating CAPACITOR tables
UPDATE SM_CAPACITOR  SET  SCH1_WEEKDAYS='Y' WHERE  SCH1_WEEKDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH1_WEEKDAYS='N' WHERE  SCH1_WEEKDAYS='0';
UPDATE SM_CAPACITOR  SET  SCH1_SATURDAY='Y' WHERE  SCH1_SATURDAY='1';
UPDATE SM_CAPACITOR  SET  SCH1_SATURDAY='N' WHERE  SCH1_SATURDAY='0';
UPDATE SM_CAPACITOR  SET  SCH1_SUNDAY='Y' WHERE  SCH1_SUNDAY='1';
UPDATE SM_CAPACITOR  SET  SCH1_SUNDAY='N' WHERE  SCH1_SUNDAY='0';
UPDATE SM_CAPACITOR  SET  SCH1_HOLIDAYS='Y' WHERE  SCH1_HOLIDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH1_HOLIDAYS='N' WHERE  SCH1_HOLIDAYS='0';

UPDATE SM_CAPACITOR  SET  SCH2_WEEKDAYS='Y' WHERE  SCH2_WEEKDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH2_WEEKDAYS='N' WHERE  SCH2_WEEKDAYS='0';
UPDATE SM_CAPACITOR  SET  SCH2_SATURDAY='Y' WHERE  SCH2_SATURDAY='1';
UPDATE SM_CAPACITOR  SET  SCH2_SATURDAY='N' WHERE  SCH2_SATURDAY='0';
UPDATE SM_CAPACITOR  SET  SCH2_SUNDAY='Y' WHERE  SCH2_SUNDAY='1';
UPDATE SM_CAPACITOR  SET  SCH2_SUNDAY='N' WHERE  SCH2_SUNDAY='0';
UPDATE SM_CAPACITOR  SET  SCH2_HOLIDAYS='Y' WHERE  SCH2_HOLIDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH2_HOLIDAYS='N' WHERE  SCH2_HOLIDAYS='0';

UPDATE SM_CAPACITOR  SET  SCH3_WEEKDAYS='Y' WHERE  SCH3_WEEKDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH3_WEEKDAYS='N' WHERE  SCH3_WEEKDAYS='0';
UPDATE SM_CAPACITOR  SET  SCH3_SATURDAY='Y' WHERE  SCH3_SATURDAY='1';
UPDATE SM_CAPACITOR  SET  SCH3_SATURDAY='N' WHERE  SCH3_SATURDAY='0';
UPDATE SM_CAPACITOR  SET  SCH3_SUNDAY='Y' WHERE  SCH3_SUNDAY='1';
UPDATE SM_CAPACITOR  SET  SCH3_SUNDAY='N' WHERE  SCH3_SUNDAY='0';
UPDATE SM_CAPACITOR  SET  SCH3_HOLIDAYS='Y' WHERE  SCH3_HOLIDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH3_HOLIDAYS='N' WHERE  SCH3_HOLIDAYS='0';

UPDATE SM_CAPACITOR  SET  SCH4_WEEKDAYS='Y' WHERE  SCH4_WEEKDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH4_WEEKDAYS='N' WHERE  SCH4_WEEKDAYS='0';
UPDATE SM_CAPACITOR  SET  SCH4_SATURDAY='Y' WHERE  SCH4_SATURDAY='1';
UPDATE SM_CAPACITOR  SET  SCH4_SATURDAY='N' WHERE  SCH4_SATURDAY='0';
UPDATE SM_CAPACITOR  SET  SCH4_SUNDAY='Y' WHERE  SCH4_SUNDAY='1';
UPDATE SM_CAPACITOR  SET  SCH4_SUNDAY='N' WHERE  SCH4_SUNDAY='0';
UPDATE SM_CAPACITOR  SET  SCH4_HOLIDAYS='Y' WHERE  SCH4_HOLIDAYS='1';
UPDATE SM_CAPACITOR  SET  SCH4_HOLIDAYS='N' WHERE  SCH4_HOLIDAYS='0';


--- Updating CIRCUIT_BREAKER tables

UPDATE SM_CIRCUIT_BREAKER  SET  NETWORK='Y' WHERE  NETWORK='1';
UPDATE SM_CIRCUIT_BREAKER  SET  NETWORK='N' WHERE  NETWORK='0';
UPDATE SM_CIRCUIT_BREAKER  SET  DIRECT_TRANSFER_TRIP='Y' WHERE  DIRECT_TRANSFER_TRIP='1';
UPDATE SM_CIRCUIT_BREAKER  SET  DIRECT_TRANSFER_TRIP='N' WHERE  DIRECT_TRANSFER_TRIP='0';
UPDATE SM_CIRCUIT_BREAKER  SET  RECLOSE_BLOCKING='Y' WHERE  RECLOSE_BLOCKING='1';
UPDATE SM_CIRCUIT_BREAKER  SET  RECLOSE_BLOCKING='N' WHERE  RECLOSE_BLOCKING='0';
UPDATE SM_CIRCUIT_BREAKER  SET  FLISR='Y' WHERE  FLISR='1';
UPDATE SM_CIRCUIT_BREAKER  SET  FLISR='N' WHERE  FLISR='0';
UPDATE SM_CIRCUIT_BREAKER  SET  SCADA='Y' WHERE  SCADA='1';
UPDATE SM_CIRCUIT_BREAKER  SET  SCADA='N' WHERE  SCADA='0';

--- Updating INterruptor tables

UPDATE SM_INTERRUPTER  SET  OK_TO_BYPASS='Y' WHERE  OK_TO_BYPASS='1';
UPDATE SM_INTERRUPTER  SET  OK_TO_BYPASS='N' WHERE  OK_TO_BYPASS='0';

UPDATE SM_INTERRUPTER  SET  FLISR='Y' WHERE  FLISR='1';
UPDATE SM_INTERRUPTER  SET  FLISR='N' WHERE  FLISR='0';
UPDATE SM_INTERRUPTER  SET  OPERATIONAL_MODE_SWITCH='N' WHERE   OPERATIONAL_MODE_SWITCH IS NULL;


--- Updating Recloser tables

UPDATE SM_RECLOSER  SET  FLISR='Y' WHERE  FLISR='1';
UPDATE SM_RECLOSER  SET  FLISR='N' WHERE  FLISR='0';
UPDATE SM_RECLOSER  SET  DIRECT_TRANSFER_TRIP='Y' WHERE  DIRECT_TRANSFER_TRIP='1';
UPDATE SM_RECLOSER  SET  DIRECT_TRANSFER_TRIP='N' WHERE  DIRECT_TRANSFER_TRIP='0';
UPDATE SM_RECLOSER  SET  OK_TO_BYPASS='Y' WHERE  OK_TO_BYPASS='1';
UPDATE SM_RECLOSER  SET  OK_TO_BYPASS='N' WHERE  OK_TO_BYPASS='0';

--- Updating Switch tables

UPDATE SM_SWITCH  SET  FLISR='Y' WHERE  FLISR='1';
UPDATE SM_SWITCH  SET  FLISR='N' WHERE  FLISR='0';


COMMIT;

END  SM_SCADA_FLISR_BOOLEAN_UPD;