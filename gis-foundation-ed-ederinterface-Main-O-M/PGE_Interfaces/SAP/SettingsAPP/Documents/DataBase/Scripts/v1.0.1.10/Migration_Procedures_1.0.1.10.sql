--------------------------------------------------------
--  File created - Wednesday-November-05-2014   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Procedure SP_SM_CAPACITOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_CAPACITOR" 
AS
  GD_COUNT NUMBER;
  SEC_SETT NUMBER;
  SM_SEC   NUMBER;
BEGIN
  INSERT
  INTO SM_CAPACITOR
    (
      GLOBAL_ID,
      FEATURE_CLASS_NAME,
      OPERATING_NUM,
      DIVISION,
      DISTRICT,
      CONTROLLER_UNIT_MODEL,
      CONTROL_TYPE,
      CONTROL_SERIAL_NUM,
      DEVICE_ID,
      PREPARED_BY,
      DATE_MODIFIED,
      EFFECTIVE_DT,
      CURRENT_FUTURE,
      SWITCH_POSITION,
      PREFERED_BANK_POSITION,
      MAXCYCLES,
      DAYLIGHT_SAVINGS_TIME,
      EST_VOLTAGE_CHANGE,
      VOLTAGE_OVERRIDE_TIME,
      HIGH_VOLTAGE_OVERRIDE_SETPOINT,
      LOW_VOLTAGE_OVERRIDE_SETPOINT,
      VOLTAGE_CHANGE_TIME,
      TEMPERATURE_OVERRIDE,
      TEMPERATURE_CHANGE_TIME,
      EST_BANK_VOLTAGE_RISE,
      AUTO_BVR_CALC,
      DATA_LOGGING_INTERVAL,
      PULSE_TIME,
      MIN_SW_VOLTAGE,
      TIME_DELAY,
      SCH1_SCHEDULE,
      SCH1_CONTROL_STRATEGY,
      SCH1_TIME_ON,
      SCH1_TIME_OFF,
      SCH1_LOW_VOLTAGE_SETPOINT,
      SCH1_HIGH_VOLTAGE_SETPOINT,
      SCH1_TEMP_SETPOINT_ON,
      SCH1_TEMP_SETPOINT_OFF,
      SCH1_START_DATE,
      SCH1_END_DATE,
      SCH1_WEEKDAYS,
      SCH1_SATURDAY,
      SCH1_SUNDAY,
      SCH1_HOLIDAYS
    )
  SELECT GD.GLOBAL_ID,
   'EDGIS.CapacitorBank',
    GD.OPERATING_NUM,
    GD.DIVISION,
    GD.DISTRICT,
    CC.CONTROL_TYPE,
    CC.CONTROL_TYPE,
    CC.CONTROL_SERIAL_#,
    CS.DEVICE_ID,
    CS.PREPARED_BY,
    CS.LAST_MODIFIED,
    CS.EFFECTIVE_DATE,
    CS.CURRENT_FUTURE,
    CS.SWITCH_POSITION,
    CS.PREFERED_BANK_POSITION,
    CS.MAXCYCLES,
    CS.DAYLIGHT_SAVINGS_TIME,
    CS.EST_VOLTAGE_CHANGE,
    CS.VOLTAGE_OVERRIDE_TIME,
    CS.HIGH_VOLTAGE_OVERRIDE_SETPOINT,
    CS.LOW_VOLTAGE_OVERRIDE_SETPOINT,
    CS.VOLTAGE_CHANGE_TIME,
    CS.TEMPERATURE_OVERRIDE,
    CS.TEMPERATURE_CHANGE_TIME,
    CS.EST_BANK_VOLTAGE_RISE,
    CS.AUTO_BVR_CALC,
    CS.DATA_LOGGING_INTERVAL,
    CS.PULSE_TIME,
    CS.MIN_SW_VOLTAGE,
    CS.TIME_DELAY,
    CSH.SCHEDULE,
    CSH.CONTROL_STRATEGY,
    CSH.TIME_ON,
    CSH.TIME_OFF,
    CSH.LOW_VOLTAGE_SETPOINT,
    CSH.HIGH_VOLTAGE_SETPOINT,
    CSH.TEMP_SETPOINT_ON,
    CSH.TEMP_SETPOINT_OFF,
    CSH.START_DATE,
    CSH.END_DATE,
    CSH.WEEKDAYS,
    CSH.SATURDAY,
    CSH.SUNDAY,
    CSH.HOLIDAYS
  FROM CEDSA_CAPACITOR CC ,
    CEDSA_CAPACITOR_SETTINGS CS ,
    CEDSA_CAPACITOR_SCHEDULES CSH,
    GIS_CEDSADEVICEID GD
  WHERE CS.DEVICE_ID        =CC.DEVICE_ID
  AND CS.DEVICE_ID          =CSH.DEVICE_ID
  AND CS.DEVICE_ID          =GD.DEVICE_ID
  AND CSH.CURRENT_FUTURE    =CS.CURRENT_FUTURE
  AND GD.FEATURE_CLASS_NAME ='Capacitor'
  AND CSH.SCHEDULE          =1;




INSERT
  INTO SM_CAPACITOR
    (
      GLOBAL_ID,
      FEATURE_CLASS_NAME,
      OPERATING_NUM,
      DIVISION,
      DISTRICT,
      CONTROLLER_UNIT_MODEL,
      CONTROL_TYPE,
      CONTROL_SERIAL_NUM,
      DEVICE_ID,
      PREPARED_BY,
      DATE_MODIFIED,
      EFFECTIVE_DT,
      CURRENT_FUTURE,
      SWITCH_POSITION,
      PREFERED_BANK_POSITION,
      MAXCYCLES,
      DAYLIGHT_SAVINGS_TIME,
      EST_VOLTAGE_CHANGE,
      VOLTAGE_OVERRIDE_TIME,
      HIGH_VOLTAGE_OVERRIDE_SETPOINT,
      LOW_VOLTAGE_OVERRIDE_SETPOINT,
      VOLTAGE_CHANGE_TIME,
      TEMPERATURE_OVERRIDE,
      TEMPERATURE_CHANGE_TIME,
      EST_BANK_VOLTAGE_RISE,
      AUTO_BVR_CALC,
      DATA_LOGGING_INTERVAL,
      PULSE_TIME,
      MIN_SW_VOLTAGE,
      TIME_DELAY
    )
SELECT GD.GLOBAL_ID,
   'EDGIS.CapacitorBank',
    GD.OPERATING_NUM,
    GD.DIVISION,
    GD.DISTRICT,
    CC.CONTROL_TYPE,
    CC.CONTROL_TYPE,
    CC.CONTROL_SERIAL_#,
    CS.DEVICE_ID,
    CS.PREPARED_BY,
    CS.LAST_MODIFIED,
    CS.EFFECTIVE_DATE,
    CS.CURRENT_FUTURE,
    CS.SWITCH_POSITION,
    CS.PREFERED_BANK_POSITION,
    CS.MAXCYCLES,
    CS.DAYLIGHT_SAVINGS_TIME,
    CS.EST_VOLTAGE_CHANGE,
    CS.VOLTAGE_OVERRIDE_TIME,
    CS.HIGH_VOLTAGE_OVERRIDE_SETPOINT,
    CS.LOW_VOLTAGE_OVERRIDE_SETPOINT,
    CS.VOLTAGE_CHANGE_TIME,
    CS.TEMPERATURE_OVERRIDE,
    CS.TEMPERATURE_CHANGE_TIME,
    CS.EST_BANK_VOLTAGE_RISE,
    CS.AUTO_BVR_CALC,
    CS.DATA_LOGGING_INTERVAL,
    CS.PULSE_TIME,
    CS.MIN_SW_VOLTAGE,
    CS.TIME_DELAY
  FROM CEDSA_CAPACITOR CC ,
    CEDSA_CAPACITOR_SETTINGS CS ,
    GIS_CEDSADEVICEID GD
  WHERE CS.DEVICE_ID        =CC.DEVICE_ID
  AND CS.DEVICE_ID          =GD.DEVICE_ID
  AND GD.FEATURE_CLASS_NAME ='Capacitor'
  AND GD.GLOBAL_ID NOT IN ( SELECT GLOBAL_ID  FROM SM_CAPACITOR);



  BEGIN
    FOR I IN
    (SELECT CS.DEVICE_ID,CS.CURRENT_FUTURE,
      CSH.SCHEDULE,
      CSH.CONTROL_STRATEGY,
      CSH.TIME_ON,
      CSH.TIME_OFF,
      CSH.LOW_VOLTAGE_SETPOINT,
      CSH.HIGH_VOLTAGE_SETPOINT,
      CSH.TEMP_SETPOINT_ON,
      CSH.TEMP_SETPOINT_OFF,
      CSH.START_DATE,
      CSH.END_DATE,
      CSH.WEEKDAYS,
      CSH.SATURDAY,
      CSH.SUNDAY,
      CSH.HOLIDAYS
    FROM CEDSA_CAPACITOR CC ,
      CEDSA_CAPACITOR_SETTINGS CS ,
      CEDSA_CAPACITOR_SCHEDULES CSH,
      GIS_CEDSADEVICEID GD
    WHERE CS.DEVICE_ID        =CC.DEVICE_ID
    AND CS.DEVICE_ID          =CSH.DEVICE_ID
    AND CS.DEVICE_ID          =GD.DEVICE_ID
    AND CSH.CURRENT_FUTURE    =CS.CURRENT_FUTURE
    AND GD.FEATURE_CLASS_NAME ='Capacitor'
    AND CSH.SCHEDULE          =2
    )
    LOOP
      UPDATE SM_CAPACITOR
      SET SCH2_SCHEDULE           = I.SCHEDULE,
        SCH2_CONTROL_STRATEGY     =I.CONTROL_STRATEGY,
        SCH2_TIME_ON              =I.TIME_ON,
        SCH2_TIME_OFF             =I.TIME_OFF,
        SCH2_LOW_VOLTAGE_SETPOINT =I.LOW_VOLTAGE_SETPOINT,
        SCH2_HIGH_VOLTAGE_SETPOINT=I.HIGH_VOLTAGE_SETPOINT,
        SCH2_TEMP_SETPOINT_ON     =I.TEMP_SETPOINT_ON,
        SCH2_TEMP_SETPOINT_OFF    =I.TEMP_SETPOINT_OFF,
        SCH2_START_DATE           =I.START_DATE,
        SCH2_END_DATE             =I.END_DATE,
        SCH2_WEEKDAYS             =I.WEEKDAYS,
        SCH2_SATURDAY             =I.SATURDAY,
        SCH2_SUNDAY               =I.SUNDAY,
        SCH2_HOLIDAYS             =I.HOLIDAYS
      WHERE DEVICE_ID             =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;
    END LOOP;
  END;
  BEGIN
    FOR I IN
    (SELECT CS.DEVICE_ID,CS.CURRENT_FUTURE,
      CSH.SCHEDULE,
      CSH.CONTROL_STRATEGY,
      CSH.TIME_ON,
      CSH.TIME_OFF,
      CSH.LOW_VOLTAGE_SETPOINT,
      CSH.HIGH_VOLTAGE_SETPOINT,
      CSH.TEMP_SETPOINT_ON,
      CSH.TEMP_SETPOINT_OFF,
      CSH.START_DATE,
      CSH.END_DATE,
      CSH.WEEKDAYS,
      CSH.SATURDAY,
      CSH.SUNDAY,
      CSH.HOLIDAYS
    FROM CEDSA_CAPACITOR CC ,
      CEDSA_CAPACITOR_SETTINGS CS ,
      CEDSA_CAPACITOR_SCHEDULES CSH,
      GIS_CEDSADEVICEID GD
    WHERE CS.DEVICE_ID        =CC.DEVICE_ID
    AND CS.DEVICE_ID          =CSH.DEVICE_ID
    AND CS.DEVICE_ID          =GD.DEVICE_ID
    AND CSH.CURRENT_FUTURE    =CS.CURRENT_FUTURE
    AND GD.FEATURE_CLASS_NAME ='Capacitor'
    AND CSH.SCHEDULE          =3
    )
    LOOP
      UPDATE SM_CAPACITOR
      SET SCH3_SCHEDULE           = I.SCHEDULE,
        SCH3_CONTROL_STRATEGY     =I.CONTROL_STRATEGY,
        SCH3_TIME_ON              =I.TIME_ON,
        SCH3_TIME_OFF             =I.TIME_OFF,
        SCH3_LOW_VOLTAGE_SETPOINT =I.LOW_VOLTAGE_SETPOINT,
        SCH3_HIGH_VOLTAGE_SETPOINT=I.HIGH_VOLTAGE_SETPOINT,
        SCH3_TEMP_SETPOINT_ON     =I.TEMP_SETPOINT_ON,
        SCH3_TEMP_SETPOINT_OFF    =I.TEMP_SETPOINT_OFF,
        SCH3_START_DATE           =I.START_DATE,
        SCH3_END_DATE             =I.END_DATE,
        SCH3_WEEKDAYS             =I.WEEKDAYS,
        SCH3_SATURDAY             =I.SATURDAY,
        SCH3_SUNDAY               =I.SUNDAY,
        SCH3_HOLIDAYS             =I.HOLIDAYS
      WHERE DEVICE_ID             =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;
    END LOOP;
  END;
  BEGIN
    FOR I IN
    (SELECT CS.DEVICE_ID,CS.CURRENT_FUTURE,
      CSH.SCHEDULE,
      CSH.CONTROL_STRATEGY,
      CSH.TIME_ON,
      CSH.TIME_OFF,
      CSH.LOW_VOLTAGE_SETPOINT,
      CSH.HIGH_VOLTAGE_SETPOINT,
      CSH.TEMP_SETPOINT_ON,
      CSH.TEMP_SETPOINT_OFF,
      CSH.START_DATE,
      CSH.END_DATE,
      CSH.WEEKDAYS,
      CSH.SATURDAY,
      CSH.SUNDAY,
      CSH.HOLIDAYS
    FROM CEDSA_CAPACITOR CC ,
      CEDSA_CAPACITOR_SETTINGS CS ,
      CEDSA_CAPACITOR_SCHEDULES CSH,
      GIS_CEDSADEVICEID GD
    WHERE CS.DEVICE_ID        =CC.DEVICE_ID
    AND CS.DEVICE_ID          =CSH.DEVICE_ID
    AND CS.DEVICE_ID          =GD.DEVICE_ID
    AND CSH.CURRENT_FUTURE    =CS.CURRENT_FUTURE
    AND GD.FEATURE_CLASS_NAME ='Capacitor'
    AND CSH.SCHEDULE          =4
    )
    LOOP
      UPDATE SM_CAPACITOR
      SET SCH4_SCHEDULE           = I.SCHEDULE,
        SCH4_CONTROL_STRATEGY     =I.CONTROL_STRATEGY,
        SCH4_TIME_ON              =I.TIME_ON,
        SCH4_TIME_OFF             =I.TIME_OFF,
        SCH4_LOW_VOLTAGE_SETPOINT =I.LOW_VOLTAGE_SETPOINT,
        SCH4_HIGH_VOLTAGE_SETPOINT=I.HIGH_VOLTAGE_SETPOINT,
        SCH4_TEMP_SETPOINT_ON     =I.TEMP_SETPOINT_ON,
        SCH4_TEMP_SETPOINT_OFF    =I.TEMP_SETPOINT_OFF,
        SCH4_START_DATE           =I.START_DATE,
        SCH4_END_DATE             =I.END_DATE,
        SCH4_WEEKDAYS             =I.WEEKDAYS,
        SCH4_SATURDAY             =I.SATURDAY,
        SCH4_SUNDAY               =I.SUNDAY,
        SCH4_HOLIDAYS             =I.HOLIDAYS
      WHERE DEVICE_ID             =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;
    END LOOP;
  END;
  COMMIT;
  UPDATE SM_CAPACITOR
  SET SCADA        ='Y'
  WHERE DEVICE_ID IN
    ( SELECT DEVICE_ID FROM CEDSA_SCADA SC
    ) ;
  UPDATE SM_CAPACITOR
  SET SCADA            ='N'
  WHERE DEVICE_ID NOT IN
    ( SELECT DEVICE_ID FROM CEDSA_SCADA SC
    );

  UPDATE SM_CAPACITOR
  SET SCADA        ='Y'
  WHERE DEVICE_ID IN
    ( SELECT DEVICE_ID FROM CEDSA_SCADA SC
    ) ;
  UPDATE SM_CAPACITOR
  SET SCADA            ='N'
  WHERE DEVICE_ID NOT IN
    ( SELECT DEVICE_ID FROM CEDSA_SCADA SC
    );
  BEGIN
    FOR I IN
    (SELECT CD.DEVICE_ID,
      CD.SCADA_TYPE,
      CD.RADIO_MANF_CD,
      CD.RADIO_MODEL_#,
      CD.RADIO_SERIAL_#
    FROM CEDSA_SCADA CD ,
      SM_CAPACITOR RE
    WHERE CD.DEVICE_ID = RE.DEVICE_ID
    )
    LOOP
      UPDATE SM_CAPACITOR
      SET SCADA_TYPE    =I.SCADA_TYPE,
        RADIO_MANF_CD   =I.RADIO_MANF_CD,
        RADIO_MODEL_NUM =I.RADIO_MODEL_#,
        RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
      WHERE DEVICE_ID   =I.DEVICE_ID;
    END LOOP;
  END;
  INSERT
  INTO SM_COMMENT_HIST
    (
      GLOBAL_ID,
      WORK_DATE,
      WORK_TYPE,
      PERFORMED_BY,
      ENTRY_DATE,
      COMMENTS
    )
  SELECT GD.GLOBAL_ID,
    CH.WORK_DATE,
    CH.WORK_TYPE,
    CH.PERFORMED_BY,
    CH.ENTRY_DATE,
    CH.COMMENTS
  FROM GIS_CEDSADEVICEID GD,
    CEDSA_CAPACITOR_HIST CH
  WHERE CH.DEVICE_ID=GD.DEVICE_ID;
  COMMIT;
  SELECT COUNT(*)
  INTO GD_COUNT
  FROM GIS_CEDSADEVICEID GD
  WHERE GD.FEATURE_CLASS_NAME ='Capacitor';
  SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_CAPACITOR_SETTINGS;
  SELECT COUNT(*) INTO SM_SEC FROM SM_CAPACITOR;
  DBMS_OUTPUT.PUT_LINE('Count of Capacitor from GIS_CEDSADEVICEID : '|| GD_COUNT );
  DBMS_OUTPUT.PUT_LINE('Count of Capacitor from CEDSA_SECTIONALIZER_SETTINGS : '|| SEC_SETT);
  DBMS_OUTPUT.PUT_LINE('Count of Capacitor from SM_CAPACITOR : '|| SM_SEC);


  BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SubCapacitorBank'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_CAPACITOR WHERE SM_CAPACITOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_CAPACITOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.SubCapacitorBank', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_CAPACITOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.SubCapacitorBank', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

END LOOP;
END;

BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.CapacitorBank'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_CAPACITOR WHERE SM_CAPACITOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_CAPACITOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.CapacitorBank', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_CAPACITOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.CapacitorBank', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

END LOOP;
END;

UPDATE SM_CAPACITOR SET CONTROL_TYPE='UNSP' WHERE CONTROL_TYPE IS NULL;

COMMIT;



SELECT COUNT(*) INTO SM_SEC   FROM SM_CAPACITOR ;
DBMS_OUTPUT.PUT_LINE('Count of CAPACITOR from SM_CAPACITOR after inserting default C/F records: '|| SM_SEC);


END SP_SM_CAPACITOR ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_CIRCUIT_BREAKER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_CIRCUIT_BREAKER" 
AS
GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_CIRCUIT_BREAKER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,
DEVICE_ID,DATE_MODIFIED,CURRENT_FUTURE,PHA_PR_RELAY_TYPE,PHA_PR_MIN_TRIP,PHA_PR_INS_TRIP,PHA_PR_LEVER_SET,
MIN_NOR_VOLT,ANNUAL_LF,NETWORK,DPA_CD,CC_RATING,FLISR,SCADA,DIRECT_TRANSFER_TRIP,RECLOSE_BLOCKING)
SELECT GD.GLOBAL_ID,'EDGIS.SubInterruptingDevice',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,
CR.CIRCUIT_BREAKER,CR.LAST_MODIFIED,'C',CR.RELAY_TYPE,CR.MIN_TRIP,CR.INS_TRIP,CR.LEVER_SET,
C.MIN_NOR_VOLT,C.ANNUAL_LF,C.NETWORK,C.DPA_CD,C.CC_RATING,C.FLISR,C.SCADA,C.DIRECT_TRANSFER_TRIP,C.RECLOSE_BLOCKING
FROM  CEDSA_CIRCUIT C ,CEDSA_CIRCUIT_RELAY CR,GIS_CEDSADEVICEID  GD
WHERE CR.CIRCUIT_BREAKER=C.DEVICE_ID and CR.CIRCUIT_BREAKER=GD.DEVICE_ID and GD.FEATURE_CLASS_NAME ='CircuitBreaker' AND CR.RELAY_CD='PHA';


INSERT INTO SM_CIRCUIT_BREAKER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,
DEVICE_ID,DATE_MODIFIED,CURRENT_FUTURE,PHA_PR_RELAY_TYPE,PHA_PR_MIN_TRIP,PHA_PR_INS_TRIP,PHA_PR_LEVER_SET,
MIN_NOR_VOLT,ANNUAL_LF,NETWORK,DPA_CD,CC_RATING,FLISR,SCADA,DIRECT_TRANSFER_TRIP,RECLOSE_BLOCKING)
SELECT GD.GLOBAL_ID,'EDGIS.SubInterruptingDevice',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,
CR.CIRCUIT_BREAKER,CR.LAST_MODIFIED,'F',CR.RELAY_TYPE,CR.MIN_TRIP,CR.INS_TRIP,CR.LEVER_SET,
C.MIN_NOR_VOLT,C.ANNUAL_LF,C.NETWORK,C.DPA_CD,C.CC_RATING,C.FLISR,C.SCADA,C.DIRECT_TRANSFER_TRIP,C.RECLOSE_BLOCKING
FROM  CEDSA_CIRCUIT C ,CEDSA_CIRCUIT_RELAY CR,GIS_CEDSADEVICEID  GD
WHERE CR.CIRCUIT_BREAKER=C.DEVICE_ID and CR.CIRCUIT_BREAKER=GD.DEVICE_ID and GD.FEATURE_CLASS_NAME ='CircuitBreaker' AND CR.RELAY_CD='PHA';


COMMIT;

BEGIN

FOR I IN (SELECT CR.CIRCUIT_BREAKER,GD.GLOBAL_ID,GD.FEATURE_CLASS_NAME,GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,CR.LAST_MODIFIED,CR.USER_AUDIT,CR.RELAY_TYPE,CR.MIN_TRIP,CR.INS_TRIP,CR.LEVER_SET,
C.MIN_NOR_VOLT,C.ANNUAL_LF,C.NETWORK ,C.DPA_CD,C.CC_RATING,C.FLISR,C.SCADA
FROM  CEDSA_CIRCUIT C ,CEDSA_CIRCUIT_RELAY CR,GIS_CEDSADEVICEID  GD
WHERE CR.CIRCUIT_BREAKER=C.DEVICE_ID and CR.CIRCUIT_BREAKER=GD.DEVICE_ID and GD.FEATURE_CLASS_NAME ='CircuitBreaker' AND CR.RELAY_CD='GRD')

LOOP

	UPDATE SM_CIRCUIT_BREAKER  SET
GRD_PR_RELAY_TYPE=I.RELAY_TYPE,GRD_PR_MIN_TRIP=I.MIN_TRIP,GRD_PR_INS_TRIP=I.INS_TRIP,GRD_PR_LEVER_SET=I.LEVER_SET
WHERE DEVICE_ID=I.CIRCUIT_BREAKER;

END LOOP;
END;


COMMIT;

/*  Commented as per change request on 062714

UPDATE  SM_CIRCUIT_BREAKER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_CIRCUIT_BREAKER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC);  */


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_CIRCUIT_BREAKER RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_CIRCUIT_BREAKER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

COMMIT;

SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='CircuitBreaker';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_CIRCUIT_RELAY;
SELECT COUNT(*) INTO SM_SEC   FROM SM_CIRCUIT_BREAKER;

DBMS_OUTPUT.PUT_LINE('Count of CIRCUIT_BREAKER from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of CIRCUIT_BREAKER from CEDSA_CIRCUIT_RELAY : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of CIRCUIT_BREAKER from SM_CIRCUIT_BREAKER : '|| SM_SEC);


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.FEATURE_CLASS_NAME ='CircuitBreaker' AND  GD.GIS_FEATURE_CLASS_NAME = 'EDGIS.SubInterruptingDevice'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_CIRCUIT_BREAKER WHERE SM_CIRCUIT_BREAKER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_CIRCUIT_BREAKER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_CIRCUIT_BREAKER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;


SELECT COUNT(*) INTO SM_SEC   FROM SM_CIRCUIT_BREAKER ;
DBMS_OUTPUT.PUT_LINE('Count of CircuitBreaker from SM_CIRCUIT_BREAKER after inserting default C/F records: '|| SM_SEC);


END SP_SM_CIRCUIT_BREAKER ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_INTERRUPTER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_INTERRUPTER" 
AS
GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_INTERRUPTER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID ,OK_TO_BYPASS ,CONTROL_SERIAL_NUM ,
MANF_CD ,CONTROL_TYPE ,FIRMWARE_VERSION ,SOFTWARE_VERSION,CURRENT_FUTURE,GRD_CUR_TRIP,GRD_TRIP_CD,TYP_CRV_GRD,PHA_CUR_TRIP,PHA_TRIP_CD,TYP_CRV_PHA,PREPARED_BY,DATE_MODIFIED,EFFECTIVE_DT)
SELECT GD.GLOBAL_ID,'EDGIS.DynamicProtectiveDevice',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,CI.DEVICE_ID ,CI.OK_TO_BYPASS, CI.CONTROL_SERIAL_# ,
CI.MANF_CD ,CI.CONTROL_TYPE ,CI.FIRMWARE_VERSION ,CI.SOFTWARE_VERSION ,CS.CURRENT_FUTURE,CS.GRD_CUR_TRIP,CS.GRD_TRIP_CD,CS.TYP_CRV_GRD,
CS.PHA_CUR_TRIP, CS.PHA_TRIP_CD, CS.TYP_CRV_PHA,CS.PREPARED_BY,CS.LAST_MODIFIED,CS.EFFECTIVE_DATE
FROM  CEDSA_INTERRUPTER CI,CEDSA_INTERRUPTER_SETTINGS CS,GIS_CEDSADEVICEID GD
WHERE CI.DEVICE_ID=CS.DEVICE_ID AND CI.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Interrupter';


COMMIT;

UPDATE  SM_INTERRUPTER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_INTERRUPTER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC);

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_INTERRUPTER RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_INTERRUPTER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

INSERT INTO SM_COMMENT_HIST ( GLOBAL_ID,WORK_DATE,WORK_TYPE,PERFORMED_BY,ENTRY_DATE,COMMENTS)
SELECT  GD.GLOBAL_ID,IH.WORK_DATE,IH.WORK_TYPE,IH.PERFORMED_BY,IH.ENTRY_DATE,IH.COMMENTS
FROM GIS_CEDSADEVICEID  GD,CEDSA_INTERRUPTER_HIST IH  WHERE IH.DEVICE_ID=GD.DEVICE_ID;

COMMIT;

SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='Interrupter';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_INTERRUPTER_SETTINGS;
SELECT COUNT(*) INTO SM_SEC   FROM SM_INTERRUPTER;

DBMS_OUTPUT.PUT_LINE('Count of Interrupter from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of Interrupter from CEDSA_SECTIONALIZER_SETTINGS : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of Interrupter from SM_INTERRUPTER : '|| SM_SEC);


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME,GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SubInterruptingDevice' and GD.FEATURE_CLASS_NAME='Interrupter'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_INTERRUPTER WHERE SM_INTERRUPTER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_INTERRUPTER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_INTERRUPTER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME,GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.DynamicProtectiveDevice' and GD.FEATURE_CLASS_NAME='Interrupter'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_INTERRUPTER WHERE SM_INTERRUPTER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_INTERRUPTER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_INTERRUPTER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;







SELECT COUNT(*) INTO SM_SEC   FROM SM_INTERRUPTER ;
DBMS_OUTPUT.PUT_LINE('Count of Interrupter from SM_INTERRUPTER after inserting default C/F records: '|| SM_SEC);


END SP_SM_INTERRUPTER ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_NETWORK_PROTECTOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_NETWORK_PROTECTOR" 
AS
  GD_COUNT NUMBER;
  SEC_SETT NUMBER;
  SM_SEC   NUMBER;

BEGIN


FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.FEATURE_CLASS_NAME ='NetworkProtector'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_NETWORK_PROTECTOR WHERE SM_NETWORK_PROTECTOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_NETWORK_PROTECTOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.NetworkProtector', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_NETWORK_PROTECTOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, 'EDGIS.NetworkProtector', I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;


SELECT COUNT(*) INTO SM_SEC   FROM SM_NETWORK_PROTECTOR ;

DBMS_OUTPUT.PUT_LINE('Count of CircuitBreaker from SM_NETWORK_PROTECTOR after inserting default C/F records: '|| SM_SEC);



END SP_SM_NETWORK_PROTECTOR ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_RECLOSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_RECLOSER" 
AS
GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_RECLOSER ( GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID,CONTROL_SERIAL_NUM,CONTROL_TYPE,BYPASS_PLANS,OPERATING_AS_CD,
CURRENT_FUTURE,GRD_MIN_TRIP,PHA_MIN_TRIP,GRD_INST_TRIP_CD,PHA_INST_TRIP_CD,GRD_OP_F_CRV,PHA_OP_F_CRV,GRD_RESP_TIME,PHA_RESP_TIME,GRD_FAST_CRV,PHA_FAST_CRV,
GRD_SLOW_CRV,PHA_SLOW_CRV,GRD_VMUL_FAST,PHA_VMUL_FAST,GRD_VMUL_SLOW,PHA_VMUL_SLOW,GRD_TADD_FAST,PHA_TADD_FAST,GRD_TADD_SLOW,PHA_TADD_SLOW,TOT_LOCKOUT_OPS,
RECLOSE1_TIME,RECLOSE2_TIME,RECLOSE3_TIME,RESET,SGF_CD,SGF_MIN_TRIP_PERCENT,SGF_TIME_DELAY,ALT_GRD_MIN_TRIP,ALT_PHA_MIN_TRIP,ALT_GRD_INST_TRIP_CD,ALT_PHA_INST_TRIP_CD,
ALT_GRD_OP_F_CRV,ALT_PHA_OP_F_CRV,ALT_GRD_RESP_TIME,ALT_PHA_RESP_TIME,ALT_GRD_FAST_CRV,ALT_PHA_FAST_CRV,ALT_GRD_SLOW_CRV,ALT_PHA_SLOW_CRV,ALT_GRD_VMUL_FAST,
ALT_PHA_VMUL_FAST,ALT_GRD_VMUL_SLOW,ALT_PHA_VMUL_SLOW,ALT_GRD_TADD_FAST,ALT_PHA_TADD_FAST,ALT_GRD_TADD_SLOW,ALT_PHA_TADD_SLOW,ALT_TOT_LOCKOUT_OPS,
ALT_RECLOSE1_TIME,ALT_RECLOSE2_TIME,ALT_RECLOSE3_TIME,ALT_RESET,ALT_SGF_CD,ALT_SGF_MIN_TRIP_PERCENT,ALT_SGF_TIME_DELAY,ALT2_PERMIT_LS_ENABLING,ALT2_GRD_ARMING_THRESHOLD,
ALT2_PHA_ARMING_THRESHOLD,ALT2_GRD_INRUSH_THRESHOLD,ALT2_PHA_INRUSH_THRESHOLD,ALT2_INRUSH_DURATION,ALT2_LS_LOCKOUT_OPS,ALT2_LS_RESET_TIME,ACTIVE_PROFILE,PERMIT_RB_CUTIN,DIRECT_TRANSFER_TRIP,BOC_VOLTAGE,RB_CUTOUT_TIME,DATE_MODIFIED)

SELECT  GD.GLOBAL_ID,'EDGIS.DynamicProtectiveDevice',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,RE.DEVICE_ID,RE.CONTROL_SERIAL_#,
RE.CONTROL_TYPE,RE.BYPASS_PLANS,RE.OPERATING_AS_CD,RS.CURRENT_FUTURE,RS.GRD_MIN_TRIP,RS.PHA_MIN_TRIP,RS.GRD_INST_TRIP_CD,RS.PHA_INST_TRIP_CD,
RS.GRD_OP_F_CRV,RS.PHA_OP_F_CRV,DECODE(RS.GRD_RESP_TIME,'X',NULL, TO_NUMBER(RS.GRD_RESP_TIME)),DECODE(RS.PHA_RESP_TIME,'X',NULL,TO_NUMBER(RS.PHA_RESP_TIME)),RS.GRD_FAST_CRV,RS.PHA_FAST_CRV,RS.GRD_SLOW_CRV,RS.PHA_SLOW_CRV,RS.GRD_VMUL_FAST,RS.PHA_VMUL_FAST,
RS.GRD_VMUL_SLOW,RS.PHA_VMUL_SLOW,RS.GRD_TADD_FAST,RS.PHA_TADD_FAST,RS.GRD_TADD_SLOW,RS.PHA_TADD_SLOW,RS.TOT_LOCKOUT_OPS,RS.RECLOSE1_TIME,RS.RECLOSE2_TIME,
RS.RECLOSE3_TIME,RS.RESET,RS.SGF_CD,RS.SGF_MIN_TRIP_PERCENT,RS.SGF_TIME_DELAY,RS.ALT_GRD_MIN_TRIP,RS.ALT_PHA_MIN_TRIP,RS.ALT_GRD_INST_TRIP_CD,RS.ALT_PHA_INST_TRIP_CD,
RS.ALT_GRD_OP_F_CRV,RS.ALT_PHA_OP_F_CRV,DECODE(RS.ALT_GRD_RESP_TIME,'X',NULL,TO_NUMBER(RS.ALT_GRD_RESP_TIME)),DECODE(RS.ALT_PHA_RESP_TIME,'X',NULL,TO_NUMBER(RS.ALT_PHA_RESP_TIME)),RS.ALT_GRD_FAST_CRV,RS.ALT_PHA_FAST_CRV,RS.ALT_GRD_SLOW_CRV,RS.ALT_PHA_SLOW_CRV,
RS.ALT_GRD_VMUL_FAST,RS.ALT_PHA_VMUL_FAST,RS.ALT_GRD_VMUL_SLOW,RS.ALT_PHA_VMUL_SLOW,RS.ALT_GRD_TADD_FAST,RS.ALT_PHA_TADD_FAST,RS.ALT_GRD_TADD_SLOW,RS.ALT_PHA_TADD_SLOW,
RS.ALT_TOT_LOCKOUT_OPS,RS.ALT_RECLOSE1_TIME,RS.ALT_RECLOSE2_TIME,RS.ALT_RECLOSE3_TIME,RS.ALT_RESET,RS.ALT_SGF_CD,RS.ALT_SGF_MIN_TRIP_PERCENT,RS.ALT_SGF_TIME_DELAY,RS.PERMIT_LS_ENABLING,
RS.GRD_ARMING_THRESHOLD,RS.PHA_ARMING_THRESHOLD,RS.GRD_INRUSH_THRESHOLD,RS.PHA_INRUSH_THRESHOLD,RS.INRUSH_DURATION,RS.LS_LOCKOUT_OPS,RS.LS_RESET_TIME,RS.ACTIVE_PROFILE,
RS.PERMIT_RB_CUTIN,RS.DIRECT_TRANSFER_TRIP,RS.BOC_VOLTAGE,RS.RB_CUTOUT_TIME,RS.LAST_MODIFIED
FROM CEDSA_RECLOSER  RE ,CEDSA_RECLOSER_SETTINGS  RS,GIS_CEDSADEVICEID  GD   WHERE RE.DEVICE_ID=RS.DEVICE_ID AND RE.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Recloser';

COMMIT;

UPDATE  SM_RECLOSER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_RECLOSER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC);


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_RECLOSER RE  WHERE CD.DEVICE_ID = RE.DEVICE_ID )
LOOP
UPDATE SM_RECLOSER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
 WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

INSERT INTO SM_COMMENT_HIST ( GLOBAL_ID,WORK_DATE,WORK_TYPE,PERFORMED_BY,ENTRY_DATE,COMMENTS)
SELECT  GD.GLOBAL_ID,RH.WORK_DATE,RH.WORK_TYPE,RH.PERFORMED_BY,RH.ENTRY_DATE,RH.COMMENTS
FROM GIS_CEDSADEVICEID  GD,CEDSA_RECLOSER_HIST RH  WHERE RH.DEVICE_ID=GD.DEVICE_ID;

COMMIT;

SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='Recloser';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_RECLOSER_SETTINGS;
SELECT COUNT(*) INTO SM_SEC   FROM SM_RECLOSER;

DBMS_OUTPUT.PUT_LINE('Count of Reclosure from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of Reclosure from CEDSA_RECLOSER_SETTINGS : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of Reclosure from SM_RECLOSER : '|| SM_SEC);



BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME,GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.FEATURE_CLASS_NAME ='Recloser' AND GD.GIS_FEATURE_CLASS_NAME ='EDGIS.DynamicProtectiveDevice'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_RECLOSER WHERE SM_RECLOSER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_RECLOSER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_RECLOSER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

END LOOP;
END;


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME,GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.FEATURE_CLASS_NAME ='Recloser' AND GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SubInterruptingDevice'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_RECLOSER WHERE SM_RECLOSER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_RECLOSER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_RECLOSER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

END LOOP;
END;


UPDATE SM_RECLOSER SET CONTROL_TYPE='3A' WHERE CONTROL_TYPE IS NULL;
COMMIT;

SELECT COUNT(*) INTO SM_SEC   FROM SM_RECLOSER ;
DBMS_OUTPUT.PUT_LINE('Count of Recloser from SM_RECLOSER after inserting default C/F records: '|| SM_SEC);


END SP_SM_RECLOSER ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_REGULATOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_REGULATOR" 
AS
GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_REGULATOR (GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,
DEVICE_ID,PREPARED_BY,DATE_MODIFIED,EFFECTIVE_DT,CURRENT_FUTURE,PRIMARY_CT_RATING,BAND_WIDTH,PT_RATIO,RANGE_UNBLOCKED,
BLOCKED_PCT,STEPS,PEAK_LOAD,MIN_LOAD,PVD_MAX,PVD_MIN,SVD_MIN,POWER_FACTOR,LOAD_CYCLE,RISE_RATING,TIMER,
CONTROL_TYPE,FIRMWARE_VERSION,SOFTWARE_VERSION,BANK_CD)
SELECT GD.GLOBAL_ID,'EDGIS.VoltageRegulatorUnit',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,
RE.DEVICE_ID,RE.PREPARED_BY,RE.LAST_MODIFIED,RE.EFFECTIVE_DATE,RE.CURRENT_FUTURE,RE.PRIMARY_CT_RATING,RE.BAND_WIDTH,
RE.PT_RATIO,RE.RANGE_UNBLOCKED,RE.BLOCKED_PCT,RE.STEPS,RE.PEAK_LOAD,RE.MIN_LOAD,RE.PVD_MAX,RE.PVD_MIN,RE.SVD_MIN,RE.POWER_FACTOR,
RE.LOAD_CYCLE,RE.RISE_RATING,RE.TIMER,
RB.CONTROL_TYPE,RB.FIRMWARE_VERSION,RB.SOFTWARE_VERSION,RB.BANK_CD
FROM CEDSA_REGULATOR_SETTINGS RE, CEDSA_REGULATOR_BANK RB ,GIS_CEDSADEVICEID  GD
WHERE RE.DEVICE_ID=RB.DEVICE_ID AND RB.DEVICE_ID=GD.DEVICE_ID
AND GD.BANKCODE = RB.BANK_CD
AND GD.FEATURE_CLASS_NAME ='Regulator';


COMMIT;

UPDATE  SM_REGULATOR
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_REGULATOR
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC);

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_REGULATOR RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_REGULATOR  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

INSERT INTO SM_COMMENT_HIST ( GLOBAL_ID,WORK_DATE,WORK_TYPE,PERFORMED_BY,ENTRY_DATE,COMMENTS)
SELECT  GD.GLOBAL_ID,RH.WORK_DATE,RH.WORK_TYPE,RH.PERFORMED_BY,RH.ENTRY_DATE,RH.COMMENTS
FROM GIS_CEDSADEVICEID  GD,CEDSA_REGULATOR_HIST RH  WHERE RH.DEVICE_ID=GD.DEVICE_ID;


COMMIT;

SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='Regulator';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_REGULATOR_SETTINGS;
SELECT COUNT(*) INTO SM_SEC   FROM SM_REGULATOR;

DBMS_OUTPUT.PUT_LINE('Count of REGULATOR from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of REGULATOR from CEDSA_REGULATOR_SETTINGS : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of REGULATOR from SM_REGULATOR : '|| SM_SEC);


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME,GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SUBTransformerBank'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_REGULATOR WHERE SM_REGULATOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME,GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.VoltageRegulatorUnit'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_REGULATOR WHERE SM_REGULATOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;

BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME,GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SubVoltageRegulatorUnit'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_REGULATOR WHERE SM_REGULATOR.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_REGULATOR(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;

-- This code is to remove the Bank Code suffix from the operating numbers
DELETE FROM GIS_CEDSADEVICEID_VR;

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code 1') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code 1%'  and current_future='F'
);

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code 2') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code 2%'  and current_future='F'
);

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code 3') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code 3%'  and current_future='F'
);

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code ') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code '  and current_future='F'
);


-- This code is to remove the Bank Code suffix from the operating numbers  where Bank Code (two spaces) values
INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code  1') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code  1%'  and current_future='F'
);

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code  2') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code  2%'  and current_future='F'
);

INSERT into GIS_CEDSADEVICEID_VR ( GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,OPERATING_NUM)
(
   SELECT GLOBAL_ID,FEATURE_CLASS_NAME,DEVICE_ID,DIVISION,DISTRICT,replace(operating_num, '- Bank Code  3') 
   FROM SM_REGULATOR 
   WHERE  operating_num like '%- Bank Code  3%'  and current_future='F'
);






UPDATE    (
SELECT SR.operating_num old_opr_num, VR.operating_num new_opr_num 
FROM SM_REGULATOR  SR, GIS_CEDSADEVICEID_VR VR
WHERE SR.global_id=VR.global_id )
SET old_opr_num=new_opr_num;

COMMIT;



SELECT COUNT(*) INTO SM_SEC   FROM SM_REGULATOR ;
DBMS_OUTPUT.PUT_LINE('Count of REGULATOR from SM_REGULATOR after inserting default C/F records: '|| SM_SEC);





END SP_SM_REGULATOR ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_SECTIONALIZER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_SECTIONALIZER" 
AS

GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_SECTIONALIZER ( GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID,PREPARED_BY,CONTROL_SERIAL_NUM,DATE_MODIFIED,EFFECTIVE_DT,CURRENT_FUTURE,CONTROL_TYPE,SECT_TYPE,MIN_PC_TO_CT,
PHA_INRUSH_DURATION,PHA_INRUSH_MULTIPLIER,PHA_INRUSH_TIME,FIRST_RECLOSE_RESET_TIME,REQUIRED_FAULT_CURRENT,MIN_GRD_TO_CT,GRD_INRUSH_DURATION,GRD_INRUSH_MULTIPLIER,GRD_INRUSH_TIME,
RESET,VOLT_THRESHOLD,LOCKOUT_NUM,ONE_SHOT_LOCKOUT_NUM,FIRMWARE_VERSION,SOFTWARE_VERSION)
SELECT GD.GLOBAL_ID,'EDGIS.DynamicProtectiveDevice',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,SE.DEVICE_ID,SS.PREPARED_BY,SE.CONTROL_SERIAL_#,SS.LAST_MODIFIED,SS.EFFECTIVE_DATE,SS.CURRENT_FUTURE,SE.CONTROL_TYPE,SE.SECT_TYPE,
SS.MIN_PC_TO_CT,SS.PHA_INRUSH_DURATION,SS.PHA_INRUSH_MULTIPLIER,SS.PHA_INRUSH_TIME,SS.FIRST_RECLOSE_RESET_TIME,SS.REQUIRED_FAULT_CURRENT,SS.MIN_GRD_TO_CT,
SS.GRD_INRUSH_DURATION,SS.GRD_INRUSH_MULTIPLIER,SS.GRD_INRUSH_TIME,SS.RESET,SS.VOLT_THRESHOLD,SS.LOCKOUT_#,SS.ONE_SHOT_LOCKOUT_#,
SE.FIRMWARE_VERSION,SE.SOFTWARE_VERSION
FROM CEDSA_SECTIONALIZER SE, CEDSA_SECTIONALIZER_SETTINGS SS,GIS_CEDSADEVICEID  GD
WHERE SE.DEVICE_ID=SS.DEVICE_ID AND SE.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Sectionalizer';

UPDATE  SM_SECTIONALIZER
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_SECTIONALIZER
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC) ;

COMMIT;

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_SECTIONALIZER SE   WHERE CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_SECTIONALIZER  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

INSERT INTO SM_COMMENT_HIST ( GLOBAL_ID,WORK_DATE,WORK_TYPE,PERFORMED_BY,ENTRY_DATE,COMMENTS)
SELECT  GD.GLOBAL_ID,SH.WORK_DATE,SH.WORK_TYPE,SH.PERFORMED_BY,SH.ENTRY_DATE,SH.COMMENTS
FROM GIS_CEDSADEVICEID  GD,CEDSA_SECTIONALIZER_HIST SH  WHERE SH.DEVICE_ID=GD.DEVICE_ID;


SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='Sectionalizer';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_SECTIONALIZER_SETTINGS;
SELECT COUNT(*) INTO SM_SEC   FROM SM_SECTIONALIZER ;

DBMS_OUTPUT.PUT_LINE('Count of Sectionalizer from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of Sectionalizer from CEDSA_SECTIONALIZER_SETTINGS : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of Sectionalizer from SM_SECTIONALIZER : '|| SM_SEC);

COMMIT;

BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME,GD.GIS_FEATURE_CLASS_NAME, GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.FEATURE_CLASS_NAME ='Sectionalizer' AND GD.GIS_FEATURE_CLASS_NAME='EDGIS.DynamicProtectiveDevice'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_SECTIONALIZER WHERE SM_SECTIONALIZER.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_SECTIONALIZER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C');

INSERT INTO SM_SECTIONALIZER(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F');

COMMIT;
END LOOP;
END;

SELECT COUNT(*) INTO SM_SEC   FROM SM_SECTIONALIZER ;
DBMS_OUTPUT.PUT_LINE('Count of Sectionalizer from SM_SECTIONALIZER after inserting default C/F records: '|| SM_SEC);


END SP_SM_SECTIONALIZER ;

/
--------------------------------------------------------
--  DDL for Procedure SP_SM_SWITCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_SM_SWITCH" 
AS
GD_COUNT  NUMBER;
SEC_SETT  NUMBER;
SM_SEC	  NUMBER;

BEGIN

INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,CURRENT_FUTURE,
DEVICE_ID,CONTROL_SERIAL_NUM,CONTROL_UNIT_TYPE,SWITCH_TYPE ,SECTIONALIZING_FEATURE,FIRMWARE_VERSION,SOFTWARE_VERSION,DATE_MODIFIED)
SELECT GD.GLOBAL_ID,'EDGIS.Switch',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,
'C',CS.DEVICE_ID,CS.CONTROL_SERIAL_#,CS.CONTROL_TYPE,CS.SWITCH_TYPE,CS.SECTIONALIZING_FEATURE,CS.FIRMWARE_VERSION,CS.SOFTWARE_VERSION,SYSDATE
FROM CEDSA_SWITCH CS ,GIS_CEDSADEVICEID  GD
WHERE CS.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Switch';

INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,CURRENT_FUTURE,
DEVICE_ID,CONTROL_SERIAL_NUM,CONTROL_UNIT_TYPE,SWITCH_TYPE ,SECTIONALIZING_FEATURE,FIRMWARE_VERSION,SOFTWARE_VERSION,DATE_MODIFIED)
SELECT GD.GLOBAL_ID,'EDGIS.Switch',GD.OPERATING_NUM,GD.DIVISION,GD.DISTRICT,
'F',CS.DEVICE_ID,CS.CONTROL_SERIAL_#,CS.CONTROL_TYPE,CS.SWITCH_TYPE,CS.SECTIONALIZING_FEATURE,CS.FIRMWARE_VERSION,CS.SOFTWARE_VERSION,SYSDATE
FROM CEDSA_SWITCH CS ,GIS_CEDSADEVICEID  GD
WHERE CS.DEVICE_ID=GD.DEVICE_ID AND GD.FEATURE_CLASS_NAME ='Switch';



COMMIT;


UPDATE  SM_SWITCH
SET SCADA='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC ) ;

UPDATE  SM_SWITCH
SET SCADA='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_SCADA SC);


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.SCADA_TYPE,CD.RADIO_MANF_CD,CD.RADIO_MODEL_#,CD.RADIO_SERIAL_#  FROM CEDSA_SCADA CD ,SM_SWITCH RE   WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP
UPDATE SM_SWITCH  SET  SCADA_TYPE=I.SCADA_TYPE,RADIO_MANF_CD=I.RADIO_MANF_CD,RADIO_MODEL_NUM=I.RADIO_MODEL_#,RADIO_SERIAL_NUM=I.RADIO_SERIAL_#
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

INSERT INTO SM_COMMENT_HIST ( GLOBAL_ID,WORK_DATE,WORK_TYPE,PERFORMED_BY,ENTRY_DATE,COMMENTS)
SELECT  GD.GLOBAL_ID,SH.WORK_DATE,SH.WORK_TYPE,SH.PERFORMED_BY,SH.ENTRY_DATE,SH.COMMENTS
FROM GIS_CEDSADEVICEID  GD,CEDSA_SWITCH_HIST SH  WHERE SH.DEVICE_ID=GD.DEVICE_ID;

COMMIT;

SELECT COUNT(*) INTO GD_COUNT FROM GIS_CEDSADEVICEID  GD WHERE GD.FEATURE_CLASS_NAME ='Switch';
SELECT COUNT(*) INTO SEC_SETT FROM CEDSA_SWITCH;
SELECT COUNT(*) INTO SM_SEC   FROM SM_SWITCH;

DBMS_OUTPUT.PUT_LINE('Count of SWITCH from GIS_CEDSADEVICEID : '|| GD_COUNT );
DBMS_OUTPUT.PUT_LINE('Count of SWITCH from CEDSA_SWITCH : '|| SEC_SETT);
DBMS_OUTPUT.PUT_LINE('Count of SWITCH from SM_SWITCH : '|| SM_SEC);


BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME,GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.Switch'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_SWITCH WHERE SM_SWITCH.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE,DATE_MODIFIED)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C',SYSDATE);

INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE,DATE_MODIFIED)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F',SYSDATE);

END LOOP;
END;




BEGIN
FOR I IN (SELECT GD.GLOBAL_ID, GD.FEATURE_CLASS_NAME, GD.GIS_FEATURE_CLASS_NAME,GD.OPERATING_NUM, GD.DIVISION, GD.DISTRICT, GD.DEVICE_ID
FROM  GIS_CEDSADEVICEID GD WHERE  GD.GIS_FEATURE_CLASS_NAME ='EDGIS.SubSwitch'
AND   NOT EXISTS (SELECT DEVICE_ID FROM SM_SWITCH WHERE SM_SWITCH.DEVICE_ID = GD.DEVICE_ID))

LOOP
INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE,DATE_MODIFIED)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'C',SYSDATE);

INSERT INTO SM_SWITCH(GLOBAL_ID,FEATURE_CLASS_NAME,OPERATING_NUM,DIVISION,DISTRICT,DEVICE_ID, CURRENT_FUTURE,DATE_MODIFIED)
VALUES( I.GLOBAL_ID, I.GIS_FEATURE_CLASS_NAME, I.OPERATING_NUM, I.DIVISION, I.DISTRICT, I.DEVICE_ID,'F',SYSDATE);

END LOOP;
END;


UPDATE SM_SWITCH SET SWITCH_TYPE='1'   WHERE SWITCH_TYPE IS NULL;
UPDATE SM_SWITCH SET  ATS_CAPABLE='N'  WHERE  ATS_CAPABLE IS NULL;
COMMIT;

SELECT COUNT(*) INTO SM_SEC   FROM SM_SWITCH ;
DBMS_OUTPUT.PUT_LINE('Count of Switch from SM_SWITCH after inserting default C/F records: '|| SM_SEC);



END SP_SM_SWITCH ;

/
--------------------------------------------------------
--  DDL for Procedure SP_RTU_NOTES_SPECIALCOND_UPD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "EDSETT"."SP_RTU_NOTES_SPECIALCOND_UPD" 
AS
BEGIN



--- Get the CEDSA data for DEVICE & REMOTE_TERM_UNIT for migratinng data for NOTES and RTU fields
execute IMMEDIATE 'TRUNCATE TABLE CEDSA_DEVICE_TEMP' ;
execute IMMEDIATE 'TRUNCATE TABLE CEDSA_REMOTE_TERM_UNIT';
execute IMMEDIATE 'TRUNCATE TABLE CEDSA_STRUCTURE';

INSERT INTO CEDSA_DEVICE_TEMP  SELECT * FROM  EDSETTCEDSA.DEVICE;
INSERT INTO CEDSA_REMOTE_TERM_UNIT  SELECT * FROM  EDSETTCEDSA.REMOTE_TERM_UNIT;
INSERT INTO CEDSA_STRUCTURE  SELECT * FROM  EDSETTCEDSA.STRUCTURE;


--- Data Migration for Relcoser field - MULTI_FUNCTIONAL 
BEGIN
FOR I IN (SELECT  RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.MULTI_FUNCTIONAL  FROM CEDSA_RECLOSER  CD ,SM_RECLOSER RE WHERE CD.DEVICE_ID = RE.DEVICE_ID )
LOOP
UPDATE SM_RECLOSER  SET
	MULTI_FUNCTIONAL=I.MULTI_FUNCTIONAL
WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE ;

END LOOP;
END;

UPDATE SM_RECLOSER  SET  MULTI_FUNCTIONAL='Y' WHERE  MULTI_FUNCTIONAL='1';
UPDATE SM_RECLOSER  SET  MULTI_FUNCTIONAL='N' WHERE  MULTI_FUNCTIONAL='0';



--- Data Migration for Regulator fields - SEASON_OFF,SWITCH_POSITION,EMERGENCY_ONLY 

BEGIN
FOR I IN (SELECT RE.DEVICE_ID,CD.SEASON_OFF,CD.SWITCH_POSITION,CD.EMERGENCY_ONLY ,RE.CURRENT_FUTURE FROM CEDSA_REGULATOR CD,SM_REGULATOR RE WHERE 
CD.DEVICE_ID = RE.DEVICE_ID)
LOOP

UPDATE SM_REGULATOR SET 
	SEASON_OFF=I.SEASON_OFF
	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

UPDATE SM_REGULATOR SET 
	SWITCH_POSITION=I.SWITCH_POSITION
	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

UPDATE SM_REGULATOR SET 
	EMERGENCY_ONLY=I.EMERGENCY_ONLY
	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;


END LOOP;
END;



--- Data Migration for Sectionaliser - FLISR


BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.FLISR  FROM CEDSA_SCADA CD ,SM_SECTIONALIZER RE WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_SECTIONALIZER SET  FLISR=I.FLISR  WHERE DEVICE_ID =I.DEVICE_ID;

END LOOP;
END;

UPDATE SM_SECTIONALIZER  SET  FLISR='Y' WHERE  FLISR='1';
UPDATE SM_SECTIONALIZER  SET  FLISR='N' WHERE  FLISR='0';

--- RTU Update for Sectionalizer

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION,CD.MANF_CD    FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_SECTIONALIZER SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_SECTIONALIZER  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD  
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

UPDATE  SM_SECTIONALIZER
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_SECTIONALIZER
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;





--- RTU Update for Capacitor

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION,CD.MANF_CD   FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_CAPACITOR SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_CAPACITOR  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD =I.MANF_CD 
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;



UPDATE  SM_CAPACITOR
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_CAPACITOR
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;




--- RTU Update for Recloser

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION,CD.MANF_CD   FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_RECLOSER SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_RECLOSER  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;



UPDATE  SM_RECLOSER
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_RECLOSER
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;



--- RTU Update for Interrupter

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION,CD.MANF_CD   FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_INTERRUPTER SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_INTERRUPTER  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;

UPDATE  SM_INTERRUPTER
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_INTERRUPTER
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;



--- RTU Update for Switch

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION,CD.MANF_CD   FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_SWITCH SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_SWITCH SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;


UPDATE  SM_SWITCH
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_SWITCH
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;




--- RTU Update for Regulator

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION ,CD.MANF_CD  FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_REGULATOR SE   WHERE 
CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_REGULATOR  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;



UPDATE  SM_REGULATOR
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_REGULATOR
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;



--- RTU Update for Circuit Breaker

BEGIN
FOR I IN (SELECT CD.DEVICE_ID,CD.MODEL_#,CD.SERIAL_#,CD.FIRMWARE_VERSION ,CD.SOFTWARE_VERSION ,CD.MANF_CD  FROM CEDSA_REMOTE_TERM_UNIT  CD ,SM_CIRCUIT_BREAKER SE   
WHERE CD.DEVICE_ID =SE.DEVICE_ID )
LOOP
UPDATE SM_CIRCUIT_BREAKER  SET  
RTU_MODEL_NUM=I.MODEL_#,RTU_SERIAL_NUM=I.SERIAL_#,RTU_FIRMWARE_VERSION=I.FIRMWARE_VERSION,RTU_SOFTWARE_VERSION=I.SOFTWARE_VERSION,RTU_MANF_CD=I.MANF_CD
WHERE DEVICE_ID =I.DEVICE_ID;
END LOOP;
END;


UPDATE  SM_CIRCUIT_BREAKER
SET RTU_EXIST='Y'
WHERE DEVICE_ID IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC ) ;

UPDATE  SM_CIRCUIT_BREAKER
SET RTU_EXIST='N'
WHERE DEVICE_ID NOT IN ( SELECT DEVICE_ID FROM CEDSA_REMOTE_TERM_UNIT SC) ;





--- Data Migration  from NOTES to ENGINEERING_COMMENTS for all devices

BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_SECTIONALIZER RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_SECTIONALIZER SET  ENGINEERING_COMMENTS=I.NOTES WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;


BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_INTERRUPTER RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_INTERRUPTER SET  ENGINEERING_COMMENTS=I.NOTES WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;


BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_REGULATOR RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_REGULATOR SET  ENGINEERING_COMMENTS=I.NOTES
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;


BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_SWITCH RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_SWITCH SET  ENGINEERING_COMMENTS=I.NOTES
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;


BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_CAPACITOR RE
WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_CAPACITOR SET  ENGINEERING_COMMENTS=I.NOTES
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;



BEGIN
FOR I IN (SELECT RE.DEVICE_ID,RE.CURRENT_FUTURE,CD.NOTES FROM CEDSA_DEVICE_TEMP CD ,SM_RECLOSER RE WHERE CD.DEVICE_ID =RE.DEVICE_ID )
LOOP

UPDATE SM_RECLOSER SET  ENGINEERING_COMMENTS=I.NOTES
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;




--- Migrating the SPECIAL_CONDITIONS field data from CEDSA_STRUCTURE to all DEVICE tables


BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_CAPACITOR RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_CAPACITOR SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;


BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_RECLOSER RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_RECLOSER SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;



BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_REGULATOR RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_REGULATOR SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;



BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_SWITCH RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_SWITCH SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;



BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_INTERRUPTER RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_INTERRUPTER SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;




BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_SECTIONALIZER RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_SECTIONALIZER  SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;




BEGIN
FOR I IN (SELECT RES.DEVICE_ID,RES.CURRENT_FUTURE,CD.SPECIAL_CONDITIONS FROM CEDSA_STRUCTURE CD,
  (SELECT CT.DEVICE_ID,CT.STRUC_ID,RE.CURRENT_FUTURE FROM CEDSA_DEVICE_TEMP CT , SM_CIRCUIT_BREAKER RE  WHERE  CT.DEVICE_ID = RE.DEVICE_ID) RES
WHERE RES.STRUC_ID=CD.STRUC_ID)

LOOP

UPDATE SM_CIRCUIT_BREAKER  SET  SPECIAL_CONDITIONS=I.SPECIAL_CONDITIONS
 	WHERE DEVICE_ID =I.DEVICE_ID AND CURRENT_FUTURE=I.CURRENT_FUTURE;

END LOOP;
END;





COMMIT;
END  SP_RTU_NOTES_SPECIALCOND_UPD;

/
