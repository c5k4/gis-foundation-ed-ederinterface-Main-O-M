<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 4 U (http://www.xmlspy.com) by XMLSPY 5 Professional Ed., Installed Multi + SMP for 10 users (Miner & Miner Engineering) -->
<!--W3C Schema generated by XMLSPY v5 rel. 4 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:element name="SystemMapper">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="MapperType" type="xs:string"/>
				<xs:element name="DomainXMLPath" type="xs:string"/>
				<xs:element name="DataWriter" type="xs:string"/>
				<xs:element ref="TrackedClasses"/>
				<xs:element ref="Settings" minOccurs="0"/>
        <xs:element ref="ReverseSyncedClasses" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Field">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="FieldMapper"/>
			</xs:sequence>
			<xs:attribute name="OutName" type="xs:string" use="required"/>
			<xs:attribute name="Sequence" type="xs:positiveInteger" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Fields">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Field" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="MapperType">
		<xs:complexType/>
	</xs:element>
	<xs:element name="TrackedClass" type="TrackedClass"/>
	<xs:element name="TrackedClasses">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="TrackedClass" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Setting">
		<xs:complexType>
			<xs:attribute name="Name" type="xs:string" use="required"/>
			<xs:attribute name="Value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Settings">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Setting" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <xs:element name="SubtypeDomainMap">
    <xs:complexType>
      <xs:attribute name="Subtype" type="xs:int"/>
      <xs:attribute name="Domain" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Subtypes">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SubtypeDomainMap" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AttributeMap">
    <xs:complexType>
      <xs:attribute name="FromValue" type="xs:string"/>
      <xs:attribute name="ToValue" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="AttributeMapping">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="AttributeMap" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!--FieldMapper Schema Definition -->
	<!--Add New Field Mappers if any after this-->
	<xs:element name="FieldMapper">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="FieldValueTransformer"/>
        <xs:element ref="AttributeMappingTransformer"/>
        <xs:element ref="AlternateFieldTransformer"/>
				<xs:element ref="StaticValueTransformer"/>
				<xs:element ref="DateTimeTransformer"/>
				<xs:element ref="AlternateDateTimeTransformer"/>
        <xs:element ref="AlternateNumberTransformer"/>
				<xs:element ref="DomainTransformer"/>
        <xs:element ref="SubtypeDomainTransformer"/>
				<xs:element ref="SpatialIndexTransformer"/>
				<xs:element ref="XYTransformer"/>
				<xs:element ref="RelationshipFieldTransformer"/>
				<xs:element ref="MultiRelationshipFieldTransformer"/>
        <xs:element ref="CircuitRelatedFieldTransformer"/>
				<!-- If a new Mapper type is identified and needs to be added add an XS:ELEMENT defining the mapper here as a reference to the mapper-->
			</xs:choice>
			<xs:attribute name="TransformerType" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- Transformer which gets the value from the mapped Field-->
	<xs:element name="FieldValueTransformer">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:string">
					<xs:attribute name="FieldName" type="xs:string" use="required"/>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	<!-- Transformer which gets the value from the mapped Field and if that value is null gets it from alternate field-->
	<xs:element name="AlternateFieldTransformer">
		<xs:complexType>
			<xs:attribute name="FieldName" type="xs:string" use="required"/>
			<xs:attribute name="AlternateField" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- Transformer which gets the value as specified in the StaticValue-->
	<xs:element name="StaticValueTransformer">
		<xs:complexType>
			<xs:attribute name="StaticValue" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- Transformer which gets the value from the mapped Field in a specified DateFormat-->
	<xs:element name="DateTimeTransformer">
		<xs:complexType>
			<xs:attribute name="FieldName" use="required"/>
			<xs:attribute name="DateFormat" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- Transformer which gets the value from the mapped Field in a specified DateFormat if the field value is null looks at the Alternate Field-->
	<xs:element name="AlternateDateTimeTransformer">
		<xs:complexType>
			<xs:attribute name="FieldName" type="xs:string" use="required"/>
			<xs:attribute name="AlternateField" type="xs:string" use="required"/>
			<xs:attribute name="DateFormat" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
  <!-- Transformer: If it finds a number, it returns the alternateValue. If both fields are null or 0 return the unspecifiedValue.-->
  <xs:element name="AlternateNumberTransformer">
    <xs:complexType>
      <xs:attribute name="FieldName" type="xs:string" use="required"/>
      <xs:attribute name="AlternateField" type="xs:string" use="required"/>
      <xs:attribute name="FieldValue" type="xs:string" use="optional"/>
      <xs:attribute name="AlternateValue" type="xs:string" use="optional"/>
      <xs:attribute name="UnspecifiedValue" type="xs:string" use="optional"/>
    </xs:complexType>
  </xs:element>
  <!-- Transformer which gets the value from the mapped Field and refers a domain mapping xml to determine the value to be sent.-->
	<xs:element name="DomainTransformer">
		<xs:complexType>
			<xs:attribute name="FieldName" type="xs:string" use="required"/>
			<xs:attribute name="DomainName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
  <!-- Transformer which gets the value and subtype code from the mapped Field and refers a domain mapping xml to determine the value to be sent.-->
  <xs:element name="SubtypeDomainTransformer">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Subtypes"/>
      </xs:sequence>
      <xs:attribute name="FieldName" type="xs:string" use="required"/>
      <xs:attribute name="DomainName" type="xs:string" use="optional"/>
    </xs:complexType>
  </xs:element>
  <!-- Transformer which gets the attribute value and assigns a different value as required by SAP-->
  <xs:element name="AttributeMappingTransformer">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="AttributeMapping"/>
      </xs:sequence>
      <xs:attribute name="FieldName" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <!--Transformer which gets the value from the mapped Field after doing a spatial query on the featureclass mentioned. The featureclass name should be fully qualified. -->
	<xs:element name="SpatialIndexTransformer">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="FieldMapper"/>
			</xs:sequence>
			<xs:attribute name="FeatureClassName" type="xs:string" use="required"/>
			<xs:attribute name="SpatialRelation" type="SpatialIndexRelation" use="required"/>
		</xs:complexType>
	</xs:element>
	<!--Transformer which gets the X,Y value from the mapped Field if the  mapped field is of type Shape-->
	<xs:element name="XYTransformer">
		<xs:complexType>
			<xs:attribute name="FieldName" use="required"/>
		</xs:complexType>
	</xs:element>
	<!--Transformer which gets the value from the mapped Field after getting a related object based on the relationshipclass name. The relationshipclass name should be fully qualified. -->
	<xs:element name="RelationshipFieldTransformer">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="FieldMapper"/>
			</xs:sequence>
			<xs:attribute name="RelationshipName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!--Transformer which gets the value from the mapped Field after getting a related object based on the relationshipclass name. The relationshipclass name should be fully qualified. -->
	<!--Repeats itself until a related object is found for the initial feature or object -->
	<xs:element name="MultiRelationshipFieldTransformer">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Relationships"/>
				<xs:element ref="FieldMapper"/>
			</xs:choice>
			<xs:attribute name="RelationshipName"/>
		</xs:complexType>
	</xs:element>
	<!--Supporting class for MultiRelationshipFieldTransformer -->
	<xs:element name="Relationships">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="MultiRelationshipFieldTransformer" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- Transformer which gets the value from the CircuitSource table for the mapped circuit ID-->
  <xs:element name="CircuitRelatedFieldTransformer">
    <xs:complexType>
      <xs:attribute name="TableName" type="xs:string" use="required"/>
      <xs:attribute name="FieldName" type="xs:string" use="required"/>
      <xs:attribute name="CircuitIDFieldName" type="xs:string" use="required"/>
      <xs:attribute name="CircuitID2_FieldName" type="xs:string" use="optional"/>
    </xs:complexType>
  </xs:element>
  
	<!-- If a new Mapper type is identified and needs to be added add an XS:ELEMENT defining the mapper here-->
	<!-- Allowable values for the SpatialIndexRel -->
	<xs:simpleType name="SpatialIndexRelation">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Intersect"/>
			<xs:enumeration value="WithinFeature"/>
			<xs:enumeration value="Nearest"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TrackedClass">
		<xs:sequence>
			<xs:element ref="Fields"/>
			<xs:element ref="Settings" minOccurs="0"/>
      <xs:element name="RelatedClass" type="TrackedClass" minOccurs="0"/>
    </xs:sequence>
		<xs:attribute name="OutName" type="xs:string" use="required"/>
		<xs:attribute name="TransformerType" type="xs:string" use="required"/>
    <xs:attribute name="TransformerTypeForOriginClass" type="xs:string" use="optional"/>
    <xs:attribute name="SourceClass" type="xs:string" use="required"/>
		<xs:attribute name="AssetIDField" type="xs:int" use="optional"/>
		<xs:attribute name="RelationshipName" type="xs:string" use="optional"/>
		<xs:attribute name="RelationshipNameWithDeviceGroup" type="xs:string" use="optional"/>
		<xs:attribute name="Subtypes" type="xs:string" use="optional"/>
		<xs:attribute name="SupportClasses" type="xs:string" use="optional"/>
		<xs:attribute name="SAPType" type="xs:string" use="optional"/>
    <xs:attribute name="SingleFieldWhereClauseCondition" type="WhereClauseConditionType" use="optional"/>
	</xs:complexType>

  <xs:simpleType name="WhereClauseConditionType">
    <xs:restriction  base="xs:string">
      <xs:pattern value="([A-Za-z0-9_]*)\s?(=|!=)\s?('?[A-Za-z0-9_]*'?)"/>
    </xs:restriction> 
  </xs:simpleType>
  
  
  <!-- Reverse synced class-->
  <xs:element name="ReverseSyncedClasses">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ReverseSyncedClass" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ReverseSyncedClass">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ReverseSyncedFields" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="OutName" type="xs:string" use="required"/>
      <xs:attribute name="SourceClass" type="xs:string" use="required"/>
      <xs:attribute name="ReverseSyncTableName" type="xs:string" use="required"/>
      <xs:attribute name="DeviceName" type="xs:string" use="required"/>
      <xs:attribute name="ReverseSyncTableGUIDField" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="ReverseSyncedFields">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ReverseSyncedField" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ReverseSyncedField">
    <xs:complexType>
      <xs:attribute name="OutName" type="xs:string" use="required"/>
      <xs:attribute name="GISFieldName" type="xs:string" use="required"/>
      <xs:attribute name="SettingsFieldName" type="xs:string" use="required"/>
      <xs:attribute name="IsLookUp" type="xs:boolean" use="required"/>
    </xs:complexType>
  </xs:element>
  
</xs:schema>
