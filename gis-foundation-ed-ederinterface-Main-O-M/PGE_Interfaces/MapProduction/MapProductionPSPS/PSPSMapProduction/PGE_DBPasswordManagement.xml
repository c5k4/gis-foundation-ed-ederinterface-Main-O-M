<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PGE_DBPasswordManagement</name>
    </assembly>
    <members>
        <member name="T:PGE_DBPasswordManagement.Credential">
            <summary>
            Class object to Connections.xml file
            </summary>
        </member>
        <member name="P:PGE_DBPasswordManagement.Credential.Instance">
            <summary>
            Instance of the DB Connection
            </summary>
        </member>
        <member name="P:PGE_DBPasswordManagement.Credential.Username">
            <summary>
            Username of the DB Connection
            </summary>
        </member>
        <member name="P:PGE_DBPasswordManagement.Credential.Password">
            <summary>
            Password of the DB Connection
            </summary>
        </member>
        <member name="T:PGE_DBPasswordManagement.Connections">
            <summary>
            Class to define all Connections
            </summary>
        </member>
        <member name="P:PGE_DBPasswordManagement.Connections.Credential">
            <summary>
            Collection of Connections
            </summary>
        </member>
        <member name="T:PGE_DBPasswordManagement.Connection">
            <summary>
            Class to define all Connections related functions
            </summary>
        </member>
        <member name="F:PGE_DBPasswordManagement.Connection.connections">
            <summary>
            Object for Connections
            </summary>
        </member>
        <member name="F:PGE_DBPasswordManagement.Connection.pConfiguration">
            <summary>
            (V3SF) Configration Reference
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Connection.#ctor(System.String,System.Configuration.Configuration)">
            <summary>
            Constructor for initializing Connection and reading Connections.xml
            </summary>
            <param name="sConnectionsPath"></param>
            <param name="pConfiguration"></param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Connection.getPassword(System.String,System.String)">
            <summary>
            Function return clear text Password
            </summary>
            <param name="Username">Username for which password is required</param>
            <param name="Instance">Instance for which password is required</param>
            <returns>Clear Password string</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.Connection.getSDEFile(System.String,System.String,System.String)">
            <summary>
            Create SDE files
            </summary>
            <param name="username">Username to create SDE file</param>
            <param name="password">Password to create SDE file</param>
            <param name="instance">Instance to create SDE file</param>
            <returns>Path for the newly created SDE path</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.Connection.REMOVEXMLTAG(System.String,System.String,System.String)">
            <summary>
            Remove a XML entry from Connection.xml
            </summary>
            <param name="username">Username for tag to be removed</param>
            <param name="password">Password for tag to be removed in clear text</param>
            <param name="instance">Instance for tag to be removed</param>
            <returns>Remove the provided tag information from XML</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.Connection.ADDXMLTAG(System.String,System.String,System.String)">
            <summary>
            Add a XML entry to Connection.xml
            </summary>
            <param name="username">Username for tag to be added</param>
            <param name="password">Password for tag to be added in clear text</param>
            <param name="instance">Instance for tag to be added</param>
            <returns>Added the provided tag information to XML in encypted format</returns>
        </member>
        <member name="T:PGE_DBPasswordManagement.EncryptionFacade">
            <summary>
            Helper class to Encrypt and Decrypt passwords using Miner.PasswordEncryption class
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.EncryptionFacade.Encrypt(System.String,System.Configuration.Configuration)">
            <summary>
            Encrypts and plain string using Miner.PasswordEncryption class. 
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.EncryptionFacade.Decrypt(System.String,System.Configuration.Configuration)">
            <summary>
            Decrypts the string Encrypted using Miner.PasswordEncryption to plain text. 
            </summary>
            <param name="encryptedPassword"></param>
            <returns></returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.PasswordEncryption.#ctor(System.Configuration.Configuration)">
            <summary>
            Construct for initiating Crypto provider
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.PasswordEncryption.StringToByteArray(System.String)">
            <summary>
            Convert Hex string to byte
            </summary>
            <param name="hex">Hexadecimal string</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.PasswordEncryption.Encrypt(System.String)">
            <summary>
            Provides encryption of the specified plain text.
            </summary>
            <param name="plainText">The plain text to be encrypted.</param>
            <returns>The encrypted text result.</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.PasswordEncryption.Decrypt(System.String)">
            <summary>
            Provides decription of the specified encrypted text.
            </summary>
            <param name="encryptedText">The text to be decrypted.</param>
            <returns>The decrypted text result.</returns>
        </member>
        <member name="T:PGE_DBPasswordManagement.Installer">
            <summary>
            Installer Class
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Installer.#ctor">
            <summary>
            Installer Class Constructor
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Installer.Install(System.Collections.IDictionary)">
            <summary>
            Add GAC Entry
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Installer.Uninstall(System.Collections.IDictionary)">
            <summary>
            Remove GAC Entry
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="F:PGE_DBPasswordManagement.Installer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Installer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Installer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PGE_DBPasswordManagement.Program">
            <summary>
            Main Class to access Password Management Console
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.#ctor">
            <summary>
            Constructor to Initialize objects/read App config
            </summary>
        </member>
        <member name="F:PGE_DBPasswordManagement.Program.pRandom">
            <summary>
            Randomizer
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.Main(System.String[])">
            <summary>
            Main function for console
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ADMINADDF(System.String[])">
            <summary>
            Function to add multiple entry to XML
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ADMINADD(System.String[])">
            <summary>
            Function to add single entry to XML
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ADMINREMOVE(System.String[])">
            <summary>
            Function to remove one entry from XML
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.GETSDEFILE(System.String[])">
            <summary>
            Function to get SDE file created
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.RetGETSDEFILE(System.String)">
            <summary>
            Function to get SDE file created
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.GETPASSWORD(System.String[])">
            <summary>
            Function to get password from xml
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.RetGETPASSWORD(System.String)">
            <summary>
            V3SF
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.GENSETDBPASSWORD(System.String[])">
            <summary>
            Function to generate set password
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ADMINREADCONNETIONF">
            <summary>
            
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.DECRYPTF(System.String[])">
            <summary>
            Decypt encrypted text
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ENCRYPTF(System.String[])">
            <summary>
            Encrypt clear text
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.GENPASSWORD(System.String[])">
            <summary>
            Generate password text
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.RetGENPASSWORD(System.String)">
            <summary>
            Generate password text
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.GENPASSWORDF(System.String[])">
            <summary>
            Function to generate multiple passwords
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="M:PGE_DBPasswordManagement.Program.ShowFormat">
            <summary>
            Function to show password format
            </summary>
            <param name="args">arguments passed from console</param>
        </member>
        <member name="T:PGE_DBPasswordManagement.ReadEncryption">
            <summary>
            Class Library Class to Access Password Management Functions
            </summary>
        </member>
        <member name="M:PGE_DBPasswordManagement.ReadEncryption.CreateOracleConnString(System.String,System.String,System.String)">
            <summary>
            Create Oracle Connection String
            </summary>
            <param name="Data_Source"></param>
            <param name="user"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.ReadEncryption.GetConnectionStr(System.String)">
            <summary>
            Get Connection Details and create connection string
            </summary>
            <param name="username_Instance">Provide USER@INSTANCE in Upper Case like EDER@EDGEM1D</param>
            <returns>Returns Oracle Connection String for given User and Instance</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.ReadEncryption.GetPassword(System.String)">
            <summary>
            Get Password from PGE_DBPasswordManagement Project
            </summary>
            <param name="username_Instance">Provide USER@INSTANCE in Upper Case like EDER@EDGEM1D</param>
            <returns>Returns Password for given User and Instance</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.ReadEncryption.GetSDEPath(System.String)">
            <summary>
            Get Sde Path for given username@Instance
            </summary>
            <param name="username_Instance">Provide USER@INSTANCE in Upper Case like EDER@EDGEM1D</param>
            <returns>Returns SDE Path for given User and Instance</returns>
        </member>
        <member name="M:PGE_DBPasswordManagement.ReadEncryption.GenPassword(System.String)">
            <summary>
            Generates Password 
            </summary>
            <param name="username_Instance">Provide USER@INSTANCE in Upper Case like EDER@EDGEM1D</param>
            <returns>Returns Generated Password for given User and Instance</returns>
        </member>
    </members>
</doc>
